<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>environment</title>
    <url>/archives/project/briup_environment.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><ul>
<li>:file_folder: 物联网环境监测系统 </li>
<li>:timer_clock: 2021/9/24</li>
<li>:school:  jd2017(菁英班)</li>
<li>:man_teacher:  崔略(主讲)</li>
<li>👨‍💻  vanse-刘聪(辅导) </li>
</ul>
<h1 id="1-项目准备"><a href="#1-项目准备" class="headerlink" title="1 项目准备"></a>1 项目准备</h1><p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210924140713895.png"></p>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><blockquote>
<p>:tipping_hand_man:  此处以Oracle为例 pl/sql语法循环建31张表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--使用PL/SQL建表</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">FOR</span> i <span class="keyword">IN</span> <span class="number">1.</span><span class="number">.31</span> LOOP</span><br><span class="line"><span class="keyword">EXECUTE</span> IMMEDIATE</span><br><span class="line"><span class="string">&#x27;CREATE TABLE e_detail_&#x27;</span><span class="operator">||</span>TO_CHAR(i)<span class="operator">||</span></span><br><span class="line"><span class="string">&#x27;(</span></span><br><span class="line"><span class="string">    name varchar2(20),</span></span><br><span class="line"><span class="string">    srcId varchar2(5),</span></span><br><span class="line"><span class="string">    desId varchar2(5),</span></span><br><span class="line"><span class="string">    devId varchar2(5),</span></span><br><span class="line"><span class="string">    sersorAddress varchar2(7),</span></span><br><span class="line"><span class="string">    count number(2),</span></span><br><span class="line"><span class="string">    cmd  varchar2(5),</span></span><br><span class="line"><span class="string">    status number(2),</span></span><br><span class="line"><span class="string">    data number(9,4),</span></span><br><span class="line"><span class="string">    gather_date date</span></span><br><span class="line"><span class="string">)&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--删除31张表</span></span><br><span class="line"><span class="comment">--使用PL/SQL删除表</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">FOR</span> i <span class="keyword">IN</span> <span class="number">1.</span><span class="number">.31</span> LOOP</span><br><span class="line"><span class="keyword">EXECUTE</span> IMMEDIATE</span><br><span class="line">	<span class="string">&#x27;DROP TABLE e_detail_&#x27;</span><span class="operator">||</span>TO_CHAR(i);</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="2-客户端"><a href="#2-客户端" class="headerlink" title="2 客户端"></a>2 客户端</h1><h2 id="采集数据"><a href="#采集数据" class="headerlink" title="采集数据"></a>采集数据</h2><p><code>已知数据</code></p>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a><strong>Environment</strong></h3><blockquote>
<p>当16的时候  对应要解析两个Environment 湿度对象 温度对象 即name属性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 环境存储实体类,包括环境种类(温度,湿度,二氧化碳,光照强度)</span></span><br><span class="line"><span class="comment"> 16 温/湿度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Environment</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//环境种类名称</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="comment">//发送端id</span></span><br><span class="line">	<span class="keyword">private</span> String srcId;</span><br><span class="line">	<span class="comment">//树莓派系统id</span></span><br><span class="line">	<span class="keyword">private</span> String desId;</span><br><span class="line">	<span class="comment">//实验箱区域模块id(1-8)</span></span><br><span class="line">	<span class="keyword">private</span> String devId;</span><br><span class="line">	<span class="comment">//模块上传感器地址 16 256 1280</span></span><br><span class="line">	<span class="keyword">private</span> String sersorAddress;</span><br><span class="line">	<span class="comment">//传感器个数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line">	<span class="comment">//发送指令标号 3表示接收数据 16表示发送命令</span></span><br><span class="line">	<span class="keyword">private</span> String cmd;</span><br><span class="line">	<span class="comment">//环境值</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">float</span> data;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//状态 默认1表示成功</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">	<span class="comment">//采集时间</span></span><br><span class="line">	<span class="keyword">private</span> Timestamp gather_date;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//GET/SET</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="data-file-simple"><a href="#data-file-simple" class="headerlink" title="data-file-simple"></a>data-file-simple</h3><blockquote>
<p>:tipping_hand_man: 数据只有9列 而Environment对象有10个属性</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100|101|2|16|1|3|57a491fc02|1|1516413763738</span><br><span class="line">100|101|2|16|1|3|57a891fc02|1|1516413764761</span><br><span class="line">100|101|2|16|1|3|57a491fc02|1|1516413765686</span><br><span class="line">100|101|2|256|1|3|001c03|1|1516413766708</span><br><span class="line">100|101|2|256|1|3|001c03|1|1516413767731</span><br><span class="line">100|101|2|16|1|3|57a492d002|1|1516413768756</span><br><span class="line">100|101|2|1280|1|3|02f801|1|1516413769787</span><br><span class="line">100|101|2|1280|1|3|02f801|1|1516413770702</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>一行数据表示一组数据，每个数据之间使用“|”分割，每行数据都表示一种环境数据，同时，每行数据分为以下九个小部分：</p>
<ol>
<li><p>发送端id</p>
</li>
<li><p>树莓派系统id</p>
</li>
<li><p>实验箱区域模块id(1-8)</p>
</li>
<li><p>模块上传感器地址</p>
<ul>
<li>16，表示温度和湿度数据</li>
<li>256，表示光照强度数据</li>
<li>1280，表示二氧化碳数据</li>
</ul>
</li>
<li><p>传感器个数</p>
</li>
<li><p>指令标号</p>
<p>如果是3表示需要接受数据，如果是16表示需要发送数据</p>
</li>
<li><p><strong>环境数据</strong></p>
</li>
<li><p>状态标识</p>
<p>默认为1，表示成功</p>
</li>
<li><p>采集时间</p>
</li>
</ol>
<p><strong>特别注意，关于一行中的第7个数据部分：</strong></p>
<p>这部分是真正的环境数据，但是使用的十六进制表示，需要转换为十进制，分三种情况：</p>
<ul>
<li><p>如果当前是温度和湿度的数据，则前两个字节是温度，中间两个字节是湿度，剩余字节不用管</p>
</li>
<li><p>如果当前是光照强度的数据，则前两个字节就是数据值，剩余字节不用管</p>
</li>
<li><p>如果当前是二氧化碳的数据，则前两个字节就是数据值，剩余字节不用管</p>
</li>
</ul>
<blockquote>
<p>注意，一个字节可以由2个十六进制表示</p>
</blockquote>
<p>把十六进制的环境数据，转为十进制的数据之后，还需要进一步处理：</p>
<ul>
<li>如果是温度数据：(data*(0.00268127F))-46.85F</li>
<li>如果是湿度数据：(data*0.00190735F)-6</li>
<li>如果是二氧化碳和光照强度，直接转换得到的十进制数据就可以表示</li>
</ul>
<p><code>分析</code></p>
<ul>
<li>读取simple-file文件</li>
<li>解析每一行 分别封装到 一个Environment对象</li>
<li>第4列 和 第7列<ul>
<li>第四列<ul>
<li>16  </li>
<li>256</li>
<li>1280</li>
</ul>
</li>
<li>第7列 16进制  57a491fc02  ==两个字节  57a4==<ul>
<li>16 温/湿度  温: 前两个字节 湿度 : 中间两个字节</li>
<li>256 光照</li>
<li>1280 二氧化碳</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1个  2个16进制</span><br><span class="line">1个  8个二进制位</span><br><span class="line">1个16进制 4个二进制表示  1/2个字节</span><br><span class="line">因此  一个字节代表2个16进制</span><br></pre></td></tr></table></figure>





<p><code>过程</code></p>
<p>###pom.xm</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 此处版本可省略 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.briup.smart<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>env-gather-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="GatherImpl"><a href="#GatherImpl" class="headerlink" title="GatherImpl"></a>GatherImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.entity.Environment;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.util.CopyUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 采集数据</span></span><br><span class="line"><span class="comment"> * 	将100|101|2|16|1|3|5f6c6ba002|1|1516323990934 封装成 Environment对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatherImpl</span> <span class="keyword">implements</span> <span class="title">Gather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Collection&lt;Environment&gt; <span class="title">gather</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		InputStream in = GatherImpl.class.getClassLoader().getResourceAsStream(<span class="string">&quot;data-file-simple&quot;</span>);</span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">		Collection&lt;Environment&gt; enColl = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="comment">// 1.读取数据</span></span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">			String[] lineData = line.split(<span class="string">&quot;[|]&quot;</span>);</span><br><span class="line">			Environment environment = <span class="keyword">new</span> Environment();</span><br><span class="line">			<span class="comment">// 设置发送端id</span></span><br><span class="line">			environment.setSrcId(lineData[<span class="number">0</span>]);</span><br><span class="line">			<span class="comment">// 设置树莓派系统id</span></span><br><span class="line">			environment.setDesId(lineData[<span class="number">1</span>]);</span><br><span class="line">			<span class="comment">// 设置实验箱区域id</span></span><br><span class="line">			environment.setDevId(lineData[<span class="number">2</span>]);</span><br><span class="line">			<span class="comment">// 设置模块上传地址</span></span><br><span class="line">			environment.setSersorAddress(lineData[<span class="number">3</span>]);</span><br><span class="line">			<span class="comment">// 设置传感器个数</span></span><br><span class="line">			environment.setCount(Integer.parseInt(lineData[<span class="number">4</span>]));</span><br><span class="line">			<span class="comment">// 设置发送指令</span></span><br><span class="line">			environment.setCmd(lineData[<span class="number">5</span>]);</span><br><span class="line">			<span class="comment">// 设置状态</span></span><br><span class="line">			environment.setStatus(Integer.parseInt(lineData[<span class="number">7</span>]));</span><br><span class="line">			<span class="comment">// 设置采集时间</span></span><br><span class="line">			environment.setGather_date(<span class="keyword">new</span> Timestamp(Long.parseLong(lineData[<span class="number">8</span>])));</span><br><span class="line">			<span class="comment">// 设置环境种类</span></span><br><span class="line">			<span class="keyword">switch</span> (environment.getSersorAddress()) &#123;</span><br><span class="line">			<span class="comment">// 5d606f7802</span></span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;16&quot;</span>:</span><br><span class="line">				environment.setName(<span class="string">&quot;温度&quot;</span>);<span class="comment">// 也有可能是湿度</span></span><br><span class="line">				<span class="keyword">int</span> wendu = Integer.parseInt(lineData[<span class="number">6</span>].substring(<span class="number">0</span>, <span class="number">4</span>), <span class="number">16</span>);<span class="comment">// 温度数据</span></span><br><span class="line">				environment.setData((wendu * (<span class="number">0.00268127F</span>)) - <span class="number">46.85F</span>);</span><br><span class="line">				Environment copy = CopyUtil.copy(environment);</span><br><span class="line">				copy.setName(<span class="string">&quot;湿度&quot;</span>);</span><br><span class="line">				<span class="keyword">int</span> shidu = Integer.parseInt(lineData[<span class="number">6</span>].substring(<span class="number">4</span>, <span class="number">8</span>), <span class="number">16</span>);<span class="comment">// 湿度数据</span></span><br><span class="line">				enColl.add(copy);</span><br><span class="line">				<span class="comment">// 复制对象</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;256&quot;</span>:</span><br><span class="line">				environment.setName(<span class="string">&quot;光照强度&quot;</span>);</span><br><span class="line">				environment.setData(Integer.parseInt(lineData[<span class="number">6</span>].substring(<span class="number">0</span>, <span class="number">4</span>), <span class="number">16</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;1280&quot;</span>:</span><br><span class="line">				environment.setName(<span class="string">&quot;二氧化碳&quot;</span>);</span><br><span class="line">				environment.setData(Integer.parseInt(lineData[<span class="number">6</span>].substring(<span class="number">0</span>, <span class="number">4</span>), <span class="number">16</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			enColl.add(environment);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> enColl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Collection&lt;Environment&gt; enColl = <span class="keyword">new</span> GatherImpl().gather();</span><br><span class="line">        <span class="comment">// 106866条数据</span></span><br><span class="line">		System.out.println(enColl.size());</span><br><span class="line"><span class="comment">//		enColl.forEach(en-&gt;&#123;</span></span><br><span class="line"><span class="comment">//			System.out.println(en);</span></span><br><span class="line"><span class="comment">//		&#125;);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CopyUtil"><a href="#CopyUtil" class="headerlink" title="CopyUtil"></a>CopyUtil</h3><p><code>该方法用以复制对象和属性</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyUtil</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 复制对象</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">copy</span><span class="params">(T t)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 创建新对象以及属性</span></span><br><span class="line">		<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">		Class&lt;T&gt; c = (Class&lt;T&gt;) t.getClass();</span><br><span class="line">		T copy = c.newInstance();</span><br><span class="line">		<span class="comment">// 将原对象的属性复制给新属性</span></span><br><span class="line">		<span class="comment">// 所有的属性名</span></span><br><span class="line">		Field[] fields = c.getDeclaredFields();</span><br><span class="line">		<span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">			<span class="comment">// final修饰的值过滤</span></span><br><span class="line">			<span class="keyword">if</span> (Modifier.isFinal(field.getModifiers())) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">			<span class="comment">// 获取值</span></span><br><span class="line">			field.set(copy, field.get(t));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> copy;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h2><p><code>分析</code></p>
<ul>
<li>网络套接字</li>
<li>对象流</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.entity.Environment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 网络套接字 - 客户端</span></span><br><span class="line"><span class="comment"> * 	 将采集到的数据发送给服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientImpl</span> <span class="keyword">implements</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String address = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Collection&lt;Environment&gt; c)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Socket socket = <span class="keyword">new</span> Socket(address, port);</span><br><span class="line">		OutputStream out = socket.getOutputStream();</span><br><span class="line">		ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">		oos.writeObject(c);</span><br><span class="line">		oos.flush();</span><br><span class="line">		System.out.println(<span class="string">&quot;客户端发送数据完成&quot;</span>);</span><br><span class="line">		oos.close();</span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="3-服务端"><a href="#3-服务端" class="headerlink" title="3 服务端"></a>3 服务端</h1><h2 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h2><p><code>分析</code></p>
<ul>
<li>网络套接字</li>
<li>对象流</li>
</ul>
<h3 id="ServerImpl"><a href="#ServerImpl" class="headerlink" title="ServerImpl"></a>ServerImpl</h3><blockquote>
<p>:tipping_hand_man: volatile关键字的含义</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.entity.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerImpl</span> <span class="keyword">implements</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 接收服务器端口</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> receivePort = <span class="number">8888</span>;</span><br><span class="line">	<span class="comment">// 关闭服务器接口</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> shutdownPort = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">	ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 接收服务器的接收方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reciver</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		serverSocket = <span class="keyword">new</span> ServerSocket(receivePort);</span><br><span class="line">		Socket socket = <span class="keyword">null</span>;</span><br><span class="line">		ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">		startShutdown();</span><br><span class="line">		<span class="keyword">while</span> (!flag) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				socket = serverSocket.accept();</span><br><span class="line">				InputStream in = socket.getInputStream();</span><br><span class="line">				ois = <span class="keyword">new</span> ObjectInputStream(in);</span><br><span class="line">				Collection&lt;Environment&gt; enColl = (Collection&lt;Environment&gt;) ois.readObject();</span><br><span class="line">				System.out.println(<span class="string">&quot;接收到了数据: &quot;</span> + enColl.size());</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (ois != <span class="keyword">null</span>) &#123;</span><br><span class="line">					ois.close();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">					socket.close();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startShutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">			Socket socket = <span class="keyword">null</span>;</span><br><span class="line">			ServerSocket serverSocket = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				serverSocket = <span class="keyword">new</span> ServerSocket(shutdownPort);</span><br><span class="line">				Socket socker = serverSocket.accept();</span><br><span class="line">				<span class="comment">// 关闭服务器</span></span><br><span class="line">				ServerImpl.<span class="keyword">this</span>.shutdown();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						serverSocket.close();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		&#125;).start();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 用于关闭接收服务器的 方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.flag = <span class="keyword">true</span>;</span><br><span class="line">		<span class="comment">// 注意需要手动关闭接收服务器</span></span><br><span class="line">		serverSocket.close();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>测试</code></p>
<p><strong>发送服务端和关闭服务端</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210926210623479.png" alt="image-20210926210623479"></p>
<p><strong>发送客户端</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210926210459984.png" alt="image-20210926210459984"></p>
<p><strong>关闭客户端</strong></p>
<p><img src="image/image-20210926210650194.png" alt="image-20210926210650194"></p>
<p><strong>结果</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210926205351670.png" alt="image-20210926205351670"></p>
<p><code>代码解析</code></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210926210400284.png" alt="image-20210926210400284"></p>
<p><code>volatile关键字可以保证线程的可见性</code></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/2897315-c8bfc26b7dab8341.jpg"></p>
<h2 id="数据入库"><a href="#数据入库" class="headerlink" title="数据入库"></a>数据入库</h2><blockquote>
<p>每个Environment对象有日期属性,代表该数据是某个时间点采集的,将每个对象按照日期(主要是天)插入到对应的表中(31张表对应31天)</p>
</blockquote>
<ul>
<li>遍历<code>List&lt;Environment&gt;</code>集合</li>
<li>获取每个对象的采集日期(时间戳),截取天数</li>
<li>将每个对象(每条数据)按照日期 插入到对应的表中(table_(1-31))<ul>
<li>String sql = “insert into table() values(?,?,?…)”;</li>
<li>conn.preparedStatement(sql);</li>
<li>ps设置参数</li>
<li>ps.executeUpdate();</li>
</ul>
</li>
<li>:tipping_hand_man: 使用手动提交+ps+批处理提升插入效率<ul>
<li>==注意: 如果插入的第二条数据和第一条数据是同一天,正常操作,否则,新的天数,sql变动,同构语句失效.需要重新构建==</li>
</ul>
</li>
</ul>
<blockquote>
<p>:tipping_hand_man: 如果本地仓库没有ojdbc8驱动,使用远程仓库</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.oracle.ojdbc/ojdbc8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle.ojdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>19.3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装jar包到本地仓库命令</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=com.oracle -DartifactId=ojdbc8 -Dversion=8 -Dpackaging=jar -Dfile=ojdbc8.jar -DgeneratePom=true</span><br></pre></td></tr></table></figure>

<blockquote>
<p>:tipping_hand_man: 如果不是同一个ps对象,批处理会失效</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.entity.Environment;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.util.JdbcUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBStoreImpl</span> <span class="keyword">implements</span> <span class="title">DBStore</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> lastDate = -<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> batchSize = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;Integer&gt; days = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">	<span class="keyword">private</span> Connection conn = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">private</span> PreparedStatement ps;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveDB</span><span class="params">(Collection&lt;Environment&gt; c)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;开始入库&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn = JdbcUtil.getConnection();</span><br><span class="line">			conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">			<span class="keyword">for</span> (Environment env : c) &#123;</span><br><span class="line">				<span class="keyword">int</span> date = env.getGather_date().getDate();</span><br><span class="line">				days.add(date);</span><br><span class="line">				String sql = <span class="keyword">null</span>;</span><br><span class="line">				<span class="keyword">if</span>(lastDate == -<span class="number">1</span>) &#123;</span><br><span class="line">					sql = <span class="string">&quot;insert into e_detail_&quot;</span> + date</span><br><span class="line">							+ <span class="string">&quot;(name,srcId,desId,devId,sersorAddress,count,cmd,status,data,gather_date) values(?,?,?,?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">					ps = conn.prepareStatement(sql);</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="comment">// 不是同一天</span></span><br><span class="line">					<span class="keyword">if</span>(lastDate != date) &#123;</span><br><span class="line">						<span class="comment">// 执行上个批处理的数据</span></span><br><span class="line">						ps.executeBatch();</span><br><span class="line">						batchSize = <span class="number">0</span>;</span><br><span class="line">						ps.close(); <span class="comment">// 关闭上一次的ps</span></span><br><span class="line">						sql = <span class="string">&quot;insert into e_detail_&quot;</span> + date</span><br><span class="line">								+ <span class="string">&quot;(name,srcId,desId,devId,sersorAddress,count,cmd,status,data,gather_date) values(?,?,?,?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line">						ps = conn.prepareStatement(sql);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 填充参数</span></span><br><span class="line">				ps.setString(<span class="number">1</span>, env.getName());</span><br><span class="line">				ps.setString(<span class="number">2</span>, env.getSrcId());</span><br><span class="line">				ps.setString(<span class="number">3</span>, env.getDesId());</span><br><span class="line">				ps.setString(<span class="number">4</span>, env.getDevId());</span><br><span class="line">				ps.setString(<span class="number">5</span>, env.getSersorAddress());</span><br><span class="line">				ps.setInt(<span class="number">6</span>, env.getCount());</span><br><span class="line">				ps.setString(<span class="number">7</span>, env.getCmd());</span><br><span class="line">				ps.setInt(<span class="number">8</span>, env.getStatus());</span><br><span class="line">				ps.setFloat(<span class="number">9</span>, env.getData());</span><br><span class="line">				ps.setTimestamp(<span class="number">10</span>, env.getGather_date());</span><br><span class="line">				<span class="comment">// 添加批处理</span></span><br><span class="line">				ps.addBatch();</span><br><span class="line">				batchSize++;</span><br><span class="line">				<span class="keyword">if</span> (batchSize == <span class="number">200</span>) &#123;</span><br><span class="line">					ps.executeBatch();</span><br><span class="line">					<span class="comment">// 批处理完后 重新计数</span></span><br><span class="line">					batchSize = <span class="number">0</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				lastDate = date;</span><br><span class="line">			&#125;</span><br><span class="line">			ps.executeBatch();</span><br><span class="line">			conn.commit();</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			conn.rollback();</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			JdbcUtil.close(ps, conn);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;分布: &quot;</span> + days);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>









<h1 id="4-备份"><a href="#4-备份" class="headerlink" title="4 备份"></a>4 备份</h1><p><code>场景</code></p>
<ul>
<li>第一次采集完数据(simple.file)</li>
<li>此时假设该文件新添了10行数据(手动添加,模拟硬件时刻采集)</li>
<li>此时再次采集新数据,应该只采集新添加的数据,不会重新从该文件的第一行开始重新解析</li>
</ul>
<p><code>分析</code></p>
<ul>
<li>实现<code>backup/load</code>方法<ul>
<li>采集文件时,先看是否有备份,有的话,跳过已采集的字节长度</li>
</ul>
</li>
<li>实现<code>backup/store</code>方法<ul>
<li>每次采集完数据,记录当时采集的字节长度,保存在backup.file中</li>
</ul>
</li>
</ul>
<p><code>备份实现</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackupImpl</span> <span class="keyword">implements</span> <span class="title">Backup</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String basePath = <span class="string">&quot;src/main/resources/bak&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">load</span><span class="params">(String fileName, <span class="keyword">boolean</span> del)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ObjectInputStream in = <span class="keyword">null</span>;</span><br><span class="line">		Object obj = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String filePath = basePath + <span class="string">&quot;/&quot;</span> +fileName;</span><br><span class="line">			File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">			<span class="comment">// 如果备份文件不存在，直接返回null</span></span><br><span class="line">			<span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">			</span><br><span class="line">			obj = in.readObject();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(del) &#123;</span><br><span class="line">				file.deleteOnExit();</span><br><span class="line"><span class="comment">//				System.out.println(&quot;备份文件已删除：&quot;+file.delete());</span></span><br><span class="line">			&#125;</span><br><span class="line">					</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(in!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				in.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> obj;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(String fileName, Object obj, <span class="keyword">boolean</span> append)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ObjectOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String filePath = basePath+<span class="string">&quot;/&quot;</span>+fileName;</span><br><span class="line">			File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">			<span class="comment">// 判断文件所在目录是否存在,如果不存在则创建</span></span><br><span class="line">			<span class="keyword">if</span>(!file.getParentFile().exists()) &#123;</span><br><span class="line">				file.getParentFile().mkdirs();</span><br><span class="line">			&#125;</span><br><span class="line">			out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file,append));</span><br><span class="line">			out.writeObject(obj);</span><br><span class="line">			out.flush();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(out!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				out.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>改造采集模块</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.entity.Environment;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.util.Backup;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.util.BackupImpl;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.util.CopyUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 采集数据</span></span><br><span class="line"><span class="comment"> * 	将100|101|2|16|1|3|5f6c6ba002|1|1516323990934 封装成 Environment对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatherImpl</span> <span class="keyword">implements</span> <span class="title">Gather</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Backup backup = <span class="keyword">new</span> BackupImpl();</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Collection&lt;Environment&gt; <span class="title">gather</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		File file = <span class="keyword">new</span> File(<span class="string">&quot;data-file&quot;</span>);</span><br><span class="line">		<span class="comment">//InputStream in = GatherImpl.class.getClassLoader().getResourceAsStream(&quot;data-file&quot;);</span></span><br><span class="line">		BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</span><br><span class="line">		</span><br><span class="line">		Long len = (Long)backup.load(<span class="string">&quot;gather-file-length&quot;</span>, Backup.LOAD_UNREMOVE);</span><br><span class="line">		<span class="keyword">if</span>(len!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			br.skip(len);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">long</span> fileLength = file.length();</span><br><span class="line">		backup.store(<span class="string">&quot;gather-file-length&quot;</span>, fileLength, Backup.STORE_OVERRIDE);</span><br><span class="line">			</span><br><span class="line">		Collection&lt;Environment&gt; enColl = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="comment">// 1.读取数据</span></span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">			String[] lineData = line.split(<span class="string">&quot;[|]&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span>(lineData.length != <span class="number">9</span>) &#123;</span><br><span class="line">				<span class="comment">// TODO 记录当前格式有问题的数据</span></span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			Environment environment = <span class="keyword">new</span> Environment();</span><br><span class="line">			<span class="comment">// 设置发送端id</span></span><br><span class="line">			environment.setSrcId(lineData[<span class="number">0</span>]);</span><br><span class="line">			<span class="comment">// 设置树莓派系统id</span></span><br><span class="line">			environment.setDesId(lineData[<span class="number">1</span>]);</span><br><span class="line">			<span class="comment">// 设置实验箱区域id</span></span><br><span class="line">			environment.setDevId(lineData[<span class="number">2</span>]);</span><br><span class="line">			<span class="comment">// 设置模块上传地址</span></span><br><span class="line">			environment.setSersorAddress(lineData[<span class="number">3</span>]);</span><br><span class="line">			<span class="comment">// 设置传感器个数</span></span><br><span class="line">			environment.setCount(Integer.parseInt(lineData[<span class="number">4</span>]));</span><br><span class="line">			<span class="comment">// 设置发送指令</span></span><br><span class="line">			environment.setCmd(lineData[<span class="number">5</span>]);</span><br><span class="line">			<span class="comment">// 设置状态</span></span><br><span class="line">			environment.setStatus(Integer.parseInt(lineData[<span class="number">7</span>]));</span><br><span class="line">			<span class="comment">// 设置采集时间</span></span><br><span class="line">			environment.setGather_date(<span class="keyword">new</span> Timestamp(Long.parseLong(lineData[<span class="number">8</span>])));</span><br><span class="line">			<span class="comment">// 设置环境种类</span></span><br><span class="line">			<span class="keyword">switch</span> (environment.getSersorAddress()) &#123;</span><br><span class="line">			<span class="comment">// 5d606f7802</span></span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;16&quot;</span>:</span><br><span class="line">				environment.setName(<span class="string">&quot;温度&quot;</span>);<span class="comment">// 也有可能是湿度</span></span><br><span class="line">				<span class="keyword">int</span> wendu = Integer.parseInt(lineData[<span class="number">6</span>].substring(<span class="number">0</span>, <span class="number">4</span>), <span class="number">16</span>);<span class="comment">// 温度数据</span></span><br><span class="line">				environment.setData((wendu * (<span class="number">0.00268127F</span>)) - <span class="number">46.85F</span>);</span><br><span class="line">				Environment copy = CopyUtil.copy(environment);</span><br><span class="line">				copy.setName(<span class="string">&quot;湿度&quot;</span>);</span><br><span class="line">				<span class="keyword">int</span> shidu = Integer.parseInt(lineData[<span class="number">6</span>].substring(<span class="number">4</span>, <span class="number">8</span>), <span class="number">16</span>);<span class="comment">// 湿度数据</span></span><br><span class="line">				enColl.add(copy);</span><br><span class="line">				<span class="comment">// 复制对象</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;256&quot;</span>:</span><br><span class="line">				environment.setName(<span class="string">&quot;光照强度&quot;</span>);</span><br><span class="line">				environment.setData(Integer.parseInt(lineData[<span class="number">6</span>].substring(<span class="number">0</span>, <span class="number">4</span>), <span class="number">16</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&quot;1280&quot;</span>:</span><br><span class="line">				environment.setName(<span class="string">&quot;二氧化碳&quot;</span>);</span><br><span class="line">				environment.setData(Integer.parseInt(lineData[<span class="number">6</span>].substring(<span class="number">0</span>, <span class="number">4</span>), <span class="number">16</span>));</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			enColl.add(environment);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> enColl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Collection&lt;Environment&gt; enColl = <span class="keyword">new</span> GatherImpl().gather();</span><br><span class="line">		System.out.println(enColl.size());</span><br><span class="line"><span class="comment">//		enColl.forEach(en-&gt;&#123;</span></span><br><span class="line"><span class="comment">//			System.out.println(en);</span></span><br><span class="line"><span class="comment">//		&#125;);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="5-日志"><a href="#5-日志" class="headerlink" title="5 日志"></a>5 日志</h1><p><code>场景</code></p>
<blockquote>
<p>测试的时候经常使用System.out.println() 查看情况</p>
</blockquote>
<p><strong>弊端</strong></p>
<ul>
<li>将来项目上线<code>System.out.println</code>等冗余代码需要删除</li>
<li>此时该代码分布在各地,不易统一删除管理</li>
<li>每输出一条语句,都会占用性能</li>
</ul>
<p><code>解决</code></p>
<p>使用日志,本处引入<code>Log4j</code>,详情查看已发布资料</p>
<ul>
<li>导入Log4j.jar</li>
<li>使用配置文件统一管理日志  Log4j.properties</li>
<li>使用log.info()/log.debug()/log.warning()等方法替换<code>System.out.println</code></li>
</ul>
<p><code>log4j.properties</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># OFF FATAL ERROR WARN INFO DEBUG TRACE ALL</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,contrl,file</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.contrl</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.contrl.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.contrl.layout.ConversionPattern</span>=<span class="string">%d %5p [%t] (%F:%L) - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.file</span>=<span class="string">org.apache.log4j.FileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">D:/env/log/log.txt</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">%d %5p [%t] (%F:%L) - %m%n</span></span><br></pre></td></tr></table></figure>



<p><code>日志包装</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogImpl</span> <span class="keyword">implements</span> <span class="title">Log</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger LOGGER = Logger.getRootLogger();</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		LOGGER.debug(message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		LOGGER.info(message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		LOGGER.warn(message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		LOGGER.error(message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fatal</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		LOGGER.fatal(message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>日志使用 GatherImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Log log = <span class="keyword">new</span> LogImpl();</span><br><span class="line"></span><br><span class="line">socket = <span class="keyword">new</span> Socket(serverIp, serverPort);</span><br><span class="line">log.info(<span class="string">&quot;客户端模块 连接服务器成功，ip=&quot;</span>+serverIp+<span class="string">&quot;，port=&quot;</span>+serverPort);</span><br><span class="line"></span><br><span class="line">out = <span class="keyword">new</span> ObjectOutputStream(socket.getOutputStream());</span><br><span class="line"></span><br><span class="line">out.writeObject(c);</span><br><span class="line"></span><br><span class="line">out.flush();</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;客户端模块 发送数据成功，共发送&quot;</span>+c.size()+<span class="string">&quot;条数据&quot;</span>);</span><br></pre></td></tr></table></figure>





<h1 id="6-配置"><a href="#6-配置" class="headerlink" title="6 配置"></a>6 配置</h1><p>==需要实现的接口==</p>
<ul>
<li>Configuration.java 配置模块</li>
<li>ConfigurationAware.java 配置注入</li>
<li>PropertiesAware.java 属性注入</li>
</ul>
<p><code>场景</code></p>
<p>例如采集模块</p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210927140800703.png" alt="image-20210927140800703"></p>
<p>该模块引入了备份模块 backup和属性filePath</p>
<p><code>弊端</code></p>
<p>如果某类需要依赖其他对象或者属性,不建议硬编码new对象或者写死属性,希望有个配置类可以统一管理</p>
<p><code>解决</code></p>
<ol>
<li><p>将来将其他对象和属性从硬编码中解耦,将其配置到xml文件中,例如conf.xml</p>
</li>
<li><p>将<code>conf.xml</code>加载到Configuration配置类中(作为容器)</p>
<ul>
<li>该容器包含了其他类的对象和相关属性</li>
</ul>
</li>
<li><p>假如GatherImpl需要依赖其他对象实现ConfigurationAware接口</p>
</li>
<li><p>假如GatherImpl需要路径属性,实现PropertiesAware.java接口</p>
</li>
</ol>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210928142527653.png" alt="image-20210928142527653"></p>
<p><code>conf.xml</code> 该文件配置了类的路径和相关属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">gather</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.client.GatherImpl&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">data-file-path</span>&gt;</span><span class="tag">&lt;/<span class="name">data-file-path</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">gather</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">logger</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.util.LogImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">backup</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.util.BackupImpl&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">file-path</span>&gt;</span><span class="tag">&lt;/<span class="name">file-path</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">backup</span>&gt;</span></span><br><span class="line">	 </span><br><span class="line">	<span class="tag">&lt;<span class="name">client</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.client.ClientImpl&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">host</span>&gt;</span><span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">port</span>&gt;</span><span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">client</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">server</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.server.ServerThreadImpl&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">server-port</span>&gt;</span><span class="tag">&lt;/<span class="name">server-port</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">dbStore</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.server.DBStoreImpl&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">driver</span>&gt;</span><span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">username</span>&gt;</span><span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">password</span>&gt;</span><span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dbStore</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><code>ConfigurationImpl 容器实现</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.client.Client;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.client.Gather;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.server.DBStore;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.server.Server;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.support.ConfigurationAware;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.support.PropertiesAware;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.util.Backup;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationImpl</span> <span class="keyword">implements</span> <span class="title">Configuration</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Configuration CONFIG = <span class="keyword">new</span> ConfigurationImpl();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String XML_CONFIG_PATH = <span class="string">&quot;src/main/resources/conf.xml&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 负责管理模块对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	<span class="comment">// 负责管理模块中的参数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		<span class="comment">// 解析xml配置文件，将值存放到map和p之中</span></span><br><span class="line">		parseXML(XML_CONFIG_PATH);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 初始化模块对象里面的属性值</span></span><br><span class="line">		initModule();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">ConfigurationImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(CONFIG!=<span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;请使用getInstance方法获取对象&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initModule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (Object <span class="keyword">module</span> : map.values()) &#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="keyword">module</span> <span class="keyword">instanceof</span> PropertiesAware) &#123;</span><br><span class="line">					((PropertiesAware)<span class="keyword">module</span>).init(p);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">for</span> (Object <span class="keyword">module</span> : map.values()) &#123;</span><br><span class="line">				<span class="keyword">if</span>(<span class="keyword">module</span> <span class="keyword">instanceof</span> ConfigurationAware) &#123;</span><br><span class="line">					((ConfigurationAware)<span class="keyword">module</span>).setConfiguration(CONFIG);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parseXML</span><span class="params">(String xmlConfigPath)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">			Document document = reader.read(<span class="keyword">new</span> File(xmlConfigPath));</span><br><span class="line">			</span><br><span class="line">			Element rootElement = document.getRootElement();</span><br><span class="line">			</span><br><span class="line">			Iterator&lt;Element&gt; it = rootElement.elementIterator();</span><br><span class="line">			<span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">				Element element = it.next();</span><br><span class="line">				String elementName = element.getName();</span><br><span class="line">				String classAttrValue = element.attribute(<span class="string">&quot;class&quot;</span>).getValue();</span><br><span class="line">				<span class="comment">// 注意需要保证每个模块中都必须有一个无参构造器</span></span><br><span class="line">				Object obj = Class.forName(classAttrValue).newInstance();</span><br><span class="line">				</span><br><span class="line">				map.put(elementName.toUpperCase(), obj);</span><br><span class="line">				</span><br><span class="line">				Iterator&lt;Element&gt; childElementIt = element.elementIterator();</span><br><span class="line">				<span class="keyword">while</span>(childElementIt.hasNext()) &#123;</span><br><span class="line">					Element childElement = childElementIt.next();</span><br><span class="line">					String attrName = childElement.getName();</span><br><span class="line">					String attrValue = childElement.getText();</span><br><span class="line">					p.setProperty(attrName, attrValue);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Configuration <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> CONFIG;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Log <span class="title">getLogger</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (Log)map.get(ModuleName.LOGGER.name());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Server <span class="title">getServer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> (Server)map.get(ModuleName.SERVER.name());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Client <span class="title">getClient</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> (Client)map.get(ModuleName.CLIENT.name());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> DBStore <span class="title">getDbStore</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> (DBStore)map.get(ModuleName.DBSTORE.name());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Gather <span class="title">getGather</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> (Gather)map.get(ModuleName.GATHER.name());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Backup <span class="title">getBackup</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (Backup)map.get(ModuleName.BACKUP.name());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">ModuleName</span></span>&#123;</span><br><span class="line">		GATHER,LOGGER,BACKUP,CLIENT,SERVER,DBSTORE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>使用容器类 GatherImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatherImpl</span> <span class="keyword">implements</span> <span class="title">Gather</span>,<span class="title">PropertiesAware</span>,<span class="title">ConfigurationAware</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Properties p)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.dataFilePath = p.getProperty(<span class="string">&quot;gather-data-file-path&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.fileLengthBak = p.getProperty(<span class="string">&quot;gather-file-length-bak&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfiguration</span><span class="params">(Configuration config)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.backup = config.getBackup();</span><br><span class="line">		<span class="keyword">this</span>.log = config.getLogger();</span><br><span class="line">	&#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="7-优化"><a href="#7-优化" class="headerlink" title="7 优化"></a>7 优化</h1><h2 id="关闭服务模块"><a href="#关闭服务模块" class="headerlink" title="关闭服务模块"></a>关闭服务模块</h2><p><code>ReceiverServerShutdown</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.shutdown;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiverServerShutdown</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String host = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">9091</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Socket socket = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			socket = <span class="keyword">new</span> Socket(host, port);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					socket.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">new</span> ReceiverServerShutdown().shutdown();  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ServerImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.entity.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerImpl</span> <span class="keyword">implements</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 接收服务器端口</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> receivePort = <span class="number">9090</span>;</span><br><span class="line">	<span class="comment">// 关闭服务器接口</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> shutdownPort = <span class="number">9091</span>;</span><br><span class="line">	<span class="comment">// 是否关闭服务器开关 (保证可见性)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">	<span class="keyword">private</span> DBStore dbStrore = <span class="keyword">new</span> DBStoreImpl();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> ServerSocket receiverServerSocket = <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> ServerSocket shutdownServer = <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 启动reiver服务器(接收服务器) 作用:该服务器的端口9090,负责接收客户端发送的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reciver</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		startShutdownServer();</span><br><span class="line">		startReceiverServer();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startReceiverServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;接收服务器开启&quot;</span>);	</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			receiverServerSocket = <span class="keyword">new</span> ServerSocket(receivePort);</span><br><span class="line">			ObjectInputStream object = <span class="keyword">null</span>;</span><br><span class="line">			Socket socket = <span class="keyword">null</span>;</span><br><span class="line">			<span class="comment">// 虚拟机会优化,将堆区的值放到栈中</span></span><br><span class="line">			<span class="comment">// 如果此时flag为false,里面会阻塞</span></span><br><span class="line">			<span class="keyword">while</span> (flag) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					socket = receiverServerSocket.accept();</span><br><span class="line">					object = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">					<span class="comment">// 接收数据</span></span><br><span class="line">					List&lt;Environment&gt; enList = (List&lt;Environment&gt;) object.readObject();</span><br><span class="line">					System.out.println(<span class="string">&quot;服务器收集到了数据&quot;</span> + enList.size() + <span class="string">&quot;条,需要入库&quot;</span>);</span><br><span class="line">					dbStrore.saveDB(enList);</span><br><span class="line">					socket.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">					<span class="keyword">if</span>(socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">						socket.close();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (receiverServerSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					receiverServerSocket.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 启动shutdown服务器(关闭服务器) 作用: 负责接收用户发送的消息,可以关闭所有服务器(reciver和hsutdown)</span></span><br><span class="line"><span class="comment">	 * 此处,如果关闭线程阻塞,接收服务器不会执行,需要多线程</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startShutdownServer</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;关闭服务器开启&quot;</span>);</span><br><span class="line">		<span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				shutdownServer = <span class="keyword">new</span> ServerSocket(shutdownPort);</span><br><span class="line">				shutdownServer.accept();</span><br><span class="line">				<span class="comment">// 关闭服务器 此时this指向匿名内部类,需要加外部类</span></span><br><span class="line">				ServerImpl.<span class="keyword">this</span>.shutdown();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(shutdownServer != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						shutdownServer.close();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">						<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;).start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 将接收服务器的while条件改为false</span></span><br><span class="line">			<span class="comment">// 此处两个线程操作一个变量 </span></span><br><span class="line">		<span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">		<span class="comment">// 手动关闭接收线程服务器</span></span><br><span class="line">		<span class="keyword">if</span>(receiverServerSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">			receiverServerSocket.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="overview"><a href="#overview" class="headerlink" title="overview"></a>overview</h3><p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p>
<p>那么如果有一种办法使得线程可以复用，就是执行完一个任务后，并不被销毁，而是可以继续执行其他的任务的话，那么就可以大大提高其运行的效率。</p>
<p>在Java中可以通过线程池来达到这样的效果。</p>
<h3 id="concurrent-并发"><a href="#concurrent-并发" class="headerlink" title="concurrent(并发)"></a>concurrent(并发)</h3><ul>
<li>ArrayList  synchoroinzed</li>
<li>LinkedList   Collections</li>
<li>concurrent下的类</li>
</ul>
<blockquote>
<p>concurrent，单词本身是“并发”的意思</p>
</blockquote>
<p><code>java.util.concurrent</code> ，是JDK中提供的一个专门处理并发的包，里面有一些相关的接口和类，可以在处理线程并发访问的时候使用。</p>
<p><code>java.util.concurrent.Executor</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An object that executes submitted &#123;<span class="doctag">@link</span> Runnable&#125; tasks. This</span></span><br><span class="line"><span class="comment"> * interface provides a way of decoupling task submission from the</span></span><br><span class="line"><span class="comment"> * mechanics of how each task will be run, including details of thread</span></span><br><span class="line"><span class="comment"> * use, scheduling, etc.  An &#123;<span class="doctag">@code</span> Executor&#125; is normally used</span></span><br><span class="line"><span class="comment"> * instead of explicitly creating threads. For example, rather than</span></span><br><span class="line"><span class="comment"> * invoking &#123;<span class="doctag">@code</span> new Thread(new(RunnableTask())).start()&#125; for each</span></span><br><span class="line"><span class="comment"> * of a set of tasks, you might use:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * Executor executor = &lt;em&gt;anExecutor&lt;/em&gt;;</span></span><br><span class="line"><span class="comment"> * executor.execute(new RunnableTask1());</span></span><br><span class="line"><span class="comment"> * executor.execute(new RunnableTask2());</span></span><br><span class="line"><span class="comment"> * ...</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * However, the &#123;<span class="doctag">@code</span> Executor&#125; interface does not strictly</span></span><br><span class="line"><span class="comment"> * require that execution be asynchronous. In the simplest case, an</span></span><br><span class="line"><span class="comment"> * executor can run the submitted task immediately in the caller&#x27;s</span></span><br><span class="line"><span class="comment"> * thread:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * class DirectExecutor implements Executor &#123;</span></span><br><span class="line"><span class="comment"> *   public void execute(Runnable r) &#123;</span></span><br><span class="line"><span class="comment"> *     r.run();</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * More typically, tasks are executed in some thread other</span></span><br><span class="line"><span class="comment"> * than the caller&#x27;s thread.  The executor below spawns a new thread</span></span><br><span class="line"><span class="comment"> * for each task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * class ThreadPerTaskExecutor implements Executor &#123;</span></span><br><span class="line"><span class="comment"> *   public void execute(Runnable r) &#123;</span></span><br><span class="line"><span class="comment"> *     new Thread(r).start();</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Many &#123;<span class="doctag">@code</span> Executor&#125; implementations impose some sort of</span></span><br><span class="line"><span class="comment"> * limitation on how and when tasks are scheduled.  The executor below</span></span><br><span class="line"><span class="comment"> * serializes the submission of tasks to a second executor,</span></span><br><span class="line"><span class="comment"> * illustrating a composite executor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * class SerialExecutor implements Executor &#123;</span></span><br><span class="line"><span class="comment"> *   final Queue&lt;Runnable&gt; tasks = new ArrayDeque&lt;Runnable&gt;();</span></span><br><span class="line"><span class="comment"> *   final Executor executor;</span></span><br><span class="line"><span class="comment"> *   Runnable active;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   SerialExecutor(Executor executor) &#123;</span></span><br><span class="line"><span class="comment"> *     this.executor = executor;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   public synchronized void execute(final Runnable r) &#123;</span></span><br><span class="line"><span class="comment"> *     tasks.offer(new Runnable() &#123;</span></span><br><span class="line"><span class="comment"> *       public void run() &#123;</span></span><br><span class="line"><span class="comment"> *         try &#123;</span></span><br><span class="line"><span class="comment"> *           r.run();</span></span><br><span class="line"><span class="comment"> *         &#125; finally &#123;</span></span><br><span class="line"><span class="comment"> *           scheduleNext();</span></span><br><span class="line"><span class="comment"> *         &#125;</span></span><br><span class="line"><span class="comment"> *       &#125;</span></span><br><span class="line"><span class="comment"> *     &#125;);</span></span><br><span class="line"><span class="comment"> *     if (active == null) &#123;</span></span><br><span class="line"><span class="comment"> *       scheduleNext();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   protected synchronized void scheduleNext() &#123;</span></span><br><span class="line"><span class="comment"> *     if ((active = tasks.poll()) != null) &#123;</span></span><br><span class="line"><span class="comment"> *       executor.execute(active);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The &#123;<span class="doctag">@code</span> Executor&#125; implementations provided in this package</span></span><br><span class="line"><span class="comment"> * implement &#123;<span class="doctag">@link</span> ExecutorService&#125;, which is a more extensive</span></span><br><span class="line"><span class="comment"> * interface.  The &#123;<span class="doctag">@link</span> ThreadPoolExecutor&#125; class provides an</span></span><br><span class="line"><span class="comment"> * extensible thread pool implementation. The &#123;<span class="doctag">@link</span> Executors&#125; class</span></span><br><span class="line"><span class="comment"> * provides convenient factory methods for these Executors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Memory consistency effects: Actions in a thread prior to</span></span><br><span class="line"><span class="comment"> * submitting a &#123;<span class="doctag">@code</span> Runnable&#125; object to an &#123;<span class="doctag">@code</span> Executor&#125;</span></span><br><span class="line"><span class="comment"> * &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * its execution begins, perhaps in another thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Executes the given command at some time in the future.  The command</span></span><br><span class="line"><span class="comment">     * may execute in a new thread, in a pooled thread, or in the calling</span></span><br><span class="line"><span class="comment">     * thread, at the discretion of the &#123;<span class="doctag">@code</span> Executor&#125; implementation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command the runnable task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RejectedExecutionException if this task cannot be</span></span><br><span class="line"><span class="comment">     * accepted for execution</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if command is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这是一个顶层接口，在它里面只声明了一个<code>execute</code>方法，该方法就是用来执行传进去的任务的</p>
</blockquote>
<p><code>java.util.concurrent.ExecutorService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util.concurrent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An &#123;<span class="doctag">@link</span> Executor&#125; that provides methods to manage termination and</span></span><br><span class="line"><span class="comment"> * methods that can produce a &#123;<span class="doctag">@link</span> Future&#125; for tracking progress of</span></span><br><span class="line"><span class="comment"> * one or more asynchronous tasks.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;An &#123;<span class="doctag">@code</span> ExecutorService&#125; can be shut down, which will cause</span></span><br><span class="line"><span class="comment"> * it to reject new tasks.  Two different methods are provided for</span></span><br><span class="line"><span class="comment"> * shutting down an &#123;<span class="doctag">@code</span> ExecutorService&#125;. The &#123;<span class="doctag">@link</span> #shutdown&#125;</span></span><br><span class="line"><span class="comment"> * method will allow previously submitted tasks to execute before</span></span><br><span class="line"><span class="comment"> * terminating, while the &#123;<span class="doctag">@link</span> #shutdownNow&#125; method prevents waiting</span></span><br><span class="line"><span class="comment"> * tasks from starting and attempts to stop currently executing tasks.</span></span><br><span class="line"><span class="comment"> * Upon termination, an executor has no tasks actively executing, no</span></span><br><span class="line"><span class="comment"> * tasks awaiting execution, and no new tasks can be submitted.  An</span></span><br><span class="line"><span class="comment"> * unused &#123;<span class="doctag">@code</span> ExecutorService&#125; should be shut down to allow</span></span><br><span class="line"><span class="comment"> * reclamation of its resources.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Method &#123;<span class="doctag">@code</span> submit&#125; extends base method &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Executor#execute(Runnable)&#125; by creating and returning a &#123;<span class="doctag">@link</span> Future&#125;</span></span><br><span class="line"><span class="comment"> * that can be used to cancel execution and/or wait for completion.</span></span><br><span class="line"><span class="comment"> * Methods &#123;<span class="doctag">@code</span> invokeAny&#125; and &#123;<span class="doctag">@code</span> invokeAll&#125; perform the most</span></span><br><span class="line"><span class="comment"> * commonly useful forms of bulk execution, executing a collection of</span></span><br><span class="line"><span class="comment"> * tasks and then waiting for at least one, or all, to</span></span><br><span class="line"><span class="comment"> * complete. (Class &#123;<span class="doctag">@link</span> ExecutorCompletionService&#125; can be used to</span></span><br><span class="line"><span class="comment"> * write customized variants of these methods.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The &#123;<span class="doctag">@link</span> Executors&#125; class provides factory methods for the</span></span><br><span class="line"><span class="comment"> * executor services provided in this package.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;h3&gt;Usage Examples&lt;/h3&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Here is a sketch of a network service in which threads in a thread</span></span><br><span class="line"><span class="comment"> * pool service incoming requests. It uses the preconfigured &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment"> * Executors#newFixedThreadPool&#125; factory method:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * class NetworkService implements Runnable &#123;</span></span><br><span class="line"><span class="comment"> *   private final ServerSocket serverSocket;</span></span><br><span class="line"><span class="comment"> *   private final ExecutorService pool;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   public NetworkService(int port, int poolSize)</span></span><br><span class="line"><span class="comment"> *       throws IOException &#123;</span></span><br><span class="line"><span class="comment"> *     serverSocket = new ServerSocket(port);</span></span><br><span class="line"><span class="comment"> *     pool = Executors.newFixedThreadPool(poolSize);</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   public void run() &#123; // run the service</span></span><br><span class="line"><span class="comment"> *     try &#123;</span></span><br><span class="line"><span class="comment"> *       for (;;) &#123;</span></span><br><span class="line"><span class="comment"> *         pool.execute(new Handler(serverSocket.accept()));</span></span><br><span class="line"><span class="comment"> *       &#125;</span></span><br><span class="line"><span class="comment"> *     &#125; catch (IOException ex) &#123;</span></span><br><span class="line"><span class="comment"> *       pool.shutdown();</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * class Handler implements Runnable &#123;</span></span><br><span class="line"><span class="comment"> *   private final Socket socket;</span></span><br><span class="line"><span class="comment"> *   Handler(Socket socket) &#123; this.socket = socket; &#125;</span></span><br><span class="line"><span class="comment"> *   public void run() &#123;</span></span><br><span class="line"><span class="comment"> *     // read and service request on socket</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The following method shuts down an &#123;<span class="doctag">@code</span> ExecutorService&#125; in two phases,</span></span><br><span class="line"><span class="comment"> * first by calling &#123;<span class="doctag">@code</span> shutdown&#125; to reject incoming tasks, and then</span></span><br><span class="line"><span class="comment"> * calling &#123;<span class="doctag">@code</span> shutdownNow&#125;, if necessary, to cancel any lingering tasks:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * void shutdownAndAwaitTermination(ExecutorService pool) &#123;</span></span><br><span class="line"><span class="comment"> *   pool.shutdown(); // Disable new tasks from being submitted</span></span><br><span class="line"><span class="comment"> *   try &#123;</span></span><br><span class="line"><span class="comment"> *     // Wait a while for existing tasks to terminate</span></span><br><span class="line"><span class="comment"> *     if (!pool.awaitTermination(60, TimeUnit.SECONDS)) &#123;</span></span><br><span class="line"><span class="comment"> *       pool.shutdownNow(); // Cancel currently executing tasks</span></span><br><span class="line"><span class="comment"> *       // Wait a while for tasks to respond to being cancelled</span></span><br><span class="line"><span class="comment"> *       if (!pool.awaitTermination(60, TimeUnit.SECONDS))</span></span><br><span class="line"><span class="comment"> *           System.err.println(&quot;Pool did not terminate&quot;);</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> *   &#125; catch (InterruptedException ie) &#123;</span></span><br><span class="line"><span class="comment"> *     // (Re-)Cancel if current thread also interrupted</span></span><br><span class="line"><span class="comment"> *     pool.shutdownNow();</span></span><br><span class="line"><span class="comment"> *     // Preserve interrupt status</span></span><br><span class="line"><span class="comment"> *     Thread.currentThread().interrupt();</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Memory consistency effects: Actions in a thread prior to the</span></span><br><span class="line"><span class="comment"> * submission of a &#123;<span class="doctag">@code</span> Runnable&#125; or &#123;<span class="doctag">@code</span> Callable&#125; task to an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> ExecutorService&#125;</span></span><br><span class="line"><span class="comment"> * &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * any actions taken by that task, which in turn &lt;i&gt;happen-before&lt;/i&gt; the</span></span><br><span class="line"><span class="comment"> * result is retrieved via &#123;<span class="doctag">@code</span> Future.get()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function">List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    Future&lt;?&gt; submit(Runnable task);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class="line">                                  <span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ExecutorService接口继承了Executor接口，并声明了一些方法：submit、invokeAll、invokeAny以及shutDown等</p>
</blockquote>
<p><code>java.util.concurrent.AbstractExecutorService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExecutorService</span> <span class="keyword">implements</span> <span class="title">ExecutorService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>抽象类AbstractExecutorService实现了ExecutorService接口</p>
</blockquote>
<p><code>java.util.concurrent.ThreadPoolExecutor</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ThreadPoolExecutor继承了类AbstractExecutorService，并进行了扩展</p>
</blockquote>
<blockquote>
<p>注意，ThreadPoolExecutor就是JKD中提供的一个线程池类</p>
</blockquote>
<h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p><code>ThreadPoolExecutor</code>类中有一个五参构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数的含义:</p>
<ul>
<li><code>corePoolSize</code>，线程池维护线程的最少数量(核心线程数) </li>
<li><code>maximumPoolSize</code>，线程池维护线程的最大数量 </li>
<li><code>keepAliveTime</code>，线程池维护线程所允许的空闲时间</li>
<li><code>unit</code>，线程池维护线程所允许的空闲时间的单位  </li>
<li><code>workQueue</code>，线程池所使用的缓冲队列 </li>
</ul>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/20180419002550514" alt="img"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/6024478-88ee7b20f8f45825.png" alt="img"></p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutorTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">2000</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">				<span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">5</span>));</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</span><br><span class="line">			MyRun myTask = <span class="keyword">new</span> MyRun();</span><br><span class="line">			<span class="comment">//把要执行的任务交给线程池即可</span></span><br><span class="line">			executor.execute(myTask);</span><br><span class="line">			System.out.println(<span class="string">&quot;线程池中线程数目: &quot;</span>+executor.getPoolSize()+</span><br><span class="line">								<span class="string">&quot;,队列中等待执行的任务数目: &quot;</span>+executor.getQueue().size()+</span><br><span class="line">								<span class="string">&quot;,已执行完的任务数目: &quot;</span>+executor.getCompletedTaskCount());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//关闭线程池</span></span><br><span class="line">		executor.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Thread.sleep(<span class="number">1</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">	</span><br><span class="line">			System.out.println(<span class="string">&quot;任务结束&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Executors</span><br></pre></td></tr></table></figure>

<ul>
<li>CachedThreadPool:可缓存的线程池，该线程池中没有核心线程，非核心线程的数量为Integer.max_value，就是无限大，当有需要时创建线程来执行任务，没有需要时回收线程，适用于耗时少，任务量大的情况。</li>
<li>SecudleThreadPool:周期性执行任务的线程池，按照某种特定的计划执行线程中的任务，有核心线程，但也有非核心线程，非核心线程的大小也为无限大。适用于执行周期性的任务。</li>
<li>SingleThreadPool:只有一条线程来执行任务，适用于有顺序的任务的应用场景。</li>
<li>FixedThreadPool:定长的线程池，有核心线程，核心线程的即为最大的线程数量，没有非核心线程</li>
</ul>
<p><code>java.util.concurrent.Executors</code> ，这个是一个工厂类，可以便捷的帮我们生产出线程池对象，同时该类中也提供了一些实用的工厂方法：</p>
<p>工厂方法1，创建一个定长的线程池，可控制线程最大并发数，超出的线程会在队列中等待</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">        fixedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(index);</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fixedThreadPool.shutdown();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，最后记得用完就关闭线程池</p>
</blockquote>
<p>==思考，如果用完之后，没有关闭线程池，那么会出现什么情况？==</p>
<p>工厂方法2，创建一个可缓存的线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，否则新建线程</p>
<p>例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(index * <span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        cachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> poolSize = ((ThreadPoolExecutor)cachedThreadPool).getPoolSize();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;线程池中当前线程的数量: &quot;</span>+poolSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cachedThreadPool.shutdown();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>工厂方法3，创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序执行</p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService(<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">        singleThreadExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(index);</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    singleThreadExecutor.shutdown();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>工厂方法4，创建一个定长线程池,支持定时及周期性任务执行</p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">    scheduledThreadPool.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;延迟10秒后执行,之后再按照每3秒执行一次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="改造服务端"><a href="#改造服务端" class="headerlink" title="改造服务端"></a>改造服务端</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.smart.env.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.constant.EnvGatherConstants;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.entity.Environment;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.support.ConfigurationAware;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.support.PropertiesAware;</span><br><span class="line"><span class="keyword">import</span> com.briup.smart.env.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerImpl</span> <span class="keyword">implements</span> <span class="title">Server</span>,<span class="title">PropertiesAware</span>,<span class="title">ConfigurationAware</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> reciverServerPort;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> shutdownServerPort;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> ServerSocket reciverServer;</span><br><span class="line">	<span class="keyword">private</span> ServerSocket shutdownServer;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Socket socket;</span><br><span class="line">	<span class="keyword">private</span> ObjectInputStream in;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> DBStore dbStore;</span><br><span class="line">	<span class="keyword">private</span> Log logger;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reciver</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		logger.info(<span class="string">&quot;shutdown服务器已经启动：&quot;</span>+shutdownServerPort);</span><br><span class="line">		startShutdownServer();</span><br><span class="line">		</span><br><span class="line">		logger.info(<span class="string">&quot;reciver服务器已经启动：&quot;</span>+reciverServerPort);</span><br><span class="line">		startReciverServer();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 启动reciver服务器（接收服务器）</span></span><br><span class="line"><span class="comment">	 * 作用：该服务器的端口9999，负责接收客户端发送的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startReciverServer</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			</span><br><span class="line">			reciverServer = <span class="keyword">new</span> ServerSocket(reciverServerPort);</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span>(flag) &#123;</span><br><span class="line">				logger.debug(<span class="string">&quot;reciverServer服务器正在等待客户端连接&quot;</span>);</span><br><span class="line">				socket = reciverServer.accept();</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">				logger.debug(<span class="string">&quot;reciverServer服务器接收到客户端连接&quot;</span>);</span><br><span class="line">				logger.debug(<span class="string">&quot;reciverServer服务器使用线程池处理这个客户端&quot;</span>);</span><br><span class="line">				threadPool.execute(()-&gt;&#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						</span><br><span class="line">						in = <span class="keyword">new</span> ObjectInputStream(socket.getInputStream());</span><br><span class="line">						</span><br><span class="line">						<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">						List&lt;Environment&gt; list = (List&lt;Environment&gt;)in.readObject();</span><br><span class="line">						</span><br><span class="line">						dbStore.saveDB(list);</span><br><span class="line">						</span><br><span class="line">						socket.close();</span><br><span class="line">						</span><br><span class="line">					&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">						<span class="keyword">if</span>(socket!=<span class="keyword">null</span>) &#123;</span><br><span class="line">							<span class="keyword">try</span> &#123;</span><br><span class="line">								socket.close();</span><br><span class="line">							&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">								e.printStackTrace();</span><br><span class="line">							&#125;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					</span><br><span class="line">				&#125;);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(socket!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				socket.close();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(reciverServer!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				reciverServer.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 启动shutdown服务器（关闭服务器）</span></span><br><span class="line"><span class="comment">	 * 作用：该服务器的端口8888，负责接收用户发送的消息，可以关闭所有服务器（reciver和shutdown）</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startShutdownServer</span><span class="params">()</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line"><span class="comment">//		Runnable run = ()-&gt;&#123;&#125;;</span></span><br><span class="line">		Runnable run = ()-&gt;&#123;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				shutdownServer = <span class="keyword">new</span> ServerSocket(shutdownServerPort);</span><br><span class="line">				</span><br><span class="line">				shutdownServer.accept();</span><br><span class="line">				</span><br><span class="line">				ServerImpl.<span class="keyword">this</span>.shutdown();</span><br><span class="line">				</span><br><span class="line">			&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(shutdownServer!=<span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						shutdownServer.close();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(run).start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">		reciverServer.close();</span><br><span class="line">		threadPool.shutdown();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Properties properties)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		reciverServerPort = Integer.parseInt(properties.getProperty(EnvGatherConstants.MODULE_SERVER_RECIVER_SERVER_PORT));</span><br><span class="line">		shutdownServerPort = Integer.parseInt(properties.getProperty(EnvGatherConstants.MODULE_SERVER_SHUTDOWN_SERVER_PORT));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfiguration</span><span class="params">(Configuration configuration)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		dbStore = configuration.getDbStore();</span><br><span class="line">		logger = configuration.getLogger();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="8-打包"><a href="#8-打包" class="headerlink" title="8 打包"></a>8 打包</h1><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">finalName</span>&gt;</span>env-gather-client<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">&lt;!-- 可执行jar插件 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">					<span class="comment">&lt;!-- 设置打包时候生成dependency-reduced-pom.xml文件为false --&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">createDependencyReducedPom</span>&gt;</span>false<span class="tag">&lt;/<span class="name">createDependencyReducedPom</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">						<span class="comment">&lt;!-- 绑定shade插件到Maven的生命周期 (package) --&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">						<span class="comment">&lt;!--在生命周期后执行绑定的shade插件的goals --&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">									<span class="attr">implementation</span>=<span class="string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span></span><br><span class="line">									<span class="comment">&lt;!--指定程序入口类 --&gt;</span></span><br><span class="line">									<span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.briup.smart.env.main.ClientMain<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">								<span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">							<span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改src相关路径"><a href="#修改src相关路径" class="headerlink" title="修改src相关路径"></a>修改src相关路径</h2><p><code>conf-deploy.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">gather</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.client.GatherImpl&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">gather-data-file-path</span>&gt;</span>data-file-simple<span class="tag">&lt;/<span class="name">gather-data-file-path</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">gather-file-length-bak</span>&gt;</span>gather-file-length<span class="tag">&lt;/<span class="name">gather-file-length-bak</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">gather</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">logger</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.util.LogImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">backup</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.util.BackupImpl&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">backup-base-path</span>&gt;</span>D:/env/bak<span class="tag">&lt;/<span class="name">backup-base-path</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">backup</span>&gt;</span></span><br><span class="line">	 </span><br><span class="line">	<span class="tag">&lt;<span class="name">client</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.client.ClientImpl&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">client-server-ip</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">client-server-ip</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">client-port</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">client-port</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">client</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">server</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.server.ServerImpl&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">server-port</span>&gt;</span>8888<span class="tag">&lt;/<span class="name">server-port</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">server-stop-port</span>&gt;</span>9999<span class="tag">&lt;/<span class="name">server-stop-port</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">dbStore</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.smart.env.server.DBStoreImpl&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dbStore-batch-size</span>&gt;</span>100<span class="tag">&lt;/<span class="name">dbStore-batch-size</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dbStore</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用类加载器加载资源"><a href="#使用类加载器加载资源" class="headerlink" title="使用类加载器加载资源"></a>使用类加载器加载资源</h2><p><code>ConfigurationImpl</code></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210929202202813.png" alt="image-20210929202202813"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210929202226219.png" alt="image-20210929202226219"></p>
<p><code>BackupImpl</code></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210929202321655.png" alt="image-20210929202321655"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210929202330401.png" alt="image-20210929202330401"></p>
<p><code>GatherImpl</code></p>
<p><img src="https://gitee.com/vanse/images/raw/master/environment/image-20210929202301756.png" alt="image-20210929202301756"></p>
<p>==此处要注意打包后,new File(path)是文件不存在的,此时fileLength=0==</p>
]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>briup</tag>
        <tag>corejava</tag>
        <tag>vanse_public</tag>
      </tags>
  </entry>
  <entry>
    <title>cms</title>
    <url>/archives/project/briup-cms.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前言</p>
<ul>
<li>教程: cms</li>
<li>时间: 2121/11/10</li>
<li>整理人: vanse(刘聪)</li>
<li>班级：菁英班</li>
</ul>
<h1 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><pre><code>在日常生活中，内容管理系统占到所有系统的80%以上，比如个人博客，腾讯新闻，今日头条，搜狐新 闻等。 这些都是我们日常生活中经常使用到的系统，它的核心就是可以概括为内容（资讯），一篇文章就是一个资讯，大家越来越喜欢将生活中的所见所闻简述出来。
</code></pre>
<p>如图：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210317215643452.png" alt="image-20210317215643452"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210317215652686.png" alt="image-20210317215652686"></p>
<blockquote>
<p>可以看出，目前来讲对于资讯系统的需求量是非常大的</p>
</blockquote>
<pre><code>通用的看点资讯管理系统，采用前后台分离开发的技术，将系统分为前台页面展示以及后台资讯管理系统。对于后台系统是基本上是通用的，而前台可根据不同客户的需求去修改定制。
</code></pre>
<p>  (不涉及页面  使用某些前端模板)</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>看点资讯系统最核心的数据是内容，例如文章、新闻等，所以后台主要功能是实现这些内容的管理，例如栏目管理、评论管理、用户管理以及角色管理等，对于前台可以灵活得展示后台的数据。<br>例如，</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210317215829625.png" alt="image-20210317215829625"></p>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>后台采用的技术：</p>
<ul>
<li>springboot(脚手架)</li>
<li>spring(容器)</li>
<li>springmvc(servlet封装 传输数据)</li>
<li>springdata-jpa(jdbc 处理数据)</li>
</ul>
<p>数据库：</p>
<ul>
<li>mysql    </li>
</ul>
<p>文档管理：</p>
<ul>
<li>swagger</li>
</ul>
<p>架构选取：</p>
<ul>
<li>三层架构<ul>
<li>controller</li>
<li>service</li>
<li>dao</li>
</ul>
</li>
</ul>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h3><blockquote>
<p>对应的实体类为User</p>
</blockquote>
<p>1、新增用户</p>
<ul>
<li>参数1：User</li>
</ul>
<p>2、编辑用户</p>
<ul>
<li>参数1：User</li>
</ul>
<p>3、查询用户（分页）</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<p>4、删除用户（批量，注销用户）</p>
<ul>
<li>参数1：List<Long> ids</li>
</ul>
<p>5、禁用或解封用户信息（更新用户状态）</p>
<ul>
<li>参数1：Long id</li>
<li>参数2：String status</li>
</ul>
<p>6、根据用户名获取用户信息</p>
<ul>
<li>参数1：String username</li>
</ul>
<p>7、登录</p>
<ul>
<li>参数1：String username</li>
<li>参数2：String password</li>
</ul>
<h3 id="角色模块"><a href="#角色模块" class="headerlink" title="角色模块"></a>角色模块</h3><blockquote>
<p>对应的实体类为Role</p>
</blockquote>
<p>1、新增角色</p>
<ul>
<li>参数1：Role r</li>
</ul>
<p>2、编辑角色</p>
<ul>
<li>参数1：Role r</li>
</ul>
<p>3、查询角色（分页）</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<p>4、批量删除角色</p>
<ul>
<li>参数1：List<Long> ids</li>
</ul>
<h3 id="资讯模块"><a href="#资讯模块" class="headerlink" title="资讯模块"></a>资讯模块</h3><blockquote>
<p>资讯在这里主要指的的是文章，对应的实体类为Article</p>
</blockquote>
<p>1、新增资讯</p>
<ul>
<li>参数1：Article article</li>
</ul>
<p>2、编辑资讯</p>
<ul>
<li>参数1：Article article</li>
</ul>
<p>3、查询资讯（分页）</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<p>4、批量删除资讯</p>
<ul>
<li>参数1：List<Long> ids</li>
</ul>
<p>5、审核资讯</p>
<ul>
<li>参数1：Long id</li>
<li>参数2：String status</li>
</ul>
<p>6、根据类别ID查询，分页获取资讯信息，并且按照阅读量降序排</p>
<ul>
<li>参数1：Long categoryId</li>
<li>参数2：Integer pageNum</li>
<li>参数3：Integer pageSize</li>
</ul>
<p>7、根据用户分页获取资讯信息</p>
<ul>
<li>参数1：Long userId</li>
<li>参数2：Integer pageNum</li>
<li>参数3：Integer pageSize</li>
</ul>
<h3 id="类别模块"><a href="#类别模块" class="headerlink" title="类别模块"></a>类别模块</h3><blockquote>
<p>类别也就是栏目： Category</p>
</blockquote>
<p>1、新增类别</p>
<ul>
<li>参数1：Category category</li>
</ul>
<p>2、编辑类别</p>
<ul>
<li>参数1：Category category</li>
</ul>
<p>3、查询类别（分页）</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<p>4、批量删除类别</p>
<ul>
<li>参数1：List<Long> ids</li>
</ul>
<p>5、更新类别序号</p>
<ul>
<li>参数1：Long id</li>
<li>参数2：Long no</li>
</ul>
<p>6、按照序号升序分页获取类别信息</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<h3 id="评论模块"><a href="#评论模块" class="headerlink" title="评论模块"></a>评论模块</h3><blockquote>
<p>对应的实体类为Comment</p>
</blockquote>
<p>1、新增评论</p>
<ul>
<li>参数1：Comment comment</li>
</ul>
<p>2、编辑评论</p>
<ul>
<li>参数1：Comment comment</li>
</ul>
<p>3、批量删除评论</p>
<ul>
<li>参数1：List<Long> ids</li>
</ul>
<p>4、查询评论（分页）</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<p>5、分页获取指定文章下所有的评论</p>
<ul>
<li>参数1：Long articleId</li>
<li>参数2：Integer num</li>
<li>参数3：Integer size</li>
</ul>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>1、用户表，cms_user</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210317221131577.png" alt="image-20210317221131577"></p>
<p>2、角色表，cms_role</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210317221149140.png" alt="image-20210317221149140"></p>
<p>3、文章类别表，cms_category</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210317221204520.png" alt="image-20210317221204520"></p>
<p>4、文章表，cms_article</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210317221220121.png" alt="image-20210317221220121"></p>
<p>5、评论表，cms_comment</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210317221235341.png" alt="image-20210317221235341"></p>
<blockquote>
<p>注意，因为项目中使用了JPA，可以在实体类中配置完关系映射后，让JPA根据配置自动创建表</p>
</blockquote>
<h2 id="原型图"><a href="#原型图" class="headerlink" title="原型图"></a>原型图</h2><p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210317230950797.png" alt="image-20210317230950797"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210317231012612.png" alt="image-20210317231012612"></p>
<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><blockquote>
<p>创建cms项目</p>
</blockquote>
<h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.briup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-co.nnector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9999</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/cms?characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#cj  8.0</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 如果需要,可以进行自动建表</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 如果需要,可以执行指定的sql文件进行建表 </span></span><br><span class="line"><span class="comment">#spring.datasource.schema=sql/test.sql</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 如果需要,可以显示执行的sql语句</span></span><br><span class="line"><span class="meta">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 如果需要,可以格式化sql语句</span></span><br><span class="line"><span class="meta">spring.jpa.properties.hibernate.format_sql</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;cms_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="meta">@Column(nullable = false)</span></span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	<span class="meta">@Column(nullable = false)</span></span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	<span class="keyword">private</span> String phone;</span><br><span class="line">	<span class="meta">@Column(name = &quot;real_name&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String realName;</span><br><span class="line">	<span class="keyword">private</span> String gender;</span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br><span class="line">	<span class="meta">@Column(name = &quot;register_time&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date registerTime;</span><br><span class="line">	<span class="meta">@Column(nullable = false,columnDefinition = &quot;varchar(5) COMMENT &#x27;状态 正常0 禁用1&#x27;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String status;</span><br><span class="line">	<span class="keyword">private</span> String image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmsApplication</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(CmsApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJPA</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		User user = <span class="keyword">new</span> User();</span><br><span class="line">		user.setUsername(<span class="string">&quot;vanse&quot;</span>);</span><br><span class="line">		user.setPassword(<span class="string">&quot;000&quot;</span>);</span><br><span class="line">		user.setStatus(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">		userDao.save(user);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;User&gt; userList = userDao.findAll();</span><br><span class="line">		System.out.println(userList);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">------------------------</span><br><span class="line"> <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;User&gt; userList = userDao.findAll();</span><br><span class="line">		<span class="keyword">return</span> userList;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userService.findAll();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p><a href="http://localhost:9999/user/findAll">访问路径</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;vanse&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;phone&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;realName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;gender&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;birthday&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;registerTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;image&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 热部署 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- optional=true, 依赖不会传递, 该项目依赖devtools; 之后依赖boot项目的项目如果想要使用devtools, </span></span><br><span class="line"><span class="comment">				需要重新引入 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 热部署</span></span><br><span class="line"><span class="meta">spring.devtools.restart.enabled</span>=<span class="string">true   </span></span><br><span class="line"><span class="meta">spring.devtools.restart.additional-paths</span>=<span class="string">src/main/java </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#返回json的全局时间格式 如果设置全局 生日也得是这个格式</span></span><br><span class="line"><span class="comment">#spring.jackson.date-format=yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">#spring.jackson.time-zone=GMT+8</span></span><br></pre></td></tr></table></figure>







<p><code>问题</code></p>
<p>前后端分离的情况下，数据对接。</p>
<hr>
<h1 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>项目采用前后台分离的架构进行开发，后台可以使用Swagger，生成在线API文档，方便前端人员对接使用</p>
</blockquote>
<p><code>Swagger </code>是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>
<p><a href="https://swagger.io/">Swagger官网</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211110235217141.png" alt="image-20211110235217141"></p>
<p><a href="https://petstore.swagger.io/?_ga=2.236238660.419502645.1636559508-49422942.1636559508">配置生成的在线API文档样例：</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211110235430680.png" alt="image-20211110235430680"></p>
<p><code>springfox </code>，是一个开源的API Doc的框架， 它的前身是swagger-springmvc，可以将我们的Controller中<br>的方法以文档的形式展现。</p>
<p><a href="http://springfox.github.io/springfox/">springfox官网</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211110235736768.png" alt="image-20211110235736768"></p>
<p><code>springfox-swagger2 </code>，它是整合springmvc和swagger2的一个项目，项目中使用swagger时，要引入它<br>的<a href="https://mvnrepository.com/artifact/io.springfox/springfox-swagger2">依赖</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211110235947547.png" alt="image-20211110235947547"></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>swagger-demo</p>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><h3 id="pom-1"><a href="#pom-1" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger-ui依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">	<span class="comment">// ApiSelectorBuilder select() api选择器</span></span><br><span class="line">	<span class="comment">// 指定处理器 任何路径</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Docket <span class="title">createDocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">				.apiInfo(apiInfo())</span><br><span class="line">				.select()</span><br><span class="line">				.apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.briup.cms.controller&quot;</span>))</span><br><span class="line">				.paths(PathSelectors.any())</span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// swagger页面中显示的基本信息</span></span><br><span class="line">	<span class="comment">//@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">				.title(<span class="string">&quot;cms&quot;</span>)</span><br><span class="line">				.description(<span class="string">&quot;新闻发布系统&quot;</span>)</span><br><span class="line">				.version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">				.contact(<span class="keyword">new</span> Contact(<span class="string">&quot;vanse&quot;</span>, <span class="string">&quot;http://wangsidandan.github.io&quot;</span>, <span class="string">&quot;wangsidandan@gmail.com&quot;</span>))</span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，swagger中基本都是固定的配置，按照自己的项目情况，进行修改字符串变量即可</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211111101837824.png" alt="image-20211111101837824"></p>
<p><code>问题</code></p>
<p>前端同事可看接口，但是不明其意。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong>UserController.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">// 模块注释</span></span><br><span class="line"><span class="meta">@Api(tags  = &quot;用户模块&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserService userService;</span><br><span class="line">	</span><br><span class="line">       <span class="comment">// 方法注释</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;查询所有用户&quot;,notes = &quot;不需要参数&quot;)</span></span><br><span class="line">	<span class="meta">@GetMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> userService.findAll();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;根据id查找用户&quot;,notes = &quot;需要参数id&quot;)</span></span><br><span class="line">        <span class="comment">// rest风格</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;id&quot;,value = &quot;用户id&quot;,required = true)</span> </span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@PathVariable(&quot;id&quot;)</span> </span></span></span><br><span class="line"><span class="params"><span class="function">			Integer id)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> userService.findById(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserService</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function">User <span class="title">findById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>UserServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> UserDao userDao;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;User&gt; userList = userDao.findAll();</span><br><span class="line">		<span class="keyword">return</span> userList;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * getOne: 懒加载</span></span><br><span class="line"><span class="comment">	 * 		如果是懒加载，此时返回json数据会报错</span></span><br><span class="line"><span class="comment">	 * 		需要在实体类上做处理 @JsonIgnoreProperties(&#123;&quot;hibernateLazyInitializer&quot;,&quot;handler&quot;&#125;)</span></span><br><span class="line"><span class="comment">	 * findById：及时 加载</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 懒加载</span></span><br><span class="line">		<span class="comment">//User user = userDao.getOne(id);</span></span><br><span class="line">		<span class="comment">// 及时加载   </span></span><br><span class="line">		User user = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			user = userDao.findById(id).get(); <span class="comment">// 如果id不存在 会报错</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_NONE);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211111124209738.png" alt="image-20211111124209738"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>前后端需要统一返回格式</li>
<li>抛出异常数据需要处理</li>
</ul>
<h1 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h1><p>导入工具类  <strong>Result和ResultCode</strong></p>
<p>Result</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一Controller中RESTFul风格接口返回的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer code;</span><br><span class="line">	<span class="keyword">private</span> String msg;</span><br><span class="line">	<span class="keyword">private</span> Object data;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code;</span><br><span class="line">		<span class="keyword">this</span>.msg = msg;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setResultCode</span><span class="params">(ResultCode code)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code.code();</span><br><span class="line">		<span class="keyword">this</span>.msg = code.message();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 操作失败，自定义code和msg</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">failure</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">		Result result = <span class="keyword">new</span> Result(code,msg);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 操作成功，没有返回的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Result result = <span class="keyword">new</span> Result();</span><br><span class="line">		result.setResultCode(ResultCode.SUCCESS);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 操作成功，有返回的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">		Result result = <span class="keyword">new</span> Result();</span><br><span class="line">		result.setResultCode(ResultCode.SUCCESS);</span><br><span class="line">		result.setData(data);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 操作失败，没有返回的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">failure</span><span class="params">(ResultCode resultCode)</span> </span>&#123;</span><br><span class="line">		Result result = <span class="keyword">new</span> Result();</span><br><span class="line">		result.setResultCode(resultCode);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 操作失败，有返回的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">failure</span><span class="params">(ResultCode resultCode, Object data)</span> </span>&#123;</span><br><span class="line">		Result result = <span class="keyword">new</span> Result();</span><br><span class="line">		result.setResultCode(resultCode);</span><br><span class="line">		result.setData(data);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> code;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> msg;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.msg = msg;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> data;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.data = data;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ResultCode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一并自定义返回状态码，如有需求可以另外增加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResultCode</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 成功状态码 */</span></span><br><span class="line">	SUCCESS(<span class="number">1</span>, <span class="string">&quot;操作成功&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 参数错误：10001-19999 */</span></span><br><span class="line">	PARAM_IS_INVALID(<span class="number">10001</span>, <span class="string">&quot;参数无效&quot;</span>),</span><br><span class="line">	PARAM_IS_BLANK(<span class="number">10002</span>, <span class="string">&quot;参数为空&quot;</span>),</span><br><span class="line">	PARAM_TYPE_BIND_ERROR(<span class="number">10003</span>, <span class="string">&quot;参数类型错误&quot;</span>),</span><br><span class="line">	PARAM_NOT_COMPLETE(<span class="number">10004</span>, <span class="string">&quot;参数缺失&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 用户错误：20001-29999*/</span></span><br><span class="line">	USER_NOT_LOGIN(<span class="number">20001</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">	USER_LOGIN_ERROR(<span class="number">20002</span>, <span class="string">&quot;账号不存在或密码错误&quot;</span>),</span><br><span class="line">	USER_ACCOUNT_FORBIDDEN(<span class="number">20003</span>, <span class="string">&quot;账号已被禁用&quot;</span>),</span><br><span class="line">	USER_NOT_EXIST(<span class="number">20004</span>, <span class="string">&quot;用户不存在&quot;</span>),</span><br><span class="line">	USER_HAS_EXISTED(<span class="number">20005</span>, <span class="string">&quot;用户已存在&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 业务错误：30001-39999 */</span></span><br><span class="line">	SPECIFIED_QUESTIONED_USER_NOT_EXIST(<span class="number">30001</span>, <span class="string">&quot;业务逻辑出现问题&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 系统错误：40001-49999 */</span></span><br><span class="line">	SYSTEM_INNER_ERROR(<span class="number">40001</span>, <span class="string">&quot;系统内部错误，请稍后重试&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 数据错误：50001-599999 */</span></span><br><span class="line">	DATA_NONE(<span class="number">50001</span>, <span class="string">&quot;数据未找到&quot;</span>),</span><br><span class="line">	DATA_WRONG(<span class="number">50002</span>, <span class="string">&quot;数据错误&quot;</span>),</span><br><span class="line">	DATA_EXISTED(<span class="number">50003</span>, <span class="string">&quot;数据已存在&quot;</span>),</span><br><span class="line">	DATA_USEING(<span class="number">50004</span>,<span class="string">&quot;该数据正在被引用&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 接口错误：60001-69999 */</span></span><br><span class="line">	INTERFACE_INNER_INVOKE_ERROR(<span class="number">60001</span>, <span class="string">&quot;内部系统接口调用异常&quot;</span>),</span><br><span class="line">	INTERFACE_OUTTER_INVOKE_ERROR(<span class="number">60002</span>, <span class="string">&quot;外部系统接口调用异常&quot;</span>),</span><br><span class="line">	INTERFACE_FORBID_VISIT(<span class="number">60003</span>, <span class="string">&quot;该接口禁止访问&quot;</span>),</span><br><span class="line">	INTERFACE_ADDRESS_INVALID(<span class="number">60004</span>, <span class="string">&quot;接口地址无效&quot;</span>),</span><br><span class="line">	INTERFACE_REQUEST_TIMEOUT(<span class="number">60005</span>, <span class="string">&quot;接口请求超时&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 权限错误：70001-79999 */</span></span><br><span class="line">	PERMISSION_NO_ACCESS(<span class="number">70001</span>, <span class="string">&quot;无访问权限&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">	ResultCode(Integer code, String message) &#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code;</span><br><span class="line">		<span class="keyword">this</span>.message = message;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.code;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;vanse&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;phone&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;realName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;gender&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;birthday&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;registerTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;image&quot;</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>问题</code></p>
<p>如果异常，统一响应格式失效</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-11-11T06:00:16.631+0000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;/ by zero&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/user/1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="全局异常"><a href="#全局异常" class="headerlink" title="全局异常"></a>全局异常</h1><h2 id="默认异常"><a href="#默认异常" class="headerlink" title="默认异常"></a>默认异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobleExceptionHandler</span> </span>&#123;</span><br><span class="line">	<span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">handler</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Result.failure(<span class="number">500</span>, <span class="string">&quot;服务器异常: &quot;</span> + e.getMessage());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// throw new CustomerException(&quot;&quot;);</span></span><br><span class="line"><span class="comment">// throw new CustomerException(ResultCode.failure)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="keyword">private</span> ResultCode resultCode;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CustomerException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(message);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CustomerException</span><span class="params">(ResultCode resultCode)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//this(resultCode.message());</span></span><br><span class="line">		<span class="keyword">this</span>.resultCode = resultCode;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResultCode <span class="title">getResultCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> resultCode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResultCode</span><span class="params">(ResultCode resultCode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.resultCode = resultCode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//new CustomerException(&quot;&quot;);</span></span><br><span class="line">		<span class="keyword">new</span> CustomerException(ResultCode.DATA_EXISTED);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改造 GlobleExceptionHandler</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobleExceptionHandler</span> </span>&#123;</span><br><span class="line">	<span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">handler</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(e <span class="keyword">instanceof</span> CustomerException) &#123;</span><br><span class="line">			<span class="comment">// new CustomerException(ResultCode.DATA_EXISTED) 对方抛出ResultCode</span></span><br><span class="line">			<span class="comment">// 全局捕获到ResultCode</span></span><br><span class="line">			<span class="keyword">return</span> Result.failure( ((CustomerException)e).getResultCode() );</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> Result.failure(<span class="number">500</span>, <span class="string">&quot;服务器异常: &quot;</span> + e.getMessage());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;根据id查找用户&quot;,notes = &quot;需要参数id&quot;)</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;&#123;id&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findById</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;id&quot;,value = &quot;用户id&quot;,required = true)</span> </span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@PathVariable(&quot;id&quot;)</span> </span></span></span><br><span class="line"><span class="params"><span class="function">			Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_NONE);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> Result.success(userService.findById(id));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">50001</span>,</span><br><span class="line">  <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;数据未找到&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="用户模块-1"><a href="#用户模块-1" class="headerlink" title="用户模块"></a>用户模块</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">		<span class="comment">//分页获取所有用户信息</span></span><br><span class="line">		<span class="function">Page&lt;User&gt; <span class="title">getAll</span><span class="params">(Integer pageNum,Integer pageSize)</span></span>;</span><br><span class="line">		<span class="comment">//新增用户信息或者更新学生信息</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">saveOrUpdateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">		<span class="comment">//批量删除用户信息</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">deleteUserInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//修改用户的状态</span></span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">updateUserStatus</span><span class="params">(Integer id,String status)</span></span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//登录</span></span><br><span class="line">		<span class="function">User <span class="title">login</span><span class="params">(String username,String password)</span></span>;</span><br><span class="line">		<span class="comment">//根据用户名获取用户信息</span></span><br><span class="line">		<span class="function">User <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="新增-更新"><a href="#新增-更新" class="headerlink" title="新增/更新"></a>新增/更新</h2><h3 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// user部分数据后台处理</span></span><br><span class="line">		user.setRegisterTime(<span class="keyword">new</span> Date());</span><br><span class="line">		user.setStatus(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">		userDao.save(user);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;插入或更新&quot;,notes = &quot;有id:更新 无id:插入&quot;)</span></span><br><span class="line">	<span class="meta">@PostMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">saveOrUpdateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">		userService.saveOrUpdateUser(user);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>User需要更改</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生日只有年月日 转换日期格式，只要日期即可</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;,timezone=&quot;GMT+8&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br></pre></td></tr></table></figure>



<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 添加</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;2000-11-04&quot;</span>,  # 后台时间模式为 yyyy-MM-dd  注意补全</span><br><span class="line">  <span class="attr">&quot;gender&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;phone&quot;</span>: <span class="string">&quot;110&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;realName&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;追风少年&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>问题</code></p>
<p>前端同事不知道字段含义 不知道哪些必须传</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;cms_user&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;用户模型&quot;)</span></span><br><span class="line"><span class="comment">// 解决懒加载返回null报错的问题</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(&#123;&quot;hibernateLazyInitializer&quot;,&quot;handler&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;id&quot;,value = &quot;用户id,不加为新增,添加为修改&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;username&quot;,value = &quot;用户名&quot;,required = true,example = &quot;vanse&quot;)</span></span><br><span class="line">	<span class="meta">@Column(nullable = false)</span></span><br><span class="line">	<span class="keyword">private</span> String username;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;password&quot;,value = &quot;密码&quot;,required = true,example = &quot;000&quot;)</span></span><br><span class="line">	<span class="meta">@Column(nullable = false)</span></span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;phone&quot;,value = &quot;手机号&quot;,required = true,example = &quot;175********&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String phone;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;realName&quot;,value = &quot;真实姓名&quot;,required = true,example = &quot;老刘&quot;)</span></span><br><span class="line">	<span class="meta">@Column(name = &quot;real_name&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String realName;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;gender&quot;,value = &quot;性别&quot;,required = true,example = &quot;0&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String gender;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 生日只有年月日</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;birthday&quot;,value = &quot;生日&quot;,required = true,example = &quot;1900-01-12&quot;)</span></span><br><span class="line">	<span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;,timezone=&quot;GMT+8&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date birthday;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(hidden = true)</span></span><br><span class="line">	<span class="meta">@Column(name = &quot;register_time&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date registerTime;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Column(nullable = false,columnDefinition = &quot;varchar(5) COMMENT &#x27;状态 正常0 禁用1&#x27;&quot;)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;状态&quot;,value = &quot;默认为0,添加不需要&quot;,example = &quot;1&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String status;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;image&quot;,value = &quot;图片路径&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/vanse/images/raw/master/cms/image-20211111153006270.png" alt="image-20211111153006270" style="zoom:50%;" />

<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(user.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="comment">// user部分数据后台处理</span></span><br><span class="line">			user.setRegisterTime(<span class="keyword">new</span> Date());</span><br><span class="line">			user.setStatus(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">			userDao.save(user);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 选择性更新 可能丢失注册时间</span></span><br><span class="line">			User target = findById(user.getId());</span><br><span class="line">			NotNullNameUtil.getNotNullNames(user, target);</span><br><span class="line">			userDao.save(target);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">---------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotNullNameUtil</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获取对象的值为空的 属性数组</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getNotNullNames</span><span class="params">(Object source,Object target)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> BeanWrapper src = <span class="keyword">new</span> BeanWrapperImpl(source);</span><br><span class="line">		java.beans.PropertyDescriptor[] pds = src.getPropertyDescriptors();</span><br><span class="line"></span><br><span class="line">		Set&lt;String&gt; emptyNames = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">		<span class="keyword">for</span> (java.beans.PropertyDescriptor pd : pds) &#123;</span><br><span class="line">			Object srcValue = src.getPropertyValue(pd.getName());</span><br><span class="line">			<span class="keyword">if</span> (srcValue == <span class="keyword">null</span>)</span><br><span class="line">				emptyNames.add(pd.getName());</span><br><span class="line">		&#125;</span><br><span class="line">        	<span class="comment">// 返回空属性数组</span></span><br><span class="line">		String[] names = emptyNames.toArray(<span class="keyword">new</span> String[emptyNames.size()]);</span><br><span class="line">        	<span class="comment">// 复制对象时忽视属性</span></span><br><span class="line">		BeanUtils.copyProperties(source, target,names);</span><br><span class="line">		<span class="keyword">return</span> target;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">//  &quot;birthday&quot;: &quot;1900-01-12&quot;,</span></span><br><span class="line">  <span class="string">&quot;gender&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">3</span>,</span><br><span class="line">   <span class="comment">// &quot;image&quot;: &quot;string&quot;,</span></span><br><span class="line">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">  <span class="string">&quot;phone&quot;</span>: <span class="string">&quot;175********&quot;</span>,</span><br><span class="line">  <span class="string">&quot;realName&quot;</span>: <span class="string">&quot;老刘&quot;</span>,</span><br><span class="line">  <span class="string">&quot;status&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;username&quot;</span>: <span class="string">&quot;wangsidandan&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="修改新增"><a href="#修改新增" class="headerlink" title="修改新增"></a>修改新增</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(user.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">			String username = user.getUsername();</span><br><span class="line">			<span class="comment">// 参数不能为空</span></span><br><span class="line">			<span class="keyword">if</span> (username == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(username.trim())) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.PARAM_IS_BLANK);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 姓名不能重复</span></span><br><span class="line">			User userFromDB = findUserByUsername(username);</span><br><span class="line">			<span class="keyword">if</span> (userFromDB != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_EXISTED);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// user部分数据后台处理</span></span><br><span class="line">			user.setRegisterTime(<span class="keyword">new</span> Date());</span><br><span class="line">			user.setStatus(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">			userDao.save(user);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// 选择性更新 可能丢失注册时间</span></span><br><span class="line">			User target = findById(user.getId());</span><br><span class="line">			BeanUtils.copyProperties(user, target,ObjectNullNames.getNullPropertyNames(user));</span><br><span class="line">			userDao.save(target);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">-------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">	<span class="function">User <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><code>总结</code></h3><ul>
<li><p>新增</p>
<ul>
<li>校验 自定义异常</li>
<li>部分数据后台处理</li>
</ul>
</li>
<li><p>更新</p>
<ul>
<li>选择性更新</li>
</ul>
</li>
</ul>
<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="UserServiceImpl-1"><a href="#UserServiceImpl-1" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Page&lt;User&gt; <span class="title">getAll</span><span class="params">(Integer pageNum, Integer pageSize)</span> </span>&#123;</span><br><span class="line">		Pageable pageable = PageRequest.of(pageNum, pageSize);</span><br><span class="line">		<span class="keyword">return</span> userDao.findAll(pageable);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserController-1"><a href="#UserController-1" class="headerlink" title="UserController"></a>UserController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;分页查找用户&quot;,notes = &quot;需要当前也和每页条数&quot;)</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;&#123;pageNum&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findByPage</span><span class="params">(	</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;pageNum&quot;,value = &quot;当前页&quot;,required = true,defaultValue = &quot;0&quot;)</span>	 <span class="meta">@PathVariable(&quot;pageNum&quot;)</span> Integer pageNum,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;pageSize&quot;,value = &quot;每页条数&quot;,required = true,defaultValue = &quot;5&quot;)</span>  <span class="meta">@PathVariable(&quot;pageSize&quot;)</span> Integer pageSize)</span> </span>&#123;</span><br><span class="line">		Page&lt;User&gt; page = userService.getAll(pageNum, pageSize);</span><br><span class="line">		<span class="keyword">long</span> total = page.getTotalElements(); <span class="comment">// 获取总条数</span></span><br><span class="line">		List&lt;User&gt; content = page.getContent();</span><br><span class="line">		Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;total&quot;</span>, total);</span><br><span class="line">		map.put(<span class="string">&quot;content&quot;</span>, content);</span><br><span class="line">		<span class="keyword">return</span> Result.success(map);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;content&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;vanse&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;phone&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;realName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;gender&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;birthday&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;registerTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;image&quot;</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="更新状态"><a href="#更新状态" class="headerlink" title="更新状态"></a>更新状态</h2><h3 id="UserServiceImpl-2"><a href="#UserServiceImpl-2" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 更新状态</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserStatus</span><span class="params">(Integer id, String status)</span> </span>&#123;</span><br><span class="line">        	<span class="comment">// 此处无须额外处理  该方法已经有异常处理</span></span><br><span class="line">		User user = findById(id);</span><br><span class="line">		user.setStatus(status);</span><br><span class="line">		userDao.save(user);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserController-2"><a href="#UserController-2" class="headerlink" title="UserController"></a>UserController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;改变用户状态&quot;,notes = &quot;需要用户id和用户状态参数&quot;)</span></span><br><span class="line">	<span class="meta">@PutMapping(&quot;&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">saveOrUpdateUser</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;id&quot;,value = &quot;用户id&quot;,required = true)</span>	<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;status&quot;,value = &quot;用户状态&quot;,required = true)</span> <span class="meta">@PathVariable(&quot;status&quot;)</span>String status)</span> </span>&#123;</span><br><span class="line">		userService.updateUserStatus(id, status);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><h3 id="UserServiceImpl-3"><a href="#UserServiceImpl-3" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">		List&lt;User&gt; userList =  userDao.findAllById(ids);</span><br><span class="line">		<span class="keyword">if</span>(userList == <span class="keyword">null</span> || userList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_NONE);</span><br><span class="line">		&#125;</span><br><span class="line">		userDao.deleteInBatch(userList);	</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="UserController-3"><a href="#UserController-3" class="headerlink" title="UserController"></a>UserController</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;批量删除&quot;,notes = &quot;需要传递多个id&quot;)</span></span><br><span class="line">	<span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">		@ApiImplicitParam(name = &quot;ids&quot;,value = &quot;多个id&quot;,paramType = &quot;query&quot;,dataType = &quot;Integer&quot;,allowMultiple = true)</span></span><br><span class="line"><span class="meta">		&#125;)</span></span><br><span class="line">	<span class="meta">@DeleteMapping(&quot;/deleteBatch&quot;)</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * 	@RequestParam(&quot;ids&quot;)</span></span><br><span class="line"><span class="comment">		@ApiParam(name = &quot;ids&quot;,value = &quot;批量id&quot;,required = true)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">deleteBatch</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot;)</span> List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// @ApiParam 默认是json格式</span></span><br><span class="line">		userService.deleteUserInBatch(ids);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="UserServiceImpl-4"><a href="#UserServiceImpl-4" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">		User user = findUserByUsername(username);</span><br><span class="line">		<span class="keyword">if</span>(user == <span class="keyword">null</span> || !password.equals(user.getPassword())) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.USER_LOGIN_ERROR);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="UserController-4"><a href="#UserController-4" class="headerlink" title="UserController"></a>UserController</h3><p>此处将参数拼接在地址栏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录</span></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;登录&quot;,notes = &quot;用户名和密码&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">loign</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@RequestParam(&quot;username&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;username&quot;,value = &quot;用户名&quot;,required = true)</span>String username,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@RequestParam(&quot;password&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;password&quot;,value = &quot;密码&quot;,required = true)</span>String password)</span> </span>&#123;</span><br><span class="line">	User user = userService.login(username, password);</span><br><span class="line">	<span class="keyword">return</span> Result.success(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 登录</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;登录&quot;,notes = &quot;用户名和密码&quot;)</span></span><br><span class="line">	<span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">			@ApiImplicitParam(name = &quot;username&quot;,value = &quot;用户名&quot;,paramType = &quot;form&quot;,dataType = &quot;string&quot;,defaultValue = &quot;wangsidandan&quot; ),</span></span><br><span class="line"><span class="meta">			@ApiImplicitParam(name = &quot;password&quot;,value = &quot;密码&quot;,paramType = &quot;form&quot;,dataType = &quot;string&quot;,defaultValue = &quot;000&quot; )&#125;)</span></span><br><span class="line">	<span class="meta">@PostMapping(value = &quot;/login&quot;,consumes = &quot;application/x-www-form-urlencoded&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">loign</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			String username,String password)</span> </span>&#123;</span><br><span class="line">		User user = userService.login(username, password);</span><br><span class="line">		<span class="keyword">return</span> Result.success(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>其中：<br><code>@Api</code> ，用来指定当前API模块的名称<br><code>@ApiOperation </code>，用来设置API方法的简介说明<br><code>@ApiImplicitParams</code> ，用来设置API方法的参数，可以有多个参数<br><code>@ApiImplicitParam </code>，用来设置一个参数的详细信息</p>
<ul>
<li>name，参数的名称</li>
<li>value，参数的介绍</li>
<li>dataType，参数的数据类型，例如String</li>
<li>required，是否为必须参数</li>
<li>defaultValue，默认填入输入框的值</li>
<li>paramType，参数的类型：<ul>
<li>path    /user/{id} </li>
<li>query /user?id=</li>
<li>body 正文</li>
<li>header 请求头</li>
<li>form 请求表单</li>
</ul>
</li>
</ul>
<h1 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>传统的Web应用中，使用session来存在用户的信息，每次用户认证通过以后，服务器需要创建一条记录<br>保存用户信息，通常是在内存中。</p>
<ul>
<li>随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大,</li>
<li>由于Session是在内存中的，这就带来一些扩展性的问题<ul>
<li>servlet依赖于web容器    </li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210318005044861.png" alt="image-20210318005044861"></p>
<blockquote>
<p>JSON Web Token (JWT,token的一种)，是一个开放标准(RFC 7519)，它定义了一种紧凑的、自包含的方式，用于作为JSON对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。</p>
</blockquote>
<ul>
<li>JWT存放在客户端（前端），每次请求的请求头中，携带此JWT发送给服务器，服务器端负责接收<br>和验证</li>
<li>服务器端可以不用存储JWT，这样可以降低服务器的内存的开销</li>
<li>JWT和语言无关，扩展起来非常方便，无论是PC端还是移动端，都可以很容易的使用</li>
<li>不受cookie的限制</li>
</ul>
<p>如图：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210318005232445.png" alt="image-20210318005232445"></p>
<blockquote>
<p>注意，session和JWT的主要区别就是保存的位置，session是保存在服务端的，而JWT是保存在客户<br>端的</p>
</blockquote>
<blockquote>
<p>注意，JWT就是一个固定格式的字符串</p>
</blockquote>
<p><a href="https://jwt.io/">JWT官网</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210318005358285.png" alt="image-20210318005358285"></p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>JWT固定各种的字符串，由三部分组成：</p>
<ul>
<li>Header，头部</li>
<li>Payload，载荷</li>
<li>Signature，签名</li>
</ul>
<blockquote>
<p>注意，把这三部分使用点（.）连接起来，就是一个JWT字符串</p>
</blockquote>
<p>如图：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210319084618060.png" alt="image-20210319084618060"></p>
<h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><blockquote>
<p>header一般的由两部分组成：token的类型（“JWT”）和算法名称（比如：HMAC SHA256或者RSA等等）。</p>
</blockquote>
<p>JWT里验证和签名使用的算法列表如下：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210319084933149.png" alt="image-20210319084933149"></p>
<p>例如，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="载荷"><a href="#载荷" class="headerlink" title="载荷"></a>载荷</h3><blockquote>
<p>payload主要用来包含声明（claims ），这个声明一般是关于实体(通常是用户)和其他数据的声明。</p>
</blockquote>
<p>声明有三种类型:</p>
<ul>
<li>registered</li>
<li>public</li>
<li>private</li>
</ul>
<p>具体如下：</p>
<p>Registered claims : 这里有一组预定义的声明，它们不是强制的，但是推荐。</p>
<ul>
<li>iss: jwt签发者</li>
<li>sub: jwt所面向的用户</li>
<li>aud: 接收jwt的一方</li>
<li>exp: jwt的过期时间，这个过期时间必须要大于签发时间 </li>
<li>nbf: 定义在什么时间之前，该jwt都是不可用的</li>
<li>iat: jwt的签发时间</li>
<li>jti: jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击</li>
</ul>
<p>Public claims : 可以随意定义</p>
<ul>
<li>自定义数据:存放在token中存放的key-value值</li>
</ul>
<p>Private claims : 用于在同意使用它们的各方之间共享信息，并且不是注册的或公开的声明</p>
<p>例如，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;iss&quot;</span>: <span class="string">&quot;briup&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;iat&quot;</span>: <span class="number">1446593502</span>,</span><br><span class="line">    <span class="attr">&quot;exp&quot;</span>: <span class="number">1446594722</span>,</span><br><span class="line">    <span class="attr">&quot;aud&quot;</span>: <span class="string">&quot;www.briup.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;briup@briup.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;tom&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，不要在JWT的payload或header中放置敏感信息，除非它们是加密的</p>
</blockquote>
<p>把头部和载荷分别进行Base64编码之后得到两个字符串，然后再将这两个编码后的字符串用英文句号.<br>连接在一起（头部在前），形成新的字符串：</p>
<p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2MmI2OWNlZC02YWNlLTRmYzAtOTk5MS00YWUwMjIxODQ0OTciLCJleHAiOjE2MDYwNTQzNjl9</code></p>
<p>###签名</p>
<p>最后，将上面拼接完的字符串用HS256算法进行加密，在加密的时候，还需要提供一个密钥（secret）。加密后的内容也是一个字符串，这个字符串就是签名。</p>
<p>把这个签名拼接在刚才的字符串后面就能得到完整的JWT字符串。<br>header部分和payload部分如果被篡改，由于篡改者不知道密钥是什么，也无法生成新的signature部分，<br>服务端也就无法通过。</p>
<blockquote>
<p>在JWT中，消息体是透明的，使用签名可以保证消息不被篡改。</p>
</blockquote>
<blockquote>
<p>确保密钥不会泄露,否则会被篡改</p>
</blockquote>
<p>例如，使用HMACSHA256加密算法，配合秘钥，将前俩部进行加密，生成签名</p>
<p><code>HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</code></p>
<p>例如，将Header、Payload、Signature三部分使用点（.）连接起来</p>
<p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2MmI2OWNlZC02YWNlLTRmYzAtOTk5MS00Y WUwMjIxODQ0OTciLCJleHAiOjE2MDYwNTQzNjl9.DNVhr36j66JpQBfcYoo64IRp84dKiQeaq7axHTBcP9 E</code></p>
<p>例如，使用官网提供的工具，可以对该JWT进行验证和解析</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210319085334765.png" alt="image-20210319085334765"></p>
<blockquote>
<p>注意，在代码中，我们使用JWT封装的工具类，也可以完成此操作</p>
</blockquote>
<h2 id="整合-1"><a href="#整合-1" class="headerlink" title="整合"></a>整合</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间5分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE_TIME = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jwt 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">&quot;jwt_secret&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成签名，五分钟后过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> info，Map的value只能存放的值的类型为：Map, List, Boolean, Integer, Long, Double, String and Date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String userId,Map&lt;String,Object&gt; info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date date = <span class="keyword">new</span> Date(System.currentTimeMillis() + EXPIRE_TIME);</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(SECRET);</span><br><span class="line">            <span class="keyword">return</span> JWT.create()</span><br><span class="line">                    <span class="comment">// 将 user id 保存到 token 里面</span></span><br><span class="line">                    .withAudience(userId)</span><br><span class="line">                    <span class="comment">// 存放自定义数据</span></span><br><span class="line">                    .withClaim(<span class="string">&quot;info&quot;</span>, info)</span><br><span class="line">                    <span class="comment">// 五分钟后token过期</span></span><br><span class="line">                    .withExpiresAt(date)</span><br><span class="line">                    <span class="comment">// token 的密钥</span></span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUserId</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String userId = JWT.decode(token).getAudience().get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> userId;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取自定义数据info</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,Object&gt; <span class="title">getInfo</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JWT.decode(token).getClaim(<span class="string">&quot;info&quot;</span>).asMap();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkSign</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(SECRET);</span><br><span class="line">            JWTVerifier verifier = JWT.require(algorithm)</span><br><span class="line">                    <span class="comment">// .withClaim(&quot;username&quot;, username)</span></span><br><span class="line">                    .build();</span><br><span class="line">            verifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;token 无效，请重新获取&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拦截认证资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtInteceptors</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// 判断是不是认证资源(根据拦截器配置 auth/**) 不是的话直接放行</span></span><br><span class="line">		<span class="comment">//System.out.println(handler); //class org.springframework.web.method.HandlerMethod</span></span><br><span class="line">		<span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 从请求头中获取token</span></span><br><span class="line">		String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">		<span class="comment">// 判断token是否为空 空直接抛异常 </span></span><br><span class="line">		<span class="keyword">if</span>(token == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;无token,请登录&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 校验token</span></span><br><span class="line">		JwtUtil.checkSign(token);</span><br><span class="line">		<span class="comment">// 取出token中的信息</span></span><br><span class="line">		String userId = JwtUtil.getUserId(token);</span><br><span class="line">		System.out.println(userId);</span><br><span class="line">		Map&lt;String, Object&gt; info = JwtUtil.getInfo(token);</span><br><span class="line">		info.forEach((k,v)-&gt;&#123;</span><br><span class="line">			System.out.println(k+<span class="string">&quot;=&quot;</span>+v);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">// 放行</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="mvc配置"><a href="#mvc配置" class="headerlink" title="mvc配置"></a>mvc配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">		registry.addInterceptor(<span class="keyword">new</span> JwtInteceptors())</span><br><span class="line">		.addPathPatterns(<span class="string">&quot;/auth/**&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/auth&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;测试模块&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p><strong>直接访问</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211112093343903.png" alt="image-20211112093343903"></p>
<p><strong>获取token</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211112093718429.png" alt="image-20211112093718429"></p>
<p><strong>携带请求头</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211112093811250.png" alt="image-20211112093811250"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">gender=0</span><br><span class="line">username=wangsidandan</span><br></pre></td></tr></table></figure>



<p><strong>修改token，故意写错后，再访问测试</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;code&quot;</span>:<span class="number">500</span>,<span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;服务器异常: token 无效，请重新获取&quot;</span>,<span class="attr">&quot;data&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取新的token测试通过后，等待5分钟后，再次访问</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;code&quot;</span>:<span class="number">500</span>,<span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;服务器异常: token 无效，请重新获取&quot;</span>,<span class="attr">&quot;data&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure>



<h3 id="swagger-1"><a href="#swagger-1" class="headerlink" title="swagger"></a>swagger</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/auth&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;测试模块&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;测试&quot;,notes = &quot;token放请求头&quot;)</span></span><br><span class="line">	<span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">		@ApiImplicitParam(name = &quot;token&quot;,value = &quot;token值&quot;,dataType = &quot;string&quot;,paramType = &quot;header&quot;,required = true)</span></span><br><span class="line"><span class="meta">	&#125;)</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>问题</code></p>
<p>每个需要拦截的资源都要手动配置token</p>
<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><blockquote>
<p>很多请求中，会携带token到服务器端进行认证，token有效时才可以进行本次访问，调用相应的接口</p>
</blockquote>
<p>使用swagger进行接口测试后，可以给swagger中测试的接口，添加全局的参数，让每一个接口都含义指定的参数，这样就不需要每一个接上添加swagger的注解了。</p>
<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a><strong>方式1</strong></h4><p>第一种设置全局变量的方式：</p>
<blockquote>
<p>注意，复制之前springboot-swagger项目，再添加少量修改即可</p>
</blockquote>
<p>修改配置类SwaggerConfig2.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ParameterBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.schema.ModelRef;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Parameter;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">	<span class="comment">// ApiSelectorBuilder select() api选择器</span></span><br><span class="line">	<span class="comment">// 指定处理器 任何路径</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Docket <span class="title">createDocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//配置全局参数</span></span><br><span class="line">				ParameterBuilder tokenPar = <span class="keyword">new</span> ParameterBuilder();  </span><br><span class="line">				Parameter param = tokenPar.name(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">							        	  .description(<span class="string">&quot;JWT令牌&quot;</span>)</span><br><span class="line">							        	  .modelRef(<span class="keyword">new</span> ModelRef(<span class="string">&quot;string&quot;</span>))</span><br><span class="line">							        	  .parameterType(<span class="string">&quot;header&quot;</span>)</span><br><span class="line">							        	  .required(<span class="keyword">false</span>)</span><br><span class="line">							        	  .build();  </span><br><span class="line">		        </span><br><span class="line">		        List&lt;Parameter&gt; pars = <span class="keyword">new</span> ArrayList&lt;Parameter&gt;();  </span><br><span class="line">		        pars.add(param);  </span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">				.apiInfo(apiInfo())</span><br><span class="line">				.select()</span><br><span class="line">				.apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.briup.cms.controller&quot;</span>))</span><br><span class="line">				.paths(PathSelectors.any())</span><br><span class="line">				.build()</span><br><span class="line">				.globalOperationParameters(pars)</span><br><span class="line">				.ignoredParameterTypes(HttpServletRequest.class,HttpServletResponse.class);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// swagger页面中显示的基本信息</span></span><br><span class="line">	<span class="comment">//@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">				.title(<span class="string">&quot;cms&quot;</span>)</span><br><span class="line">				.description(<span class="string">&quot;新闻发布系统&quot;</span>)</span><br><span class="line">				.version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">				.contact(<span class="keyword">new</span> Contact(<span class="string">&quot;vanse&quot;</span>, <span class="string">&quot;http://wangsidandan.github.io&quot;</span>, <span class="string">&quot;wangsidandan@gmail.com&quot;</span>))</span><br><span class="line">				.build();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321163623737.png" alt="image-20210321163623737"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321163643126.png" alt="image-20210321163643126"></p>
<blockquote>
<p>注意，此时在swagger中显示的接口，都自动添加了这个全局参数token，并且请求时也携带了指定的token值</p>
</blockquote>
<p><code>问题</code></p>
<p>不需要认证的接口也添加了token</p>
<p>####方式2</p>
<p>第二种设置全局变量的方式：</p>
<blockquote>
<p>注意，复制之前springboot-swagger项目，再添加少量修改即可</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicate;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.AuthorizationScope;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.SecurityReference;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">	<span class="comment">// ApiSelectorBuilder select() api选择器</span></span><br><span class="line">	<span class="comment">// 指定处理器 任何路径</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Docket <span class="title">createDocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">				.apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.briup.cms.controller&quot;</span>)).paths(PathSelectors.any())</span><br><span class="line">				.build().securitySchemes(security()).securityContexts(securityContexts())</span><br><span class="line">				.ignoredParameterTypes(HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// swagger页面中显示的基本信息</span></span><br><span class="line">	<span class="comment">// @Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(<span class="string">&quot;cms&quot;</span>).description(<span class="string">&quot;新闻发布系统&quot;</span>).version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">				.contact(<span class="keyword">new</span> Contact(<span class="string">&quot;vanse&quot;</span>, <span class="string">&quot;http://wangsidandan.github.io&quot;</span>, <span class="string">&quot;wangsidandan@gmail.com&quot;</span>)).build();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置认证中显示的显示的基本信息</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> List&lt;ApiKey&gt; <span class="title">security</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Collections.singletonList(<span class="keyword">new</span> ApiKey(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;token&quot;</span>, <span class="string">&quot;header&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置认证规则</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> List&lt;SecurityContext&gt; <span class="title">securityContexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		List&lt;String&gt; antPaths = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		antPaths.add(<span class="string">&quot;/auth/**&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> Collections.singletonList(SecurityContext.builder().securityReferences(defaultAuth())</span><br><span class="line">				.forPaths(antPathsCondition(antPaths)).build());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 返回认证路径的条件</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Predicate&lt;String&gt; <span class="title">antPathsCondition</span><span class="params">(List&lt;String&gt; antPaths)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		List&lt;Predicate&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">		antPaths.forEach(path -&gt; list.add(PathSelectors.ant(path)));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> Predicates.or(list);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 设置认证的范围，以及认证的类型</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">		AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">		authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">		<span class="keyword">return</span> Collections.singletonList(<span class="keyword">new</span> SecurityReference(<span class="string">&quot;Authorization&quot;</span>, authorizationScopes));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里比之前新增的代码如下：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321171405316.png" alt="image-20210321171405316"></p>
<blockquote>
<p>注意，新增代码如图所示，以及下面新增的几个方法</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321171428922.png" alt="image-20210321171428922"></p>
<blockquote>
<p>注意，这里会显示一个“锁”的图标，表示这里有些接口是需要认证的</p>
</blockquote>
<p>展开模块后，访问路径符合要求接口，也会显示“锁”的图标</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321171450952.png" alt="image-20210321171450952"></p>
<p>点击锁的图标，添加请求头中的统一认证信息（token）：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321171509563.png" alt="image-20210321171509563"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321171519876.png" alt="image-20210321171519876"></p>
<p>点击认证按钮后，进行访问测试：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321171537958.png" alt="image-20210321171537958"></p>
<p>注意，这时候，有“锁”图标的接口，在访问的时候，都会携带刚刚设置的请求头中的认证信息token值</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321171609118.png" alt="image-20210321171609118"></p>
<p>注意，这时候，无“锁”图标的接口，在访问的时候，默认是不会携带设置的请求头信息的</p>
<h1 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h1><h2 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1.概述"></a>1.概述</h2><p>跨域访问，是指从一个域名的网页去请求另一个域名的资源。比如从<a href="http://www.baidu.com/">www.baidu.com</a> 页面去请求 <a href="http://www.google.com/">www.google.com</a> 的资源。但是一般情况下不能这么做跨域访问，因为有浏览器的“<strong>同源策略</strong>”存在，这是浏览器对JavaScript施加的安全限制。</p>
<blockquote>
<p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321224558036.png" alt="image-20210321224558036"></p>
<p><strong>“同源策略”</strong>简单的说，就是A网站页面访问B网站的资源受限（跨域访问），除非A和B是“同源”。<br><strong>“同源”</strong>是指三个相同，协议相同、域名相同、端口相同，只有有任何一个地方不同，就认为是跨域。</p>
<p>例如，<br>网页A的地址为， <a href="http://www.example.com/dir/page.html">http://www.example.com/dir/page.html</a><br>假设，网页A要访问的网页B地址为：</p>
<ul>
<li><a href="http://www.example.com/dir2/other.html">http://www.example.com/dir2/other.html</a> ： 同源（正常访问）</li>
<li><a href="https://www.example.com/dir/other.html">https://www.example.com/dir/other.html</a> ：不同源（协议不同，跨域）</li>
<li><a href="http://vip.www.example.com/dir/other.html">http://vip.www.example.com/dir/other.html</a> ：不同源（域名不同，跨域）</li>
<li><a href="http://www.example.com:81/dir/other.html">http://www.example.com:81/dir/other.html</a> ：不同源（端口不同，跨域）</li>
</ul>
<p>随着互联网的发展，“同源政策”越来越严格，目前，如果非同源（跨域），共有三种行为受到限制：</p>
<ul>
<li>Cookie 、LocalStorage、IndexDB 无法访问</li>
<li>DOM 无法获取</li>
<li>AJAX请求不能发送</li>
</ul>
<p>浏览器的用“同源策略”来限制跨域访问的目的是为了安全，例如，假设没有跨域访问的限制</p>
<ul>
<li><p>用户访问<a href="http://www.mybank.com/">www.mybank.com</a> ，登陆并进行网银操作，这时cookie、token等数据信息存放在浏览器中</p>
</li>
<li><p>用户访问<a href="http://www.abc.com/">www.abc.com</a></p>
</li>
<li><p>这时<a href="http://www.abc.com/">www.abc.com</a> 网站就可以在拿到银行的cookie或token等，然后发起对<a href="http://www.mybank.com/">www.mybank.com</a> 的操作</p>
</li>
</ul>
<p>我们在项目中，需要设置对跨域访问的支持，是因为项目的架构需要，例如</p>
<ul>
<li>公司内部有多个不同的子系统，例如A和B，分别部署在不同的服务器上，其域名也不相同</li>
<li>由于公司内部的数据需要，现在A系统中，跨域访问B系统，从而获取内部的一些信息资源</li>
</ul>
<blockquote>
<p>注意，在前后端分离的项目中，前端页面部署在一个服务器上，后端项目部署在另一个服务器上，从前端页面上发送ajax请求到后端系统中，这种情况，就属于跨域访问</p>
</blockquote>
<h2 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h2><p>1、新建项目，springboot-html</p>
<img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321230538847.png" alt="image-20210321230538847" style="zoom:50%;" />



<p>2、页面代码：ajax.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;script src=&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不需要写static--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;.btn1&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(msg);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>4、配置文件application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9999</span></span><br></pre></td></tr></table></figure>

<p>5、Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/ajax&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ajax&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>6、运行访问</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321231102544.png" alt="image-20210321231102544"></p>
<p><strong>再构建提供接口访问的后端项目</strong></p>
<p>1、新建项目，springboot-cors</p>
<img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321231146093.png" alt="image-20210321231146093" style="zoom:67%;" />

<p>2、pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3、配置文件，application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8989</span></span><br></pre></td></tr></table></figure>

<p>4、Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、启动，访问</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321231321782.png" alt="image-20210321231321782"></p>
<p>最后，访问springboot-html项目中的ajax.html页面，点击页面中的按钮，发送ajax请求，访问springbootcors<br>项目中的接口：</p>
<p>当前页面的访问地址： <a href="http://localhost:9999/ajax">http://localhost:9999/ajax</a><br>点击按钮后请求地址： <a href="http://localhost:8989/hi">http://localhost:8989/hi</a><br>可以看出，此时这俩个地址，属于“非同源”，本次访问属于跨域访问。</p>
<p>点击后，控制台上输出的错误信息：<br>已拦截跨源请求：同源策略禁止读取位于 <a href="http://localhost:8989/hi">http://localhost:8989/hi</a> 的远程资源。<br>（原因：CORS 头缺少 ‘Access-Control-Allow-Origin’）。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321232022681.png" alt="image-20210321232022681"></p>
<p>点开网络模块，查看具体的请求信息：<br>请求头中，自动添加了信息 Origin: <a href="http://localhost:9999/">http://localhost:9999</a> ，通知服务器本次是跨域访问</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321232136576.png" alt="image-20210321232136576"></p>
<p>从本次响应的内容中，可以看到，其实响应的内容已经成功返回了，但是由于浏览器的同源政策，把这些结果都给舍弃了。并且执行了Ajax中的回调函数error</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210321232221184.png" alt="image-20210321232221184"></p>
<h2 id="3-解决"><a href="#3-解决" class="headerlink" title="3.解决"></a>3.解决</h2><p>避开同源政策给跨域访问带来的限制，方式有很多：</p>
<ol>
<li>nginx</li>
<li>CORS</li>
<li>JSONP</li>
<li>WebSocket</li>
<li>Node.js</li>
<li>document.domain+iframe</li>
<li>other</li>
</ol>
<p>这里主要说下nginx反向代理和CORS跨域资源共享，这俩种跨域解决方案</p>
<h3 id="3-1-nginx"><a href="#3-1-nginx" class="headerlink" title="3.1 nginx"></a>3.1 nginx</h3><p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322064446018.png" alt="image-20210322064446018"></p>
<p>Nginx是一款开源的、高性能的HTTP和反向代理服务器</p>
<ul>
<li>也是一个IMAP/POP3/SMTP代理服务器</li>
<li>由C语言编写，其系统开销、CPU使用效率都很优秀</li>
<li>性能稳定、功能丰富、配置简洁</li>
<li>服务器中没有web容器</li>
</ul>
<p>正向代理，一般需要自己手动进行配置：(<strong>已知代理服务器</strong>)<br>代理服务器和客户端在同一个网络中。</p>
<p>例如，我们访问不了某个网站B，但是能访问某个代理服务器P，这个代理服务器P却可以访问到网络B，<br>那么我就先自己手动配置连上代理服务器P，然后让代理服务器P帮我访问网站B，并把结果返回。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211005101017166.png" alt="image-20211005101017166"></p>
<p>反向代理，一般是指以代理服务器来接收网络上的请求，然后将请求再转发给内部网络上的其他服务<br>器：<br>代理服务器和Web服务器在同一个网络中。一般不需要用户自己设置服务器，用户甚至感受不到自己访问的是反向代理服务器。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322064703065.png" alt="image-20210322064703065"></p>
<p>例如，Nginx的反向代理功能，解决访问跨域问题，或者实现多个服务器负载均衡的效果。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322064734300.png" alt="image-20210322064734300"></p>
<p>1、修改nginx的配置文件nginx.conf</p>
<p>修改前的配置文件为：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322064805891.png" alt="image-20210322064805891"></p>
<p>修改后的配置文件为：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322064827250.png" alt="image-20210322064827250"></p>
<blockquote>
<p>特别注意，nginx启动的时候，一定不要存放在有中文的路径中，如果启动失败，查看错误的日志记录</p>
</blockquote>
<p>conf.config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /html &#123;</span><br><span class="line">    rewrite ^/html/(.*)$ /$1 break;</span><br><span class="line">    proxy_pass http://localhost:9999/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当访问指定地址 <a href="http://localhost/html">http://localhost/html</a> 的时候，会先重写URI地址</li>
<li>URI符合正则表达式^/api/(.*)$ 的地址会被重写为 /$1</li>
<li>$1表示正则表达式中第一个()中的字符串</li>
<li>最后把重写后的新地址，转发给<a href="http://localhost:9999/">http://localhost:9999/</a></li>
</ul>
<p>例如，<br>浏览器中访问<a href="http://localhost/html/ajax">http://localhost/html/ajax</a><br>nginx代理后，先重写地址，将/html/ajax，重写为/ajax<br>然后转发给<a href="http://localhost:9999/">http://localhost:9999/</a> ，最终访问的是<a href="http://localhost:9999/ajax">http://localhost:9999/ajax</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">    rewrite ^/api/(.*)$ /$1 break;</span><br><span class="line">    proxy_pass http://localhost:8989/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，和上面的描述的含义相同</p>
</blockquote>
<p>2、ajax页面中，新增按钮和ajax请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  $(&quot;.btn2&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    type: &quot;GET&quot;,</span><br><span class="line">                    url : &quot;/api/hi&quot;,</span><br><span class="line">                    success: function(msg)&#123;</span><br><span class="line">                        console.log(msg);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: function()&#123;</span><br><span class="line">                        alert(&#x27;error&#x27;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3、启动nginx服务器，访问地址</p>
<p><a href="http://localhost/html/ajax">http://localhost/html/ajax</a></p>
<blockquote>
<p>注意，此时访问springboot-html项目中的页面地址，和之前是不一样的</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322074942961.png" alt="image-20210322074942961"></p>
<p>没有使用nginx之前，访问springboot-html中页面的地址： <a href="http://localhost:9999/ajax">http://localhost:9999/ajax</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322070308045.png" alt="image-20210322070308045"></p>
<p>使用nginx之后，访问springboot-html中页面的地址： <a href="http://localhost/html/ajax">http://localhost/html/ajax</a></p>
<p>4、点击按钮2，发送ajax请求</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322075035934.png" alt="image-20210322075035934"></p>
<blockquote>
<p>可以看出，此时ajax请求已经成功了</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322075121167.png" alt="image-20210322075121167"></p>
<blockquote>
<p>注意，此时ajax请求的地址为： <a href="http://localhost/api/hi">http://localhost/api/hi</a></p>
</blockquote>
<blockquote>
<p>可以看出，已完成跨域访问，但其实是使用nginx代理服务器来“欺骗”浏览器，让浏览器认为是 “同源访问”</p>
</blockquote>
<p>如图：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322070521188.png" alt="image-20210322070521188"></p>
<blockquote>
<p>浏览器中，从始至终都是访问<a href="http://localhost/">http://localhost/</a> 下面的资源，所以浏览器认为一直是“同源访问”</p>
</blockquote>
<blockquote>
<p>浏览器不知道的是，它访问的服务器是一个nginx代理服务器，它会接收浏览器请求，重写URI地址<br>后，转发给真正的服务器。</p>
</blockquote>
<h3 id="3-2-cors"><a href="#3-2-cors" class="headerlink" title="3.2 cors"></a>3.2 cors</h3><h4 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h4><p>CORS(Cross-origin resource sharing)，是一个W3C标准，全称是”跨域资源共享”。</p>
<ul>
<li>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。</li>
<li>对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。</li>
<li>浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息。（Origin）</li>
<li>有时还会多出一次附加的请求，但用户不会有感觉。（options方式的请求）</li>
</ul>
<h4 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h4><p>浏览器将CORS请求分成两类：</p>
<ul>
<li>简单请求（simple request）</li>
<li>非简单请求（not-so-simple request）</li>
</ul>
<p>只要同时满足以下两大条件，就属于简单请求：</p>
<p>请求方法是以下三种方法之一<br>    GET<br>    POST<br>    HEAD<br>HTTP的头信息不超出以下几种字段<br>    Accept<br>    Accept-Language</p>
<p>​    Content-Language<br>​    Last-Event-ID<br>​    Content-Type，该字段的值只能是以下三种</p>
<p>​        application/x-www-form-urlencoded</p>
<p>​        multipart/form-data<br>​        text/plain</p>
<blockquote>
<p>注意，只要不能同时满足上面两个条件，就属于非简单请求。</p>
</blockquote>
<h4 id="3、简单请求"><a href="#3、简单请求" class="headerlink" title="3、简单请求"></a>3、简单请求</h4><p>对于简单请求，浏览器直接发出CORS请求，同时在请求头中增加一个Origin字段。<br>该字段表示，本次请求来自哪个源（协议 + 域名 + 端口），服务器根据这个值，决定是否同意这次请<br>求。</p>
<p>Origin指定的源，即使不在服务器许可范围内，服务器还是会返回一个正常的HTTP响应，但是响应头中<br>不含指定Access-Control-Allow-Origin字段，浏览器这时候就知道本次跨域访问失败。<br>但是这个时候，响应状态可能是200，同时在一些工具中还能看到正确的返回值。<br>例如，</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322070848847.png" alt="image-20210322070848847"></p>
<p>其中，</p>
<ol>
<li>浏览器在请求头中自动添加了Origin 字段</li>
<li>服务器在响应中没有添加Access-Control-Allow-Origin 字段（说明服务器不支持此请求跨域访<br>问）</li>
<li>响应的状态码是200，并且从响应内容中可以看到正确的返回内容</li>
<li>同时，浏览器会抛出一个错误，被ajax的核心对象XMLHttpRequest的onerror 回调函数捕获</li>
</ol>
<p>如果Origin指定的域名在服务器的许可范围内，服务器返回的响应，会多出几个头信息字段：</p>
<ol>
<li><p>Access-Control-Allow-Origin<br>该字段是必须的。<br>它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的跨域请求。</p>
</li>
<li><p>Access-Control-Allow-Credentials</p>
<p>该字段可选<br>表示是否允许发送Cookie。<br>设为true，即表示服务器已经允许了，跨域请求中可以携带Cookie。<br>但是这需要AJAX中设置withCredentials=true进行配合。<br>如果服务器不要浏览器发送Cookie，删除该字段即可。</p>
</li>
</ol>
<p><code>3. Access-Control-Expose-Headers</code></p>
<p>​    该字段可选<br>​    列出了哪些首部可以作为响应的一部分暴露给外部。<br>​    默认情况下，只有七种可以暴露给外部<br>​    Cache-Control<br>​    Content-Language<br>​    Content-Length<br>​    Content-Type<br>​    Expires<br>​    Last-Modified<br>​    Pragma</p>
<p>​    如果想要让客户端可以访问到其他的首部信息，可以将它们在Access-Control-Expose-Headers里面指定</p>
<h4 id="4、非简单请求"><a href="#4、非简单请求" class="headerlink" title="4、非简单请求"></a>4、非简单请求</h4><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段<br>的类型是application/json。<br>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。<br>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词<br>和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p>
<p>例如，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.btn1&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，在请求头中，指定contentType为application/json</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322071208502.png" alt="image-20210322071208502"></p>
<blockquote>
<p>可以看出，请求头中有Content-Type:application/json 字段，属于非简单请求，浏览器会提前发送一个option方式的“预检请求”(预检请求会缓存)</p>
</blockquote>
<p>在这个“预检请求”的响应中，服务器会返回一些数据来通知浏览器，服务器对跨域请求的要求</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20210322071259213.png" alt="image-20210322071259213"></p>
<p>如果浏览器否定了“预检”请求，也会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。<br>这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror<br>回调函数捕获。</p>
<blockquote>
<p>测试简单请求和非简单请求</p>
</blockquote>
<p>==“预检”成功的常见响应头部字段有：==</p>
<ul>
<li>Access-Control-Allow-Origin</li>
<li>Access-Control-Allow-Methods</li>
<li>Access-Control-Allow-Headers</li>
<li>Access-Control-Allow-Credentials<br>标签允许客户端携带验证信息，例如 cookie<pre><code>Access-Control-Max-Age
表示预检请求的返回结果（即Access-Control-Allow-Methods 和Access-Control-Allow-Headers提供的信息） 可以被缓存多久。
</code></pre>
</li>
</ul>
<p>注意，ajax跨域访问的时候，如果需要在请求中携带cookie，需要有以下设置</p>
<ol>
<li><p>前端ajax请求中，指定withCredentials属性为ture</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span><br><span class="line">    <span class="attr">xhrFields</span>:&#123;</span><br><span class="line">   		 <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>后端响应头中，设置Access-Control-Allow-Credentials属性为true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//允许跨域携带cookie</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="3">
<li>后端响应头中，设置Access-Control-Allow-Origin属性为具体的值，而不是能通配符*</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://127.0.0.1:9999&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 允许cookie的情况下 前端配置 后台配置</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:9999&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">   <span class="comment">// 不允许cookie的情况下</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>前端访问 <a href="http://localhost:9999/ajax">http://localhost:9999/ajax</a> 后台就配 localhost</p>
<p>此时无法处理预检查请求</p>
</blockquote>
<p>可添加拦截器（了解）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.web.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CosInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:9999&quot;</span>);</span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,<span class="string">&quot;POST, GET, OPTIONS, DELETE&quot;</span>);</span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Content-Type, x-requested-with, X-Custom-Header, Authorization&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;跨域&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.cms.web.interceptor.CosInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(cosInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CosInterceptor <span class="title">cosInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CosInterceptor();</span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意，这里后端代码使用的使用response设置的，在springmvc中，也可以专门的设置方法来代替这种方式</p>
</blockquote>
<h4 id="5、使用"><a href="#5、使用" class="headerlink" title="5、使用"></a>5、使用</h4><p>springboot-html项目中的ajax.html页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;script src=&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;.btn1&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(msg);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;.btn2&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span> : <span class="string">&quot;/api/hi&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(msg);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;.btn3&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(msg);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里主要测试的是test3按钮</p>
</blockquote>
<p>springboot-cors项目中的Controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>springboot-cors项目中的配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)<span class="comment">//映射所有路径</span></span><br><span class="line">        .allowedOrigins(<span class="string">&quot;*&quot;</span>)<span class="comment">//运行所有客户端访问</span></span><br><span class="line">        .allowCredentials(<span class="keyword">false</span>)<span class="comment">//不允许携带cookie</span></span><br><span class="line">        .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)<span class="comment">//</span></span><br><span class="line">        支持的方法</span><br><span class="line">        .allowedHeaders(<span class="string">&quot;*&quot;</span>)<span class="comment">//运行所有请求头字段</span></span><br><span class="line">        .maxAge(<span class="number">3600</span>);<span class="comment">//允许客户端缓存“预检请求”中获取的信息，3600秒</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里主要配置了跨域访问的属性</p>
</blockquote>
<p>启动俩个项目，访问页面，点击按钮，测试ajax跨域访问：</p>
<blockquote>
<p>可以看出，此时ajax请求进行跨域访问，已经成功</p>
</blockquote>
<blockquote>
<p>注意，此时可以尝试在ajax请求中，设置contentType: application/json ,观察是否会发出“预检”请求</p>
</blockquote>
<p>同时，也可以修改ajax请求，让其写的cookie和指定字段的头部：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.btn3&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span><br><span class="line">        <span class="attr">xhrFields</span>:&#123;</span><br><span class="line">        <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="attr">token</span>:<span class="string">&quot;aaa.bbb.ccc&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>此时，对应的后端跨域设置为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        .allowedOrigins(<span class="string">&quot;http://localhost:9999&quot;</span>)</span><br><span class="line">        .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">        .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">        .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">        .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6、其他"><a href="#6、其他" class="headerlink" title="6、其他"></a>6、其他</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addMapping(<span class="string">&quot;/**&quot;</span>)<span class="comment">//映射所有路径</span></span><br><span class="line">    .allowedOrigins(<span class="string">&quot;*&quot;</span>)<span class="comment">//运行所有客户端访问</span></span><br><span class="line">    .allowCredentials(<span class="keyword">false</span>)<span class="comment">//不允许携带cookie</span></span><br><span class="line">    .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)<span class="comment">//支持的方法</span></span><br><span class="line">    .allowedHeaders(<span class="string">&quot;*&quot;</span>)<span class="comment">//运行所有请求头字段</span></span><br><span class="line">    .maxAge(<span class="number">3600</span>);<span class="comment">//允许客户端缓存“预检请求”中获取的信息，3600秒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此配置中，如果设置allowCredentials(true) ，那么allowedOrigins(“*”) 这里就不能使用通<br>配符了，必须要写一个或者多个（可变参数）客户端的地址<br>例如， allowedOrigins(“<a href="http://127.0.0.1:9999&quot;">http://127.0.0.1:9999&quot;</a>)</p>
<p>另外，如果只是想让Controller中的某一个方法或者几个方法被跨域访问，那么可以在方法上使用<br>@CrossOrigin 注解，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CrossOrigin(origins = &#123;&quot;http://127.0.0.1:9999&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，此时就不需要在配置类中做其他配置了，直接一个注解就可以让该方法被跨域访问了</p>
</blockquote>
<h1 id="角色模块-1"><a href="#角色模块-1" class="headerlink" title="角色模块"></a>角色模块</h1><ul>
<li>一个角色有多个用户 外键在用户方</li>
<li>jpa实体映射可以只配置一方</li>
</ul>
<h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;cms_role&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;角色模型&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;id&quot;,value = &quot;角色id&quot;,example = &quot;1&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;name&quot;,value = &quot;角色名称&quot;,example = &quot;admin&quot;)</span></span><br><span class="line">	<span class="meta">@Column(nullable = false)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;name&quot;,value = &quot;角色描述&quot;,example = &quot;manager&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String description;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//private Set&lt;User&gt; userList;</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> description;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.description = description;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//分页获取所有角色信息</span></span><br><span class="line">	<span class="function">Page&lt;Role&gt; <span class="title">findAll</span><span class="params">(Integer pageNum,Integer pageSize)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//新增角色信息或者更新角色信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveOrUpdateRole</span><span class="params">(Role role)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//批量删除角色信息</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteRoleInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="插入角色"><a href="#插入角色" class="headerlink" title="插入角色"></a>插入角色</h2><h3 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdateRole</span><span class="params">(Role role)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(role.getId() == <span class="keyword">null</span>) &#123;</span><br><span class="line">			roleDao.save(role);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			Role target = roleDao.findById(role.getId()).get();</span><br><span class="line">			NotNullNameUtil.getNotNullNames(role, target);</span><br><span class="line">			roleDao.save(target);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;添加或修改角色&quot;,notes = &quot;无id: 添加 有id：修改&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">saveOrUpdate</span><span class="params">(<span class="meta">@RequestBody</span> Role role)</span> </span>&#123;</span><br><span class="line">		roleService.saveOrUpdateRole(role);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="service-2"><a href="#service-2" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Page&lt;Role&gt; <span class="title">findAll</span><span class="params">(Integer pageNum, Integer pageSize)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		Pageable page = PageRequest.of(pageNum, pageSize);</span><br><span class="line">		<span class="keyword">return</span> roleDao.findAll(page);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-2"><a href="#controller-2" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;pageNum&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;分页查询&quot;,notes = &quot;当前页面页码和每页条数&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findByPage</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;pageNum&quot;,value = &quot;当前页&quot;,required = true)</span> </span></span></span><br><span class="line"><span class="params"><span class="function">				<span class="meta">@PathVariable(&quot;pageNum&quot;)</span> </span></span></span><br><span class="line"><span class="params"><span class="function">					Integer pageNum,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;pageSize&quot;,value = &quot;每页显示条数&quot;,required = true)</span> </span></span></span><br><span class="line"><span class="params"><span class="function">				<span class="meta">@PathVariable(&quot;pageSize&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">					Integer pageSize)</span> </span>&#123;</span><br><span class="line">		Page&lt;Role&gt; page = roleService.findAll(pageNum, pageSize);</span><br><span class="line">		List&lt;Role&gt; context = page.getContent();</span><br><span class="line">		<span class="keyword">long</span> total = page.getTotalElements();</span><br><span class="line">		Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;context&quot;</span>, context);</span><br><span class="line">		map.put(<span class="string">&quot;total&quot;</span>, total);</span><br><span class="line">		<span class="keyword">return</span> Result.success(map);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="service-3"><a href="#service-3" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteRoleInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		List&lt;Role&gt; roleList  = roleDao.findAllById(ids);</span><br><span class="line">		<span class="keyword">if</span>(roleList == <span class="keyword">null</span> || roleList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_NONE);</span><br><span class="line">		&#125;</span><br><span class="line">		roleDao.deleteInBatch(roleList);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-3"><a href="#controller-3" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;删除角色&quot;,notes = &quot;传多个Id值&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">deleteBatch</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@RequestParam(name=&quot;ids&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;ids&quot;,value = &quot;角色id&quot;,required = true)</span> List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">		roleService.deleteRoleInBatch(ids);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><code>问题</code></p>
<p>外键被引用无法删除。</p>
<ul>
<li>删除角色级联删除用户？</li>
<li>判断如果角色在使用不让删除？</li>
<li>删除角色 将用户外键置空</li>
</ul>
<h2 id="外键置空"><a href="#外键置空" class="headerlink" title="外键置空"></a>外键置空</h2><h3 id="数据库设置"><a href="#数据库设置" class="headerlink" title="数据库设置"></a>数据库设置</h3><p><img src="https://gitee.com/vanse/images/raw/master/cms/image-20211112193132222.png" alt="image-20211112193132222"></p>
<h3 id="jpa设置"><a href="#jpa设置" class="headerlink" title="jpa设置"></a>jpa设置</h3><blockquote>
<p>JPA默认删除外键策略是外键置空 但是需要两方都设置关系 不建议，否则两边都维护外键关系</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ManyToOne(targetEntity = Role.class)</span></span><br><span class="line"><span class="meta">@JoinColumn(name=&quot;role_id&quot;,referencedColumnName = &quot;id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Role role;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OneToMany(targetEntity = User.class)</span></span><br><span class="line"><span class="meta">@JoinColumn(name = &quot;role_id&quot;, referencedColumnName = &quot;id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; userList;</span><br></pre></td></tr></table></figure>



<h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><blockquote>
<p>由于设置了角色和用户的关系，此时用户模块的接口发生了变化</p>
</blockquote>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><blockquote>
<p>jpa自带导航查询，查找用户时同时查找角色</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;xvxcv&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;sdfs&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;phone&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;realName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;gender&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;birthday&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;registerTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;status&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;image&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">&quot;role&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;sdf&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;sdf&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><blockquote>
<p>  插入用户时 会默认提供角色类</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;1900-01-13&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gender&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;phone&quot;</span>: <span class="string">&quot;175********&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;realName&quot;</span>: <span class="string">&quot;老刘&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;role&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">2</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;jack2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="目录模块"><a href="#目录模块" class="headerlink" title="目录模块"></a>目录模块</h1><ul>
<li><p>一个目录有多个子目录</p>
</li>
<li><p>一个目录有多个文章</p>
</li>
<li><p>一个用户有多个文章</p>
</li>
<li><p>一个用户有多个评论</p>
</li>
<li><p>一个文章有多个评论</p>
</li>
<li><p>一个评论有多个子评论</p>
</li>
</ul>
<h2 id="实体-1"><a href="#实体-1" class="headerlink" title="实体"></a>实体</h2><p>目录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;cms_category&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;id&quot;,value = &quot;分类id&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Column(nullable = false)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;name&quot;,value = &quot;分类名称&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;description&quot;,value = &quot;分类描述&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String description;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Column(columnDefinition = &quot;int(10) COMMENT &#x27;序号&#x27;&quot;)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;no&quot;,value = &quot;排序编号&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> no;</span><br><span class="line">	<span class="comment">//lprivate int parent_id;</span></span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ManyToOne</span></span><br><span class="line">	<span class="meta">@JoinColumn(name = &quot;parent_id&quot;,referencedColumnName = &quot;id&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Category category; <span class="comment">// 父目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文章</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;cms_article&quot;)</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;文章模型&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;id&quot;,value = &quot;文章id&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Column(nullable = false)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;title&quot;,value = &quot;文章标题&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String title;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Column(nullable = false,length = 1024)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;content&quot;,value = &quot;文章内容&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String content;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Column(name = &quot;publish_time&quot;)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;publishTime&quot;,value = &quot;文章发布时间&quot;,hidden = true)</span></span><br><span class="line">	<span class="keyword">private</span> Date publishTime;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;status&quot;,value = &quot;审核状态&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;readTimes&quot;,value = &quot;阅读次数&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> readTimes;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Column(name = &quot;thumb_up&quot;)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;thumbUp&quot;,value = &quot;点赞数&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> thumbUp;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Column(name = &quot;thumb_down&quot;)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;thumbDown&quot;,value = &quot;点踩数&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> thumbDown;</span><br><span class="line">	<span class="comment">//private int userId;</span></span><br><span class="line">	<span class="comment">//private categoryId;</span></span><br><span class="line">	<span class="meta">@ManyToOne</span></span><br><span class="line">	<span class="meta">@JoinColumn(name = &quot;category_id&quot;,referencedColumnName = &quot;id&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Category category;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ManyToOne</span></span><br><span class="line">	<span class="meta">@JoinColumn(name = &quot;user_id&quot;,referencedColumnName = &quot;id&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> User user;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@OneToMany(mappedBy = &quot;article&quot;,cascade = CascadeType.ALL,targetEntity = Comment.class)</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">	<span class="keyword">private</span> Set&lt;Comment&gt; comments = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>评论</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;cms_comment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comment</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;id&quot;,value = &quot;评论id&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;content&quot;,value = &quot;评论内容&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String content;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ApiModelProperty(name = &quot;time&quot;,value = &quot;评论时间&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date time; <span class="comment">// 评论时间</span></span><br><span class="line"><span class="comment">//	private int userId;</span></span><br><span class="line"><span class="comment">//	private int articleId;</span></span><br><span class="line"><span class="comment">//	private int parentId;</span></span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ManyToOne</span></span><br><span class="line">	<span class="meta">@JoinColumn(name = &quot;user_id&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> User user;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ManyToOne</span></span><br><span class="line">	<span class="meta">@JoinColumn(name = &quot;article_id&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Article article;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@ManyToOne</span></span><br><span class="line">	<span class="meta">@JoinColumn(name = &quot;comment_id&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Comment comment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//分页获取所有分类</span></span><br><span class="line">	<span class="function">Page&lt;Category&gt; <span class="title">findAll</span><span class="params">(Integer pageNum,Integer pageSize)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//新增分类或者更新分类</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveOrUpdateCategory</span><span class="params">(Category category)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//批量删除分类</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteCategoryInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//按序号升序查询分类信息，并进行分页</span></span><br><span class="line">	<span class="function">Page&lt;Category&gt; <span class="title">findAllSortbyno</span><span class="params">(Integer pageNum,Integer pageSize)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//更新分类序号</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateCategoryNo</span><span class="params">(Integer id,<span class="keyword">int</span> no)</span><span class="keyword">throws</span> ServiceException</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="新增-更新-1"><a href="#新增-更新-1" class="headerlink" title="新增/更新"></a>新增/更新</h2><h3 id="service-4"><a href="#service-4" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加或者更新目录 </span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdateCategory</span><span class="params">(Category category)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		Integer id = category.getId();</span><br><span class="line">		String name = category.getName();</span><br><span class="line">		<span class="keyword">if</span>(id == <span class="keyword">null</span>) &#123;</span><br><span class="line">			categoryDao.save(category);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			Category target = categoryDao.findById(id).get();</span><br><span class="line">			NotNullNameUtil.getNotNullNames(category, target);</span><br><span class="line">			categoryDao.save(target);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-4"><a href="#controller-4" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;新增/更新目录&quot;,notes = &quot;新增/更新目录，需要json格式的字符串&quot;)</span></span><br><span class="line">	<span class="meta">@PostMapping(&quot;/category&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">saveOrUpdateCategory</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> </span>&#123;</span><br><span class="line">	    categoryService.saveOrUpdateCategory(category);</span><br><span class="line">	    <span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="批量删除-1"><a href="#批量删除-1" class="headerlink" title="批量删除"></a>批量删除</h2><h3 id="service-5"><a href="#service-5" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCategoryInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		<span class="comment">// 目录关联了文章 不能删除 </span></span><br><span class="line">		<span class="keyword">for</span> (Integer id : ids) &#123;</span><br><span class="line">			<span class="comment">// 如果目录下有子目录 不让删除  该id是不是父类</span></span><br><span class="line">			List&lt;Category&gt; categoryList = categoryDao.findByCategoryId(id);</span><br><span class="line">			<span class="keyword">if</span> (categoryList != <span class="keyword">null</span> &amp;&amp; categoryList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;目录下有子目录&quot;</span>);</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_USEING);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 如果目录下有文章 不让删除</span></span><br><span class="line">			List&lt;Article&gt; articleList = articleService.findByCategoryId(id);</span><br><span class="line">			<span class="keyword">if</span>(articleList != <span class="keyword">null</span> &amp;&amp; articleList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;目录下有文章&quot;</span>);</span><br><span class="line">				 <span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_USEING);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 删除目录</span></span><br><span class="line">			categoryDao.deleteById(id);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-5"><a href="#controller-5" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;删除目录&quot;,notes = &quot;提供多个id,批量删除&quot;)</span></span><br><span class="line">	<span class="meta">@DeleteMapping(&quot;/deleteCategoryInBatch&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">deleteCategoryInBatch</span><span class="params">(<span class="meta">@RequestParam(&quot;ids&quot; )</span><span class="meta">@ApiParam(name = &quot;ids&quot;,value = &quot;id列表&quot;)</span> List&lt;Integer&gt;ids)</span> </span>&#123;</span><br><span class="line">		categoryService.deleteCategoryInBatch(ids);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CategoryDao"><a href="#CategoryDao" class="headerlink" title="CategoryDao"></a>CategoryDao</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Category</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function">List&lt;Category&gt; <span class="title">findByCategoryId</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ArticleServiceImpl"><a href="#ArticleServiceImpl" class="headerlink" title="ArticleServiceImpl"></a>ArticleServiceImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Article&gt; <span class="title">findByCategoryId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		List&lt;Article&gt; articleList = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			articleList = articleDao.findByCategoryId(id);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> articleList;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分页升序"><a href="#分页升序" class="headerlink" title="分页升序"></a>分页升序</h2><h3 id="service-6"><a href="#service-6" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Page&lt;Category&gt; <span class="title">findAllSortbyno</span><span class="params">(Integer pageNum, Integer pageSize)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		<span class="comment">// 排序 分页</span></span><br><span class="line">		Pageable page = PageRequest.of(pageNum, pageSize, Direction.ASC, <span class="string">&quot;no&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> categoryDao.findAll(page);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-6"><a href="#controller-6" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;查询目录&quot;,notes = &quot;分页并且顺序查询&quot; )</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/find/&#123;pageNum&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findAllSortbyno</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;pageNum&quot;,value = &quot;当前页&quot;,required = true)</span> <span class="meta">@PathVariable(&quot;pageNum&quot;)</span><span class="keyword">int</span> pageNum,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;pageSize&quot;,value = &quot;每页数量&quot;,required = true)</span> <span class="meta">@PathVariable(&quot;pageSize&quot;)</span> <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">		Page&lt;Category&gt; page = categoryService.findAllSortbyno(pageNum, pageSize);</span><br><span class="line">		List&lt;Category&gt; content = page.getContent();</span><br><span class="line">		<span class="keyword">long</span> total = page.getTotalElements();</span><br><span class="line">		Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;total&quot;</span>, total);</span><br><span class="line">		map.put(<span class="string">&quot;content&quot;</span>, content);</span><br><span class="line">		<span class="keyword">return</span> Result.success(map);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="更新分类序号"><a href="#更新分类序号" class="headerlink" title="更新分类序号"></a>更新分类序号</h2><h3 id="service-7"><a href="#service-7" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCategoryNo</span><span class="params">(Integer id, <span class="keyword">int</span> no)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		Category category = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			category = categoryDao.findById(id).get();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			 <span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_NONE);</span><br><span class="line">		&#125;</span><br><span class="line">		category.setNo(no);</span><br><span class="line">		categoryDao.save(category);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-7"><a href="#controller-7" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;更新分类排序&quot;,notes = &quot;改变排序字段&quot;)</span></span><br><span class="line">	<span class="meta">@PutMapping(&quot;/update/&#123;id&#125;/&#123;no&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">updateCategoryNo</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;id&quot;,value = &quot;分类id&quot;,required = true)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;no&quot;,value = &quot;排序字段&quot;,required = true)</span>  <span class="meta">@PathVariable(&quot;no&quot;)</span> <span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">		categoryService.updateCategoryNo(id, no);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<h1 id="文章模块"><a href="#文章模块" class="headerlink" title="文章模块"></a>文章模块</h1><h2 id="接口-3"><a href="#接口-3" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//发布资讯或者编辑资讯</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveOrUpdateArticle</span><span class="params">(Article article)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//分页获取所有资讯</span></span><br><span class="line">	<span class="comment">//pageNum:页码，pageSize：一页显示多少条数据</span></span><br><span class="line">	<span class="function">Page&lt;Article&gt; <span class="title">findAll</span><span class="params">(Integer pageNum,Integer pageSize)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//批量删除资讯</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteArticleInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//管理员审核资讯</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateArticleStatus</span><span class="params">(Integer id,String status)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查询分类下的文章</span></span><br><span class="line">	<span class="function">List&lt;Article&gt; <span class="title">findByCategoryId</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加-更新"><a href="#添加-更新" class="headerlink" title="添加/更新"></a>添加/更新</h2><h3 id="service-8"><a href="#service-8" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdateArticle</span><span class="params">(Article article)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		Integer id = article.getId();</span><br><span class="line">		String title = article.getTitle();</span><br><span class="line">		<span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (title == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(title.trim())) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.PARAM_IS_BLANK);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 还需要判断标题是否已经存在</span></span><br><span class="line">			article.setPublishTime(<span class="keyword">new</span> Date());</span><br><span class="line">			article.setReadTimes(<span class="number">0</span>); <span class="comment">// 阅读次数 查看文章详情时 阅读次数+1</span></span><br><span class="line">			article.setStatus(<span class="number">0</span>); <span class="comment">// 未审核</span></span><br><span class="line">			article.setThumbDown(<span class="number">0</span>); <span class="comment">// 点踩数</span></span><br><span class="line">			article.setThumbUp(<span class="number">0</span>); <span class="comment">// 点赞数</span></span><br><span class="line">			articleDao.save(article);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Article target = articleDao.findById(id).get();</span><br><span class="line">			NotNullNameUtil.getNotNullNames(article, target);</span><br><span class="line">			articleDao.save(target);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-8"><a href="#controller-8" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;新增文章&quot;, notes = &quot;新增文章，需要json格式的字符串&quot;)</span></span><br><span class="line">	<span class="meta">@PostMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">saveOrUpdateArticle</span><span class="params">(<span class="meta">@RequestBody</span> Article article)</span> </span>&#123;</span><br><span class="line">		articleService.saveOrUpdateArticle(article);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;category&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;666&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;readTimes&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;论corejava的学习&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分页-1"><a href="#分页-1" class="headerlink" title="分页"></a>分页</h2><h3 id="service-9"><a href="#service-9" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Page&lt;Article&gt; <span class="title">findAll</span><span class="params">(Integer pageNum, Integer pageSize)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> articleDao.findAll(PageRequest.of(pageNum, pageSize));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>###controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;分页查询文章&quot;, notes = &quot;提供当前页码和每页显示条数&quot;)</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;&#123;pageNum&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;pageNum&quot;,value = &quot;当前页&quot;,required = true,defaultValue = &quot;0&quot;)</span>	<span class="meta">@PathVariable(&quot;pageNum&quot;)</span> <span class="keyword">int</span> pageNum, </span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;pageSize&quot;,value = &quot;每页条数&quot;,required = true,defaultValue = &quot;5&quot;)</span>	<span class="meta">@PathVariable(&quot;pageSize&quot;)</span> <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//返回完整分页信息（包括总条数，上一页下一页等。）</span></span><br><span class="line">		Page&lt;Article&gt; page = articleService.findAll(pageNum, pageSize);</span><br><span class="line">		<span class="comment">//此处为了页面效果暂时只返回数据  ，可自行调整</span></span><br><span class="line">		List&lt;Article&gt; content = page.getContent();</span><br><span class="line">		<span class="keyword">long</span> total = page.getTotalElements();</span><br><span class="line">		Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;content&quot;</span>, content);</span><br><span class="line">		map.put(<span class="string">&quot;total&quot;</span>, total);</span><br><span class="line">		<span class="keyword">return</span> Result.success(map);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="审核"><a href="#审核" class="headerlink" title="审核"></a>审核</h2><h3 id="service-10"><a href="#service-10" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateArticleStatus</span><span class="params">(Integer id, Integer status)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		Article article = articleDao.findById(id).get();</span><br><span class="line">		article.setStatus(status);</span><br><span class="line">		articleDao.save(article);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="controller-9"><a href="#controller-9" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;修改文章状态&quot;, notes = &quot;提供id和status&quot;)</span></span><br><span class="line">	<span class="meta">@PutMapping(&quot;&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">updateArticleStatus</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;id&quot;,value = &quot;文章id&quot;,required = true)</span>	<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;status&quot;,value = &quot;审核状态&quot;,required = true)</span> <span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status)</span> </span>&#123;</span><br><span class="line">		articleService.updateArticleStatus(id, status);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="批量删除-2"><a href="#批量删除-2" class="headerlink" title="批量删除"></a>批量删除</h2><h3 id="service-11"><a href="#service-11" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量删除文章 以及评论</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteArticleInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		List&lt;Article&gt; articleList = articleDao.findAllById(ids);</span><br><span class="line">		<span class="keyword">if</span> (articleList == <span class="keyword">null</span> || articleList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_NONE);</span><br><span class="line">		&#125;</span><br><span class="line">		articleDao.deleteInBatch(articleList);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-10"><a href="#controller-10" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;批量删除文章&quot;, notes = &quot;提供id集合&quot;)</span></span><br><span class="line">	<span class="meta">@DeleteMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">deleteBatch</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@RequestParam(&quot;ids&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;ids&quot;,value = &quot;文章id&quot;,required = true)</span> List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">		articleService.deleteArticleInBatch(ids);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处测试cascade可用，但是web不可用，删了表重建可解决</p>
</blockquote>
<h2 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h2><p>此处有用户外键，需要处理用户删除时，文章的处理，置为空</p>
<h1 id="评论模块-1"><a href="#评论模块-1" class="headerlink" title="评论模块"></a>评论模块</h1><h2 id="接口-4"><a href="#接口-4" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//分页获取所有评论</span></span><br><span class="line">	<span class="function">Page&lt;Comment&gt; <span class="title">findAll</span><span class="params">(Integer pageNum, Integer pageSize)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//新增评论或者更新评论</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveOrUpdateComment</span><span class="params">(Comment comment)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//批量删除评论</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteCommentInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//根据资讯id分页获取所有评论</span></span><br><span class="line">	<span class="function">Page&lt;Comment&gt; <span class="title">findAllByArticleId</span><span class="params">(Integer articleId,Integer pageNum, Integer pageSize)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="新增-1"><a href="#新增-1" class="headerlink" title="新增"></a>新增</h2><h3 id="service-12"><a href="#service-12" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveOrUpdateComment</span><span class="params">(Comment comment)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		String content = comment.getContent();</span><br><span class="line">		<span class="keyword">if</span>(content == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.PARAM_IS_BLANK);</span><br><span class="line">		&#125;</span><br><span class="line">		comment.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">		<span class="comment">// 评论不需要修改</span></span><br><span class="line">		commentDao.save(comment);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-11"><a href="#controller-11" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;添加评论&quot;,notes = &quot;参数为json格式&quot;)</span></span><br><span class="line">	<span class="meta">@PostMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">saveOrUpdateComment</span><span class="params">(<span class="meta">@RequestBody</span> Comment comment)</span> </span>&#123;</span><br><span class="line">		commentService.saveOrUpdateComment(comment);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;article&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">4</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;comment&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">7</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;你也一样&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;user&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="service-13"><a href="#service-13" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Page&lt;Comment&gt; <span class="title">findAll</span><span class="params">(Integer pageNum, Integer pageSize)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> commentDao.findAll(PageRequest.of(pageNum, pageSize));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-12"><a href="#controller-12" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;分页查询评论&quot;, notes = &quot;提供当前页码和每页显示条数&quot;)</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;&#123;pageNum&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;pageNum&quot;,value = &quot;当前页&quot;,required = true,defaultValue = &quot;0&quot;)</span>	<span class="meta">@PathVariable(&quot;pageNum&quot;)</span> <span class="keyword">int</span> pageNum, </span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;pageSize&quot;,value = &quot;每页条数&quot;,required = true,defaultValue = &quot;5&quot;)</span>	<span class="meta">@PathVariable(&quot;pageSize&quot;)</span> <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//返回完整分页信息（包括总条数，上一页下一页等。）</span></span><br><span class="line">		Page&lt;Comment&gt; page = commentService.findAll(pageNum, pageSize);</span><br><span class="line">		<span class="comment">//此处为了页面效果暂时只返回数据  ，可自行调整</span></span><br><span class="line">		List&lt;Comment&gt; content = page.getContent();</span><br><span class="line">		<span class="keyword">long</span> total = page.getTotalElements();</span><br><span class="line">		Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(<span class="string">&quot;content&quot;</span>, content);</span><br><span class="line">		map.put(<span class="string">&quot;total&quot;</span>, total);</span><br><span class="line">		<span class="keyword">return</span> Result.success(map);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<p><strong>jpa嵌套查询 栈溢出</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Article.java</span><br><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Comment&gt; comments = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br></pre></td></tr></table></figure>



<h2 id="批量删除-3"><a href="#批量删除-3" class="headerlink" title="批量删除"></a>批量删除</h2><h3 id="service-14"><a href="#service-14" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCommentInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		<span class="comment">// 父子评论 级联删除即可</span></span><br><span class="line">		List&lt;Comment&gt; commentList = commentDao.findAllById(ids);</span><br><span class="line">		commentDao.deleteAll(commentList);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-13"><a href="#controller-13" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;批量删除评论&quot;, notes = &quot;提供id集合&quot;)</span></span><br><span class="line">	<span class="meta">@DeleteMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">deleteBatch</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@RequestParam(&quot;ids&quot;)</span></span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;ids&quot;,value = &quot;评论id&quot;,required = true)</span> List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">		commentService.deleteCommentInBatch(ids);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分页某文章评论"><a href="#分页某文章评论" class="headerlink" title="分页某文章评论"></a>分页某文章评论</h2><h3 id="service-15"><a href="#service-15" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Page&lt;Comment&gt; <span class="title">findAllByArticleId</span><span class="params">(Integer articleId, Integer pageNum, Integer pageSize)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> commentDao.findAllByArticleId(articleId,PageRequest.of(pageNum, pageSize));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-14"><a href="#controller-14" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;分页查询某文章评论&quot;, notes = &quot;提供当前页码和每页显示条数,文章id&quot;)</span></span><br><span class="line">		<span class="meta">@GetMapping(&quot;&#123;articleId&#125;/&#123;pageNum&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Result <span class="title">findAllByArticleId</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;articleId&quot;,value = &quot;文章id&quot;,required = true,defaultValue = &quot;0&quot;)</span>	<span class="meta">@PathVariable(&quot;articleId&quot;)</span> <span class="keyword">int</span> articleId,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;pageNum&quot;,value = &quot;当前页&quot;,required = true,defaultValue = &quot;0&quot;)</span>	<span class="meta">@PathVariable(&quot;pageNum&quot;)</span> <span class="keyword">int</span> pageNum, </span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;pageSize&quot;,value = &quot;每页条数&quot;,required = true,defaultValue = &quot;5&quot;)</span>	<span class="meta">@PathVariable(&quot;pageSize&quot;)</span> <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">			<span class="comment">//返回完整分页信息（包括总条数，上一页下一页等。）</span></span><br><span class="line">			Page&lt;Comment&gt; page = commentService.findAllByArticleId(articleId,pageNum, pageSize);</span><br><span class="line">			<span class="comment">//此处为了页面效果暂时只返回数据  ，可自行调整</span></span><br><span class="line">			List&lt;Comment&gt; content = page.getContent();</span><br><span class="line">			<span class="keyword">long</span> total = page.getTotalElements();</span><br><span class="line">			Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">			map.put(<span class="string">&quot;content&quot;</span>, content);</span><br><span class="line">			map.put(<span class="string">&quot;total&quot;</span>, total);</span><br><span class="line">			<span class="keyword">return</span> Result.success(map);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CommentDao"><a href="#CommentDao" class="headerlink" title="CommentDao"></a>CommentDao</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentDao</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Comment</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">	<span class="function">Page&lt;Comment&gt; <span class="title">findAllByArticleId</span><span class="params">(Integer articleId, Pageable page)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="security"><a href="#security" class="headerlink" title="security"></a>security</h1>]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>briup</tag>
        <tag>vanse_public</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>out_before</title>
    <url>/archives/project/out-before.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>项目前置知识 springboot+ssm+mysql</li>
<li>整理人: vanse(刘聪)</li>
<li>时间: 2021/12/26</li>
<li>对象: 甘肃农大2018级(钉钉授课)</li>
</ul>
<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a><a href="http://c.biancheng.net/mysql/10/">mysql</a></h1><p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</p>
<ul>
<li>本项目中只使用到基本的单表操作和多表查询</li>
</ul>
<h2 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `demo_user` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `gender` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别 0男 1女&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20220102181535876.png" alt="image-20220102181535876"></p>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> demo_user</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20220102181647318.png" alt="image-20220102181647318"></p>
<h2 id="单表操作"><a href="#单表操作" class="headerlink" title="单表操作"></a>单表操作</h2><blockquote>
<p>mysql 默认自动提交</p>
</blockquote>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> demo_user(id,username,password,gender)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;000&#x27;</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>批量添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> demo_user(id,username,password,gender)</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">	(<span class="keyword">NULL</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;000&#x27;</span>,<span class="number">0</span>),</span><br><span class="line">	(<span class="keyword">NULL</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="string">&#x27;000&#x27;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE demo_user <span class="keyword">SET</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> demo_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>批量删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> demo_user <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_user</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> demo_user <span class="keyword">where</span> id <span class="keyword">in</span>(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>



<h2 id="多表操作"><a href="#多表操作" class="headerlink" title="多表操作"></a>多表操作</h2><p>表和表的关系</p>
<ul>
<li>一对一</li>
<li>一对多</li>
<li>多对多</li>
</ul>
<h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><blockquote>
<p>新增表 demo_qq  一个用户有多个qq号  外键一般设置在多的一方</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `demo_qq` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `account` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;qq号&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;所属用户&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `user_id` (`user_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `demo_qq_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `demo_user` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>



<h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> demo_qq(id,account,password,user_id)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;40255895&#x27;</span>,<span class="string">&#x27;000&#x27;</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p><code>注意</code></p>
<p>从表demo_qq插入外键时有约束,外键值是必须demo_user中已有的值,否则会报错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> demo_qq(id,account,password,user_id)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;40255895&#x27;</span>,<span class="string">&#x27;000&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="operator">&gt;</span> <span class="number">1452</span> <span class="operator">-</span> Cannot <span class="keyword">add</span> <span class="keyword">or</span> update a child <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`st`.`demo_qq`, <span class="keyword">CONSTRAINT</span> `demo_qq_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `demo_user` (`id`))</span><br><span class="line"><span class="operator">&gt;</span> 时间: <span class="number">0.002</span>s</span><br></pre></td></tr></table></figure>



<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><p>从表demo_qq中的数据可以直接删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> demo_qq <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>主表demo_user中</p>
<ul>
<li><p>如果数据没有被从表引用,可以直接删除</p>
</li>
<li><p>如果数据被从表引用 无法删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> demo_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"><span class="operator">&gt;</span> <span class="number">1451</span> <span class="operator">-</span> Cannot <span class="keyword">delete</span> <span class="keyword">or</span> update a parent <span class="type">row</span>: a <span class="keyword">foreign</span> key <span class="keyword">constraint</span> fails (`st`.`demo_qq`, <span class="keyword">CONSTRAINT</span> `demo_qq_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `demo_user` (`id`))</span><br><span class="line"><span class="operator">&gt;</span> 时间: <span class="number">0.004</span>s</span><br></pre></td></tr></table></figure>

<p><strong>解决</strong></p>
<ul>
<li>先删除从表中引用的从表数据,再删除主表数据</li>
<li>外键设置<ul>
<li>CASCADE 删除主表数据,从表中引用的数据也级联删除</li>
<li>SET NULL 删除主表数据,从表中引用的外键置空</li>
</ul>
</li>
<li>逻辑外键</li>
</ul>
</li>
</ul>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><p>主表和从表正常修改</p>
<h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><p>单表: 主表和从表都可正常查找</p>
<p>多表: </p>
<ul>
<li><p>子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_id <span class="keyword">from</span> demo_qq  #<span class="number">4</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> demo_user <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">4</span></span><br></pre></td></tr></table></figure></li>
<li><p>多表联查</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">u.id <span class="keyword">as</span> uid,u.username,u.password,u.gender,</span><br><span class="line">q.id <span class="keyword">as</span> qid,q.account,q.password <span class="keyword">as</span> qpassword</span><br><span class="line"><span class="keyword">FROM</span> demo_user u,demo_qq q</span><br><span class="line"><span class="keyword">WHERE</span> u.id <span class="operator">=</span> q.user_id</span><br></pre></td></tr></table></figure>

<p><code>将来设置外键,最好可以区别属性名称</code></p>
</li>
</ul>
<h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><blockquote>
<p>新增角色表 用户和角色是多对多的关系</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `demo_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;角色名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>多对多需要创建桥表确定关系</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `demo_user_role` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  KEY `user_id` (`user_id`),</span><br><span class="line">  KEY `role_id` (`role_id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `demo_user_role_ibfk_2` <span class="keyword">FOREIGN</span> KEY (`role_id`) <span class="keyword">REFERENCES</span> `demo_role` (`id`),</span><br><span class="line">  <span class="keyword">CONSTRAINT</span> `demo_user_role_ibfk_1` <span class="keyword">FOREIGN</span> KEY (`user_id`) <span class="keyword">REFERENCES</span> `demo_user` (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure>



<h4 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h4><p>正常往中间表添加值即可(有外键约束)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> demo_user_role(id,user_id,role_id)</span><br><span class="line"> <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="number">4</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h4><p>正常删除中间表即可</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> demo_user_role <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h4 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h4><p>正常修改即可例如更改用户的角色</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE demo_user_role</span><br><span class="line"><span class="keyword">SET</span> role_id <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>





<h4 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h4><p>查出用户的角色,需要多表查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">u.username,r.name</span><br><span class="line"><span class="keyword">from</span> demo_user u,demo_role r,demo_user_role ur</span><br><span class="line"><span class="keyword">where</span> u.id <span class="operator">=</span> ur.user_id <span class="keyword">and</span> r.id <span class="operator">=</span> ur.role_id</span><br></pre></td></tr></table></figure>





<h1 id="maven"><a href="#maven" class="headerlink" title="maven"></a><a href="https://www.runoob.com/maven/maven-tutorial.html">maven</a></h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>Maven是Apache下的一个开源项目，它是一个创新的项目管理工具，它用于对Java项目进行项目构建、依赖管理及项目信息管理。（开源、免费、Java语言实现）</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914155455940.png" alt="image-20200914155455940"></p>
<p>Maven基于项目对象模型(POM，Project Object Model)，对项目进行抽象，把一个项目从创建到部署，中间所经历的各个阶段，都进行单独定义，这样就可以对一个项目进行各个环节的程序化管理，并且允许用户进行扩展，满足用户定制化的需求。</p>
<blockquote>
<p>总结：Maven就是一个软件工具，它的主要作用就是对项目进行管理</p>
</blockquote>
<p>==思考，Maven和SVN都是软件工具，它们在项目中的作用分别是什么？==</p>
<h2 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h2><p>Maven在项目中的作用很多，这些作用主要集中在以下俩个方面：</p>
<ol>
<li>项目构建</li>
<li>依赖管理</li>
</ol>
<p><strong>项目构建</strong>，是指一个项目清理、编译、测试、报告、打包、安装、部署等过程，Maven中把这些过程进行了<strong>标准化</strong>管理，可以通过一个命令，自动按照顺序，依次执行这里面的每一个步骤。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914210444981.png" alt="image-20200914210444981"></p>
<p>其中，</p>
<ol>
<li>清理clean：将之前编译得到的旧文件class字节码文件删除</li>
<li>编译compile：将java源程序编译成class字节码文件</li>
<li>测试test：自动测试，自动调用junit程序</li>
<li>报告report：测试程序执行的结果</li>
<li>打包package：动态Web工程打War包，java工程打jar包</li>
<li>安装install：Maven特定的概念，将打包得到的文件复制到maven仓库中的指定位置</li>
<li>部署deploy：将工程生成的结果放到服务器中或者容器中，使其可以运行</li>
</ol>
<blockquote>
<p>注意，Maven允许在每个步骤中，除了默认的操作外，还可以通过插件来定义用户指定的操作</p>
</blockquote>
<p>==思考，在Eclipse中，对一个普通项目，是如果进行项目构建的？==</p>
<p><strong>依赖管理</strong>，是指Maven将项目中所依赖的外部jar包，进行统一的管理。</p>
<p>之前自己手动管理这些jar时，所遇到的问题：</p>
<ul>
<li>需要到不同的官网下载不同的jar</li>
<li>需要自己测试多个jar之间是否版本兼容</li>
<li>需要自己分析依赖关系，例如a.jar依赖b.jar，那么我们使用a.jar的时候也要把b.jar下载下来</li>
<li>需要自己管理jar和其对应的源码和javadoc</li>
<li>…..</li>
</ul>
<blockquote>
<p>使用Maven后，这些问题都统统帮我们解决了，它会对项目中依赖的jar进行自动管理</p>
</blockquote>
<p>==思考，在Eclipse中，对一个普通项目，是如果进行依赖管理的？==</p>
<h2 id="1-3-下载"><a href="#1-3-下载" class="headerlink" title="1.3 下载"></a>1.3 下载</h2><p><a href="https://maven.apache.org/">Maven官网</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914165659531.png" alt="image-20200914165659531"></p>
<p><a href="https://maven.apache.org/download.cgi">Maven下载</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914165824685.png" alt="image-20200914165824685"></p>
<h2 id="1-4-安装"><a href="#1-4-安装" class="headerlink" title="1.4 安装"></a>1.4 安装</h2><p>1、安装JDK，并且配置环境变量JAVA_HOME</p>
<ul>
<li>JDK必须是1.7以上</li>
<li>==JAVA_HOME中配置的路径一定是JDK的路径，而不是JRE的路径==</li>
</ul>
<p>2、下载好的Maven，在指定目录解压即可</p>
<ul>
<li>Maven所在路径中最好不要出现中文、空格<br><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914170734336.png" alt="image-20200914170734336"></li>
</ul>
<p>3、配置Maven的环境变量</p>
<ul>
<li>M2_HOME=D:\briup\apache-maven-3.6.3</li>
</ul>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914170946623.png" alt="image-20200914170946623"></p>
<p>4、配置Path变量</p>
<ul>
<li><p>Path=%M2_HOME%\bin;%Path%</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914171139809.png" alt="image-20200914171139809"></p>
</li>
</ul>
<p>5、测试安装是否成功</p>
<ul>
<li><p><strong>重新</strong>打开一个新终端窗口</p>
</li>
<li><p>输入命令：<code>mvn -v</code></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914171335774.png" alt="image-20200914171335774"></p>
</li>
</ul>
<h2 id="1-5-仓库"><a href="#1-5-仓库" class="headerlink" title="1.5 仓库"></a>1.5 仓库</h2><p>Maven中的仓库，是用来存放项目所依赖的jar的，仓库主要分为三种：</p>
<ul>
<li>本地仓库</li>
<li>中央仓库</li>
<li>私有仓库</li>
</ul>
<p><strong>本地仓库：</strong></p>
<p>项目中所依赖的第三方jar，最终都会下载存放到自己电脑中的本地仓库中，本地仓库的位置可以自己指定，也可以使用默认路径：<code>$&#123;user.home&#125;/.m2/repository</code></p>
<p>例如，</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914172300522.png" alt="image-20200914172300522"></p>
<p><strong>中央仓库：</strong></p>
<p>这是Maven官方提供的远程仓库，仓库中存放了，日常项目中所会使用到的几乎所有jar包，当我们自己电脑中的本地仓库中，没有要依赖的jar的时候，Maven默认会从中央仓库中查找并下载需要的jar包</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914183356292.png" alt="image-20200914183356292"></p>
<blockquote>
<p>注意，maven始终会先去本地仓库中查看需要的jar包，如果没有再到中央仓库中查找</p>
</blockquote>
<blockquote>
<p>注意，从中央仓库中下载的jar包，会自动存放到本地仓库中</p>
</blockquote>
<p>Maven的中央仓库，还有提供了WEB形式的查找和下载的的地方：</p>
<p><a href="https://mvnrepository.com/">Maven中央仓库</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914193939237.png" alt="image-20200914193939237"></p>
<p><strong>私有仓库：</strong></p>
<p>私有仓库，也称为私服，一般是由公司自己设立的，只为本公司内部共享使用。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914190844493.png" alt="image-20200914190844493"></p>
<p>项目中依赖的jar，maven首先还是会先到本地仓库中进行查找，如果没有会去私服中查找，如果私服中没有，那么私服会自动去远程仓库中去下载。</p>
<blockquote>
<p>注意，最终下载到jar后，这个jar还是会先存放到本地仓库，然后项目中去引用这个本地仓库的jar，就是把这个jar的路径自动配置到项目的classpath中。</p>
</blockquote>
<hr>
<p>可以使用<code>Nexus</code>软件工具，来搭建局域网中的私有的远程仓库，也就是私服。（了解即可）</p>
<p><a href="https://www.sonatype.com/download-nexus-repo-oss">Nexus官网下载</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914192141808.png" alt="image-20200914192141808"></p>
<h2 id="1-6-配置"><a href="#1-6-配置" class="headerlink" title="1.6 配置"></a>1.6 配置</h2><p>maven会先找 <code>$&#123;user.home&#125;/.m2/settings.xml</code> ，如果找不到，会再找安装目录的 <code>\conf\settings.xml</code></p>
<p>1、<strong>仓库配置：</strong></p>
<p>因为默认情况下，本地仓库的位置是：<code>$&#123;user.home&#125;/.m2/repository</code> ，如果想修改这个地址，可以在maven的配置文件中，进行配置： <code>D:\briup\apache-maven-3.6.3\conf\settings.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/briup/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914192605993.png" alt="image-20200914192605993"></p>
<blockquote>
<p>注意，这里写上你希望的本地仓库路径即可，如果不写，那么就是默认值</p>
</blockquote>
<p>2、<strong>镜像配置：</strong></p>
<p>Maven的安装目录中，有一个jar包：<code>D:\briup\apache-maven-3.6.3\lib\maven-model-builder -3.6.3.jar</code></p>
<p>这个jar中，有一个superpom（超级pom），我们的maven项目会自动继承这个superpom文件，而在superpom中，配置了中央仓库的地址：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914194354853.png" alt="image-20200914194354853"></p>
<p><code>pom-4.0.0.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">&quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- START SNIPPET: superpom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/target<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/classes<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;-$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/test-classes<span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/scripts<span class="tag">&lt;/<span class="name">scriptSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/java<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.basedir&#125;/src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- <span class="doctag">NOTE:</span> These plugins will be removed from future versions of the super POM --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- They are kept for the moment as they are very unlikely to conflict with lifecycle mappings (MNG-4453) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-antrun-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2-beta-5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-release-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/site<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- <span class="doctag">NOTE:</span> The release profile will be removed from future versions of the super POM --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>release-profile<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>performRelease<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-javadocs<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">updateReleaseInfo</span>&gt;</span>true<span class="tag">&lt;/<span class="name">updateReleaseInfo</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- END SNIPPET: superpom --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>其中，最前面的俩个配置，就是配置了中央仓库的地址：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意1，在该配置中，中央仓库的ID为central</p>
<p>注意2，中央仓库的地址为：<a href="https://repo.maven.apache.org/maven2">https://repo.maven.apache.org/maven2</a></p>
<p>直接访问这个地址，也能看到中央仓库中，存放的所有jar包：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914194241877.png" alt="image-20200914194241877"></p>
<blockquote>
<p>注意，其他Maven项目都会默认继承这个superpom文件，那么这些项目都会默认访问这个指定地址的中央仓库，但是这个中央仓库访问速度较慢，所以需要配置一个国内的<strong>镜像</strong>，来提高jar的下载速度。</p>
</blockquote>
<p>在<code>settings.xml</code>文件中继续配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914195026044.png" alt="image-20200914195026044"></p>
<p>此配置表示，当Maven发送请求到ID为<code>central</code>的远程仓库的时候，该请求会自动转发给镜像中指定的地址，也就是这里配置的阿里云搭建的Nexus私服地址，这样会大大提交Maven下载jar的速度！</p>
<blockquote>
<p>注意，在settings.xml中配置镜像的时候，一定要看准要配置的标签位置！</p>
</blockquote>
<h2 id="1-7-坐标"><a href="#1-7-坐标" class="headerlink" title="1.7 坐标"></a>1.7 坐标</h2><p>在maven中，每一个项目都有三个坐标（GAV），用来唯一标识这个项目</p>
<ul>
<li><code>groupId</code>，该元素定义当前Maven项目隶属的实际项目</li>
<li><code>artifactId</code>，该元素定义当前maven项目表示的具体子项目（模块）</li>
<li><code>version</code>，该元素定义当前maven项目的具体版本</li>
</ul>
<p>例如，<code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 1.公司或者组织域名倒序+项目名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.briup.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 2.模块名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mvn-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 3.版本 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>mvn-test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!-- 配置当前项目中，所依赖的其他maven项目（jar包） --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>	</span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明，在该文件中：</p>
<p>1、先定义了当前maven项目自己的三个坐标值</p>
<p>2、又声明了当前maven项目所依赖的另一个maven项目（junit）的三个坐标值</p>
<p>3、<code>&lt;dependency&gt;</code> 标签表示依赖的意思</p>
<p>4、<code>&lt;scope&gt;</code>是可选的标签，用来指定这个依赖的作用范围，test表示只有在测试的时候才有效</p>
<p>maven项目就是通过坐标，来定位仓库中所依赖的其他maven项目的位置，坐标和jar在仓库位置的对应关系：</p>
<p><code>[groupId]\[artifactId]\[version]\[artifactId]-[version].jar</code></p>
<p>例如，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个maven项目的jar，在仓库中的位置是：</p>
<p><code>D:\briup\repository\junit\junit\4.13\junit-4.13.jar</code></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914205921112.png" alt="image-20200914205921112"></p>
<blockquote>
<p>注意，坐标在仓库中，对应的就是文件夹</p>
</blockquote>
<blockquote>
<p>注意，在maven的世界里面，每一个项目都有唯一的标识，就是这三个坐标来确定的！</p>
</blockquote>
<h2 id="1-8-结构"><a href="#1-8-结构" class="headerlink" title="1.8 结构"></a>1.8 结构</h2><p>在Maven中，要求一个maven项目<strong>必须</strong>是固定的目录结构：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200914211537666.png" alt="image-20200914211537666"></p>
<p>其中：</p>
<p><code>project</code>，项目的主目录，目录名表示项目名（<strong>必须</strong>）</p>
<p><code>src/main/java/</code>，存放项目中源代码的目录（<strong>必须</strong>）</p>
<p><code>src/main/resources</code>，存放项目中资源文件的目录（<strong>必须</strong>）</p>
<p><code>src/test/java/</code>，存放测试代码的目录（<strong>可选</strong>）</p>
<p><code>src/test/resources/</code>，存放测试代码资源文件的目录（<strong>可选</strong>）</p>
<p><code>pom.xml</code>，maven项目的配置文件，里面是对maven项目信息的详细描述（<strong>必须</strong>）</p>
<h2 id="1-9-pom-xml"><a href="#1-9-pom-xml" class="headerlink" title="1.9 pom.xml"></a>1.9 pom.xml</h2><p>pom.xml文件，是maven项目的核心配置文件，里面是对当前项目的详细描述</p>
<p>例如，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.briup.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mvn-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>mvn-test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!-- 配置当前项目中，所依赖的其他maven项目（jar包） --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h1 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h1><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Servlet技术可以扩展服务器端的功能，让java代码在服务器端也能成为一种资源（动态资源），客户端浏览器可以通过指定的资源地址（URI），来访问这个java代码（Servlet），同时在Servlet代码中，还可以使用IO流把结果写回给浏览器。</p>
<p>按照Servlet规范要求，编写一个Servlet程序，只需要让自己的类实现<code>javax.servlet.Servlet</code>接口就可以了，但是该接口也有一些默认的实现类，所以除了实现接口的方式之外，我们也可以继承它默认的几个实现类，并且重写指定方法，也同样可以完成Servlet程序的编写。</p>
<blockquote>
<p>idea中导入servlet依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p><code>javax.servlet.Servlet</code></p>
<p>它是Servlet技术的核心接口，所有的Servlet程序，都必须是该接口的实现类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化servlet对象的时候被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回ServletConfig对象,该对象封装了Servlet的配置信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问servlet对象的时候被调用（最重要的方法）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回servlet相关信息,比如作者、版本、版权等</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁servlet对象的时候被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在这五个方法中，最重要的是 <code>service(ServletRequest req, ServletResponse res)</code>方法，因为当客户端浏览器通过指定地址访问该Servlet的时候，Tomcat会自动调用Servlet中的service方法。</p>
<p>service方法的作用就是处理客户端浏览器发送的请求，并且写回本次请求的响应内容，所以我们在重写的service方法中，可以按照当前的功能需求，来完成代码的编写。</p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//接收请求中携带的参数，指定参数名为name</span></span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//设置本次响应回去内容的类型，并且指定了编码，这是给浏览器看的</span></span><br><span class="line">		res.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//通过响应对象获取输出流</span></span><br><span class="line">		PrintWriter out = res.getWriter();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//给浏览器写回内容</span></span><br><span class="line">		out.println(<span class="string">&quot;hello! &quot;</span>+name);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>web.xml</code>中进行配置，目的是为了告诉tomcat，这个servlet对应的URI地址是什么，其实就是一种映射关系的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.briup.test.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>通过url地址访问此Servlet，并且携带参数：</p>
<p><a href="http://127.0.0.1:8989/servlet-test/hello?name=tom">http://127.0.0.1:8989/servlet-test/hello?name=tom</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200929165014319.png" alt="image-20200929165014319"></p>
<blockquote>
<p>可以看出，响应头信息中的Content-Type字段值，就是我们在Servlet中进行设置的值</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200929165110420.png" alt="image-20200929165110420"></p>
<blockquote>
<p>火狐浏览器中还提供了详细的字段解释说明，在电脑联网的时候，可以点击字段前面的问号进行查看</p>
</blockquote>
<h3 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h3><p><code>javax.servlet.GenericServlet</code></p>
<p>它是一个抽象类，它对Servlet接口中的方法进行了默认实现，但是最重要的<code>service</code>方法并没有实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>,</span></span><br><span class="line"><span class="class">        <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameterNames();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        getServletContext().log(getServletName() + <span class="string">&quot;: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">        getServletContext().log(getServletName() + <span class="string">&quot;: &quot;</span> + message, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getServletName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，该类中，实现了Servlet接口中的init(ServletConfig config)方法，同时又重载了一个无参的init方法，并且有参数的init方法中又调用了这个重载的无参init方法。</p>
<p>由此可知，将来我们对Servlet进行初始化操作的时候，重写这个无参的init方法即可。</p>
</blockquote>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello-generic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloGenericServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		res.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = res.getWriter();</span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;hello!&quot;</span>+name);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里使用注解<code>@WebServlet</code>来代替web.xml中的映射配置，俩者的效果是一样的</p>
</blockquote>
<blockquote>
<p>注意，这种方式只要实现一个<code>service</code>方法即可，其他方法在父类中已经进行了默认实现</p>
</blockquote>
<p>通过url地址访问此Servlet，并且携带参数：</p>
<p><a href="http://127.0.0.1:8989/servlet-test/hello-generic?name=tom">http://127.0.0.1:8989/servlet-test/hello-generic?name=tom</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200929171544550.png" alt="image-20200929171544550"></p>
<h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p><code>javax.servlet.http.HttpServlet</code></p>
<p>它是一个抽象类，但是类中没有抽象方法。</p>
<p>它继承了 <code>GenericServlet</code>，对接收到的客户端请求，进行了细分，对应不同的请求类型：</p>
<ul>
<li>DELETE</li>
<li>HEAD</li>
<li>GET</li>
<li>OPTIONS</li>
<li>POST</li>
<li>PUT</li>
<li>TRACE</li>
</ul>
<p>分别使用不同的方法进行处理。</p>
<p>例如，当前如果是GET请求，那么就调用doGet方法进行处理，当前如果是POST请求，那么就调用doPost方法进行处理，所以在HttpServlet中，定义了很多doXxx方法，用来处理不同类型的请求。</p>
<p>源码较长，这里给出部分代码，能说明问题即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_DELETE = <span class="string">&quot;DELETE&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_HEAD = <span class="string">&quot;HEAD&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_GET = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_OPTIONS = <span class="string">&quot;OPTIONS&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_PUT = <span class="string">&quot;PUT&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_TRACE = <span class="string">&quot;TRACE&quot;</span>;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHead</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DispatcherType.INCLUDE.equals(req.getDispatcherType())) &#123;</span><br><span class="line">            doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            NoBodyResponse response = <span class="keyword">new</span> NoBodyResponse(resp);</span><br><span class="line">            doGet(req, response);</span><br><span class="line">            response.setContentLength();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_put_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(HttpServletRequest req,</span></span></span><br><span class="line"><span class="params"><span class="function">                            HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_delete_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOptions</span><span class="params">(HttpServletRequest req,</span></span></span><br><span class="line"><span class="params"><span class="function">            HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doTrace</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                    <span class="comment">// Invalid date header - proceed as if none was set</span></span><br><span class="line">                    ifModifiedSince = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(lStrings.getString(<span class="string">&quot;http.non_http&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意1，HttpServlet是抽象类，但是里面没有抽象方法</p>
<p>注意2，HttpServlet继承了GenericServlet，实现了service方法，并且对service方法进行了重载</p>
<p>注意3，实现的service方法中，对请求和响应进行了强制类型转换，将普通的请求和响应对象，强制转换成了针对HTTP协议的请求和响应，然后调用重载的service方法，将转换的请求和响应传入</p>
<p>注意4，重载后的service方法中，根据当前请求的类型（get、post获取其他），再调用对应的doXxx方法进行处理</p>
<p>注意5，doXxx方法中会有一些默认的实现，例如doGet方法中会默认返回<code>http.method_delete_not_supported</code></p>
<p>由以上代码可知，我们编写子类继承 <code>HttpServlet</code>，并且重写方法即可，如果需要处理GET方式的请求，那么就重写doGet方法，如果需要处理POST方式的请求，那么就重写doPost方法。</p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello-http-servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHttpServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = resp.getWriter();</span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;GET: hello！&quot;</span>+name);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = resp.getWriter();</span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;POST: hello！&quot;</span>+name);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在页面中编写一个表单，跳转表单提交的方式，来最终观察get和post方式发送请求后，Servlet中方法调用情况：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;hello-http-servlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">		用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据测试结果可知，当前页面中发送GET请求的时候，Servlet中的doGet方法被调用，当页面中发送POST请求的时候，Servlet中的doPost方法被调用</p>
</blockquote>
<h2 id="集成tomcat"><a href="#集成tomcat" class="headerlink" title="集成tomcat"></a>集成tomcat</h2><p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20220103133043937.png" alt="image-20220103133043937"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20220103133114835.png" alt="image-20220103133114835"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20220103133222346.png" alt="image-20220103133222346"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20220103133501639.png" alt="image-20220103133501639"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20220103133518468.png" alt="image-20220103133518468"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20220103133534530.png" alt="image-20220103133534530"></p>
<blockquote>
<p><a href="https://www.cnblogs.com/shej123/p/10312806.html">解决</a>Idea中整合tomcat乱码的问题 启动tomcat时添加vm参数  -Dfile.encoding=UTF-8</p>
</blockquote>
<h2 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h2><blockquote>
<p>HTTP协议中，定义了很多种请求的方式，但是浏览器默认情况下，只能发出GET方式请求和POST方式请求</p>
</blockquote>
<h3 id="常见情况"><a href="#常见情况" class="headerlink" title="常见情况"></a>常见情况</h3><p>在页面中，常见的发送GET方式请求的情况有：</p>
<ul>
<li>浏览器地址栏直接输入地址访问</li>
<li>超链接访问  <a href=""></li>
<li><code>&lt;image src=&quot;&quot;&gt;</code>访问图片</li>
<li>外部js文件的引入</li>
<li>外部css文件的引入</li>
<li>表单提交数据，method=”get”</li>
<li>在javascript代码中访问资源</li>
<li>ajax中设置请求为get方式</li>
<li>使用jsp相关标签访问资源</li>
</ul>
<p>在页面中，常见的发送POST方式请求的情况有：</p>
<ul>
<li>表单提交数据，method=”post”</li>
<li>ajax中设置请求为post方式</li>
</ul>
<blockquote>
<p>可以看出，浏览器中发出的请求，大多数都是GET方式请求</p>
</blockquote>
<h3 id="特点区别"><a href="#特点区别" class="headerlink" title="特点区别"></a>特点区别</h3><p>http协议下的请求格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1部分: 请求行   get /hello http 1.1			</span><br><span class="line">2部分: 请求头部/消息报头	</span><br><span class="line">3部分: \r\n</span><br><span class="line">4部分: 请求正文	参数放的位置</span><br></pre></td></tr></table></figure>



<p>GET方式传参数，参数在uri后面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /hello?name=tom HTTP1.1</span><br><span class="line">key: value</span><br><span class="line">key: value</span><br><span class="line">key: value</span><br><span class="line">.....</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GET方式传参，参数会显示在地址栏中，并且参数的长度也会被地址栏的长度而限制</p>
</blockquote>
<p>post方式传参，参数在请求正文中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /hello HTTP1.1</span><br><span class="line">key: value</span><br><span class="line">key: value</span><br><span class="line">key: value</span><br><span class="line">.....</span><br><span class="line">\r\n</span><br><span class="line">name=tom</span><br></pre></td></tr></table></figure>

<blockquote>
<p>POST方式传参，参数不会显示在地址中，而是在请求体中，并且参数长度并没有直接限制</p>
</blockquote>
<h2 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h2><blockquote>
<p>在Servlet中，一项重要的工作，就是接收页面请求中携带的参数。</p>
</blockquote>
<h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><p>虽然GET请求和POST请求携带参数的方式（位置）不同，但是由于Servlet底层API的封装，我们在Servlet中，通过请求（request）获取参数的方式都是一样的。</p>
<p>所以下面的示例中，都以GET方式传参的方式进行说明。</p>
<h3 id="单值"><a href="#单值" class="headerlink" title="单值"></a>单值</h3><p>接收请求中单一的参数值的时候，也就是一个参数名对应一个值，使用<code>getParameter</code>方法即可：</p>
<p><code>/param?name=tom&amp;age=20</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		String age = req.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		System.out.println(age);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，Servlet获取到的参数值，默认都是String类型的，如果需要可以自己进行类转换</p>
</blockquote>
<h3 id="多值"><a href="#多值" class="headerlink" title="多值"></a>多值</h3><p>一个参数名对应多个值，例如页面中的多选框，此时可以使用<code>getParameterValues</code>方法</p>
<p><code>/param?like=0&amp;like=1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String[] like = req.getParameterValues(<span class="string">&quot;like&quot;</span>);</span><br><span class="line">		System.out.println(Arrays.toString(like));</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，该方法返回是一个String类型数组，因为一个参数名可能会对应多个值</p>
</blockquote>
<h3 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h3><p>在一些特殊情况下，需要获取请求中携带的所有<strong>参数名</strong>，此时可以使用<code>getParameterNames</code>方法</p>
<p><code>/param?name=tom&amp;age=20&amp;like=0&amp;like=1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line">		<span class="keyword">while</span>(names.hasMoreElements())&#123;</span><br><span class="line">			String paramName = names.nextElement();</span><br><span class="line">			System.out.println(paramName);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">like</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，<code>hasMoreElements</code>可以判断是否有下一个元素，<code>nextElement</code>可以返回一下元素</p>
</blockquote>
<p>在一些特殊情况下，需要获取请求中携带的所有<strong>参数</strong>和对应的<strong>值</strong>，此时可以使用<code>getParameterMap</code>方法</p>
<p><code>/param?name=tom&amp;age=20&amp;like=0&amp;like=1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Map&lt;String, String[]&gt; map = req.getParameterMap();</span><br><span class="line">		<span class="keyword">for</span>(String key:map.keySet())&#123;</span><br><span class="line">			System.out.println(key+<span class="string">&quot; : &quot;</span>+Arrays.toString(map.get(key)));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">name : [tom]</span><br><span class="line">age  : [<span class="number">20</span>]</span><br><span class="line">like : [<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>



<p>==思考，什么情况下，会不知道客户端传什么名字的参数给我们？==</p>
<h2 id="跳转和重定向"><a href="#跳转和重定向" class="headerlink" title="跳转和重定向"></a>跳转和重定向</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>如果访问一个servlet，需要让servlet把一个已经存在html页面返回，我们可以使用IO流读取这个页面，并写回.</p>
<p><code>hello.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world! <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/html&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = resp.getWriter();</span><br><span class="line">		String realPath = getServletContext().getRealPath(<span class="string">&quot;/hello.html&quot;</span>);</span><br><span class="line">		BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(realPath),<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span>((line=in.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">			out.println(line);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		in.close();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，<code>getServletContext().getRealPath(&quot;/hello.html&quot;)</code>是获取这个html页面，部署在服务器中的绝对路径，方便IO流的读取。</p>
</blockquote>
<blockquote>
<p>用io流的方式读取字节无法解决乱码</p>
</blockquote>
<p>但是，这样实现功能有点麻烦，而且很多都是固定的代码，所以可以进行封装。</p>
<p>其实Servlet中已经专门对这种情况进行了封装处理，我们可以使用专门的方法来完成此效果：</p>
<ul>
<li>跳转</li>
<li>重定向</li>
</ul>
<h3 id="6-2-跳转"><a href="#6-2-跳转" class="headerlink" title="6.2 跳转"></a>6.2 跳转</h3><p>也称之为，服务器内部跳转。</p>
<p>其本质是，在servlet接收到一个请求的时候，可以将此请求转发给服务器内部的另一个资源中，如果这个资源是一个html页面，那么tomcat就会自动读取这个html页面并写回给浏览器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/forward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//path表示为一个页面的地址</span></span><br><span class="line">		String path = <span class="string">&quot;/hello.html&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//根据指定地址，获取请求转发对象（RequestDispatcher）</span></span><br><span class="line">		RequestDispatcher dispatcher = req.getRequestDispatcher(path);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用请求转发对象，把请求对象和响应对象转发给服务器内部的另一个资源（html）</span></span><br><span class="line">		<span class="comment">//完成跳转效果</span></span><br><span class="line">		dispatcher.forward(req, resp);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>需要注意的是，服务器内部跳转，不仅可以从一个Servlet跳转到一个html页面中，也可以从一个Servlet跳转到另一个Servlet中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/forward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//path表示为一个servlet的映射地址</span></span><br><span class="line">		String path = <span class="string">&quot;/html&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//根据指定地址，获取请求转发对象（RequestDispatcher）</span></span><br><span class="line">		RequestDispatcher dispatcher = req.getRequestDispatcher(path);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用请求转发对象，把请求对象和响应对象转发给服务器内部的另一个资源（servlet）</span></span><br><span class="line">		<span class="comment">//完成跳转效果</span></span><br><span class="line">		dispatcher.forward(req, resp);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>此时整体访问情况如下：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200930023542815.png" alt="image-20200930023542815"></p>
<p><strong>服务器内部跳转的特点：</strong></p>
<ul>
<li>需要使用request对象来完成</li>
<li>服务器内部跳转期间，其实就是把请求request和响应response转发到下一个资源中，所以在整个过程中,使用的是同一个request和response</li>
<li>服务器内部跳转,【不会】改变浏览器地址栏中的地址，因为从始至终浏览器只发出了一个请求</li>
</ul>
<h3 id="6-3-重定向"><a href="#6-3-重定向" class="headerlink" title="6.3 重定向"></a>6.3 重定向</h3><p>也称之为，客户端重定向。</p>
<p>其本质是，客户端浏览器发送第一次请求，访问servlet获取资源，但是服务器中，已经将资源转移到另一个位置了，所以需要通知客户端浏览器，重新发送第二次请求，访问一个新的资源位置。</p>
<p>此时，服务器需要通知浏览器发送第二次请求，并且请求新的资源位置</p>
<ul>
<li>通过响应状态码（302），通知浏览器需要重定向</li>
<li>通过响应头字段（Location: 新地址），通知浏览器新的资源位置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/redirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//需要客户端重定向的一个新的资源位置</span></span><br><span class="line">		String location = <span class="string">&quot;hello.html&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//通知客户端浏览器进行资源重定向</span></span><br><span class="line">		resp.sendRedirect(location);</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>访问结果为：</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200930024921090.png" alt="image-20200930024921090"></p>
<blockquote>
<p>可以看出，第一次访问/redirect的响应状态码是302，并且响应头信息中指定了新的资源地址，浏览器根据这个新地址发出了第二次请求，并且当前浏览器地址栏中的地址，显示的是第二次请求的地址</p>
</blockquote>
<p><strong>此时整体访问情况如下：</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200930031120256.png" alt="image-20200930031120256"></p>
<p><strong>客户端重定向的特点：</strong></p>
<ul>
<li>需要使用response对象来完成</li>
<li>客户端重定向，会让浏览器发出第二次请求，那么在服务器内部会产生新的request对象和response对象</li>
<li>客户端重定向,【会】改变浏览器地址栏中的地址，因为发出了第二次请求</li>
</ul>
<p>客户端重定向不仅可以重定向到一个html页面，也可以重定向到另一个Servlet中，只要改变重定向地址即可。</p>
<h3 id="6-4-总结"><a href="#6-4-总结" class="headerlink" title="6.4 总结"></a>6.4 总结</h3><p>服务器内部跳转：</p>
<ul>
<li>使用request完成</li>
<li>跳转的本质是在服务器内部把请求和响应进行转发，转发给下一个指定的资源</li>
<li>如果request中有数据，在跳转到的下一个资源中是可以拿到这个数据，因为只有一个request请求对象</li>
<li>由于服务器跳转是把请求和响应在服务器内部中进行转发，所以浏览器的地址栏中的地址是不受影响的，始终还是第一次发出请求的地址，其实浏览器根本就不知道服务器内部的请求转发情况</li>
<li>在设置跳转的资源地址的时候，路径的前面一般要加上/，例如 <code>String path = &quot;/hello.html&quot;;</code></li>
</ul>
<p>客户端重定向：</p>
<ul>
<li><p>使用response完成</p>
</li>
<li><p>重定向的本质是把新的资源路径返回给浏览器，让浏览器向这个新地址发送一个新请求</p>
<p>此处是利用了响应的状态码302和响应头信息中的Location字段来完成</p>
</li>
<li><p>如果request中有数据，重定向后在新的资源中是拿不到这个数据的，因为重定向会发出新的请求，但是数据在上一个老的请求中</p>
</li>
<li><p>由于重定向让浏览器发出新的请求，所以浏览器地址栏中的地址会变成新请求的地址</p>
</li>
<li><p>在设置重定向的资源地址的时候，路径的前面一般不加/</p>
<p>例如，<code>String path = &quot;hello.html&quot;;</code></p>
<p>但是如果一定要加/的话,那么还需要额外加上一个项目名</p>
<p>例如，<code>String path = &quot;/servlet/hello.html&quot;;</code></p>
<p>同时也可以动态获取项目：<code>req.getContextPath()</code></p>
<p>例如，<code>String path = req.getContextPath()+&quot;/hello.html&quot;;</code></p>
</li>
</ul>
<blockquote>
<p>注意，关于路径问题，后面会有专门的部分去讲解</p>
</blockquote>
<h1 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h1><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p><code>MyBatis</code> 是一款优秀的持久层开源框架，它支持自定义 SQL、存储过程以及高级映射。<code>MyBatis</code>免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。<code>MyBatis</code>可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<p>MyBatis的前身是iBATIS，iBATIS于2002年由ClintonBegin创建。MyBatis3是iBATIS的全新设计，支持注解和Mapper。</p>
<p>MyBatis流行的主要原因在于它的简单性和易使用性。在Java应用程序中，数据持久化层涉及到的工作有：</p>
<ul>
<li>将从数据库查询到的数据生成所需要的Java对象</li>
<li>将Java对象中的数据通SQL持久化到数据库中</li>
</ul>
<p>MyBatis通过抽象底层的JDBC代码，自动化封装SQL结果集产生Java对象、Java对象的数据持久化数据库中的过程使得对SQL的使用变得容易。</p>
<h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>iBATIS一词来源于internet和abatis的组合，是一个在2002年发起的开放源代码项目。于2010年6月16号被谷歌托管，改名为MyBatis。</p>
<p>ibatis的官网 <a href="http://ibatis.apache.org/">http://ibatis.apache.org/</a> 进去官网会看到下面提示:</p>
<p>apache ibatis is retired at the apache software foundation (2010/06/16) the original project team has moved to mybatis hosted at google code. see <a href="http://www.mybatis.org/">http://www.mybatis.org/</a> for more.然而<a href="http://www.mybatis.org/%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E4%B8%80%E7%9B%B4%E5%A4%84%E4%BA%8E%E6%89%93%E4%B8%8D%E5%BC%80%E7%8A%B6%E6%80%81">http://www.mybatis.org/这个地址一直处于打不开状态</a>…</p>
<p>但是我们最终是可以在github中找到mybatis的相关下载的:</p>
<p>mybatis在github中的地址</p>
<p><a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p>
<p>最新版本的mybatis的下载地址</p>
<p><a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p>
<p>doc文档</p>
<p><a href="http://www.mybatis.org/mybatis-3/">http://www.mybatis.org/mybatis-3/</a></p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>通过上面我们了解到Mybatis的主要功能是<strong>数据持久化</strong>，这个时候你可能会回想起之前的<strong>JDBC</strong>课程，既然我们已经掌握了JDBC为什么还要再去学习Mybatis呢？</p>
<p>主要原因有以下几个方面：</p>
<ol>
<li>Mybatis消除了大量的JDBC冗余代码</li>
<li>Mybatis有低的学习曲线</li>
<li>Mybatis能很好地与传统数据库协同工作</li>
<li>Mybatis可以接受SQL语句</li>
<li>Mybatis提供了与Spring框架的集成支持</li>
<li>Mybatis提供了与第三方缓存类库的集成支持</li>
<li>Mybatis引入了更好的性能</li>
</ol>
<p>1）它消除了大量的JDBC冗余代码</p>
<p>Java通过JDBC的API来操作关系型数据库，但是JDBC是一个非常底层的API，我们需要书写大量的代码来完成对数据库的操作。例如一个插入操作(参考之前学习JDBC时候的代码实例)，但是使用mybatis来完成相同的插入操作要简单方便灵活的多。</p>
<p>特别之处的是，MyBatis还提供了其他的一些特性来简化持久化逻辑的实现，它支持复杂的SQL结果集数据映射到嵌套的对象结构，它支持一对一和一对多的结果集和Java对象的映射，它支持根据输入的数据构建动态的SQL语句</p>
<p>2）它有低的学习曲线</p>
<p>MyBatis能够流行的首要原因之一在于它学习和使用起来非常简单，它取决于你Java和 SQL方面的知识。如果开发人员很熟悉Java和SQL，他们会发现MyBatis入门非常简单。</p>
<p>3）它能很好地与传统数据库协同工作</p>
<p>有时我们可能需要用不正规形式与传统数据库协同工作，使用成熟的ORM框架(例如大家熟知的Hibernate)有可能、但是很难跟传统数据库很好地协同工作，因为他们尝试将Java对象静态地映射到数据库的表上.而MyBatis是将查询的结果与Java对象映射起来，这使得MyBatis可以很好地与传统数据库协同工作。你可以根据面相对象的模型创建Java域对象，执行传统数据库的查询，然后将结果映射到对应的Java对象上。</p>
<p>4）它可以接受SQL语句</p>
<p>成熟的ORM框架鼓励使用实体对象和在其底层自动产生SQL语句。由于这种的SQL生成方式，我们有可能不能够利用到数据库的一些特有的特性。Hibernate允许执行本地SQL，但是这样会打破持久层和数据库独立的原则。MyBatis框架接受SQL语句，而不是将其对开发人员隐藏起来。由于MyBatis不会产生任何的SQL语句，所以开发人员就要准备SQL语句，这样就可以充分利用数据库特有的特性并且可以准备自定义的查询。另外，MyBatis 对存储过程也提供了支持。</p>
<p>5）它提供了与Spring框架的集成支持</p>
<p>MyBatis提供了与流行的依赖注入框架Spring的开包即用的集成支持，这将进一步简化MyBatis的使用。</p>
<p>6）它提供了与第三方缓存类库的集成支持</p>
<p>MyBatis有内建的SqlSession级别的缓存机制，用于缓存Select语句查询出来的结果。除此之外，MyBatis提供了与多种第三方缓存类库的集成支持，如EHCache，OSCache，Hazelcast等。</p>
<p>7）它引入了更好的性能</p>
<p>性能问题是关乎软件应用成功与否的关键因素之一。为了达到更好的性能，需要考虑很多事情，而对很多应用而言，数据持久化层是整个系统性能的关键。MyBatis支持数据库连接池，消除了为每一个请求创建一个数据库连接的开销,MyBatis提供了内建的缓存机制，在SqlSession级别提供了对SQL查询结果的缓存。即:如果你调用了相同的select查询，MyBatis 会将放在缓存的结果返回，而不会去再查询数据库。MyBatis框架并没有大量地使用代理机制，因此对于其他的过度地使用代理的ORM框架而言，MyBatis可以获得更好的性能</p>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="jar包导入"><a href="#jar包导入" class="headerlink" title="jar包导入"></a>jar包导入</h3><p>mybatis的核心包只有一个mybatis-3.x.x.jar,另外还有一些【可选】的依赖包(日志、代理等所需要的),在下载的压缩包中可以找到.也可以自行去下载。</p>
<p>如果是maven项目，只有引入依赖坐标即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>实体</strong></p>
<p>之前对应的demo_user</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">快速构建mybatis</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.demo.mybatis.invoke;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.demo.mybatis.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.datasource.pooled.PooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.Environment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.transaction.TransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaInvoke</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PooledDataSource dataSource = <span class="keyword">new</span> PooledDataSource();</span><br><span class="line">        dataSource.setDriver(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql:///st&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        TransactionFactory transactionFactory = <span class="keyword">new</span> JdbcTransactionFactory();</span><br><span class="line">        Environment environment = <span class="keyword">new</span> Environment(<span class="string">&quot;development&quot;</span>, transactionFactory, dataSource);</span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration(environment);</span><br><span class="line">        configuration.addMapper(UserMapper.class);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(configuration);</span><br><span class="line">        SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">        UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line">        System.out.println(userMapper.findAll()); </span><br><span class="line">        <span class="comment">// [User(id=4, username=tom, password=000, gender=0), User(id=5, username=lucy, password=000, gender=1)]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from demo_user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>mybatis的配置文件一般来说名字是固定的，就叫<code>mybatis-config.xml</code>,其中包括数据库连接信息，类型别名,映射文件路径等等；直接创建在src目录下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///st&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><p>映射文件命名一般都是<code>XxxxMapper.xml</code>，<code>Xxxx</code>是对应的类的名字，这个xml文件中包括<code>Xxxx</code>类所对应的数据库表的各种增删改查sql语句。</p>
<p>例如:<code>StudentMapper.xml</code>文件中是<code>Student</code>类对应的表的各种<code>select</code> <code>insert</code> <code>update</code> <code>delete</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.demo.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.briup.demo.mybatis.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select * from demo_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="映射接口"><a href="#映射接口" class="headerlink" title="映射接口"></a>映射接口</h3><p>mybatis中的映射接口<code>XxxxMapper.java</code>(对<code>XxxxMapper.xml</code>中的sql语句进行映射)<br>mybatis中除了必须的jar包、各种xml配置文件之外,一般还需要有调用sql语句执行的接口XxxxMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Select(&quot;select * from demo_user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个名字依然可以叫StudentDao</p>
</blockquote>
<p>注意事项：</p>
<ol>
<li><p>接口中的方法的名字和XML文件定义的SQL映射语句的<code>id</code>值要相同</p>
</li>
<li><p>我们不需要去实现该接口,因为mybatis中提供了相应的方式在运行期间动态生成该接口的实现类对象.</p>
</li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.demo.mybatis.invoke;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.demo.mybatis.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlInvoke</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">            SqlSession session = factory.openSession();</span><br><span class="line">            UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line">            System.out.println(userMapper.findAll());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201019112222960.png" alt="image-20201019112222960"></p>
<blockquote>
<p>注意，该图描述了上述例子中的俩个过程，mybatis左边是配置的过程，mybatis右边是写代码的过程</p>
</blockquote>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Select(&quot;select * from demo_user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.briup.demo.mybatis.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;findAll&quot;</span> resultType=<span class="string">&quot;com.briup.demo.mybatis.entity.User&quot;</span>&gt;</span><br><span class="line">        select * from demo_user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insert&quot;</span>&gt;</span><br><span class="line">        <span class="function">insert into <span class="title">demo_user</span><span class="params">(id,username,password,gender)</span></span></span><br><span class="line"><span class="function">        <span class="title">values</span><span class="params">(NULL ,#&#123;username&#125;,#&#123;password&#125;,#&#123;gender&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">    &lt;update id</span>=<span class="string">&quot;update&quot;</span>&gt;</span><br><span class="line">        update demo_user</span><br><span class="line">        set username=#&#123;username&#125;,password=#&#123;password&#125;,gender=#&#123;gender&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    &lt;delete id=<span class="string">&quot;delete&quot;</span>&gt;</span><br><span class="line">        delete from demo_user where id = #&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<p>utils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">            SqlSession session = factory.openSession();</span><br><span class="line">            <span class="keyword">return</span> session;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlInvoke</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">            SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">            SqlSession session = factory.openSession();</span><br><span class="line">            UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line">            System.out.println(userMapper.findAll());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = SqlSessionUtil.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setGender(<span class="number">0</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;000&quot;</span>);</span><br><span class="line">        mapper.insert(user);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = SqlSessionUtil.getSqlSession();) &#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setId(<span class="number">6</span>);</span><br><span class="line">            user.setGender(<span class="number">0</span>);</span><br><span class="line">            user.setUsername(<span class="string">&quot;老王&quot;</span>);</span><br><span class="line">            user.setPassword(<span class="string">&quot;111111111&quot;</span>);</span><br><span class="line">            mapper.update(user);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (SqlSession sqlSession = SqlSessionUtil.getSqlSession();) &#123;</span><br><span class="line">            UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">            mapper.delete(<span class="number">6</span>);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h1 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h1><p>在web项目的代码结构中，经常会使用到三层架构：</p>
<ul>
<li>web层  servlet/filter/listener</li>
<li>service层 </li>
<li>dao层</li>
</ul>
<p>web层中代码的主要任务：</p>
<ul>
<li>接收客户端传来的参数</li>
<li>把参数封装成对象   saveUser(user)</li>
<li>把封装好的对象/数据传给service</li>
<li>根据service层的处理结果决定把那个页面/数据返回给客户端</li>
</ul>
<p>service层中代码的主要任务：</p>
<ul>
<li>接收web层传过来的对象/数据(如果有的话)</li>
<li>根据这些信息进行业务逻辑处理</li>
</ul>
<p>例如，完成一个登录功能，web层接收到用户名和密码之后，把数据传给service层，service层就要根据这些信息来判断用户名是否存在、密码是否正确、用户是否有权限、用户状态当前是否可用、用户是否推送信息、是否给用户相关提示等，这些都属于登录的业务逻辑处理</p>
<p>dao层中代码的主要任务：</p>
<ul>
<li>接受service传的参数(如果有的话)</li>
<li>和数据库进行交互</li>
<li>把交互结果返回给service层</li>
</ul>
<p><strong>思考，项目的代码为何要分层编写，全部代码写到一个类中进行实现，是否可以？</strong></p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        User user = userService.login(username, password);</span><br><span class="line">        req.getSession().setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;index.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmptyOrWhitespaceOnly(username))&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SqlSession sqlSession = SqlSessionUtil.getSqlSession();</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        User user = userMapper.login(username, password);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;用户名或者密码有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">login</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, <span class="meta">@Param(&quot;password&quot;)</span> String password)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;login&quot;</span> resultType=<span class="string">&quot;com.briup.login.entity.User&quot;</span>&gt;</span><br><span class="line">       select * from demo_user</span><br><span class="line">       where username=#&#123;username&#125; and password = #&#123;password&#125;</span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure>







<h1 id="json"><a href="#json" class="headerlink" title="json"></a><a href="https://www.runoob.com/json/json-tutorial.html">json</a></h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul>
<li>JSON 指的是 JavaScript 对象表示法（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）</li>
<li>JSON 是轻量级的文本数据交换格式</li>
<li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li>
<li>JSON 具有自我描述性，更易理解</li>
</ul>
<p>实例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;sites&quot;</span>: [</span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;菜鸟教程&quot;</span> , <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;www.runoob.com&quot;</span> &#125;, </span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;google&quot;</span> , <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;www.google.com&quot;</span> &#125;, </span><br><span class="line">        &#123; <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;微博&quot;</span> , <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;www.weibo.com&quot;</span> &#125;</span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="为什么使用-JSON？"><a href="#为什么使用-JSON？" class="headerlink" title="为什么使用 JSON？"></a>为什么使用 JSON？</h2><p>对于 AJAX 应用程序来说，JSON 比 XML 更快更易使用：</p>
<p>使用 XML</p>
<ul>
<li>读取 XML 文档</li>
<li>使用 XML DOM 来循环遍历文档</li>
<li>读取值并存储在变量中</li>
</ul>
<p>使用 JSON</p>
<ul>
<li>读取 JSON 字符串</li>
<li>用 eval() 处理 JSON 字符串</li>
</ul>
<h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><h3 id="2-1-JavaScript"><a href="#2-1-JavaScript" class="headerlink" title="2.1 JavaScript"></a>2.1 JavaScript</h3><blockquote>
<p>在JavaScript中，将JSON对象转为字符串，将字符串转为JSON对象</p>
</blockquote>
<p>例如，JSON对象转为字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObj = &#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> jsonStr = <span class="built_in">JSON</span>.stringify(jsonObj);</span><br></pre></td></tr></table></figure>



<p>例如，字符串转为JSON对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonStr = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;tom\&quot;,\&quot;age\&quot;:20&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> jsonObj = <span class="built_in">JSON</span>.parse(jsonStr);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，JSON格式的字符串中，key和value都需要双引号（一定不能使用单引号），如果value是数组可以不用双引号</p>
</blockquote>
<p>例如，JSON数组对象转为字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonArr = [];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">&quot;tom1&quot;</span>,<span class="attr">age</span>:<span class="number">21</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">&quot;tom2&quot;</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;;</span><br><span class="line">jsonArr.push(obj1);</span><br><span class="line">jsonArr.push(obj2);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(jsonArr));</span><br></pre></td></tr></table></figure>

<p>输出的内容为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom1&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">21</span>&#125;,&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom2&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">22</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>格式化后：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>:<span class="number">21</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>:<span class="number">22</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>例如，字符串转换JSON数组对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonArrStr = <span class="string">&quot;[&#123;\&quot;name\&quot;:\&quot;tom1\&quot;,\&quot;age\&quot;:21&#125;,&#123;\&quot;name\&quot;:\&quot;tom2\&quot;,\&quot;age\&quot;:22&#125;]&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonArr = <span class="built_in">JSON</span>.parse(jsonArrStr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jsonArr);</span><br></pre></td></tr></table></figure>



<p>输出的结果为：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201029163538863.png" alt="image-20201029163538863"></p>
<blockquote>
<p>注意1，将对象转为字符串的目的是为了，在请求或响应中方便携带数据</p>
</blockquote>
<blockquote>
<p>注意2，将字符串转为对象的目的是为了，在JavaScript或java中方便解析</p>
</blockquote>
<h3 id="2-2-java"><a href="#2-2-java" class="headerlink" title="2.2 java"></a>2.2 java</h3><blockquote>
<p>在Java中，将JSON对象转为字符串，将字符串转为JSON对象</p>
</blockquote>
<p>在java中，完成这个操作，也很容易，有很多第三方jar包都提供了该功能，例如 jackson</p>
<p><strong>1、项目中引入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2、代码中使用</strong></p>
<p>==对象转json==</p>
<p>以<code>User</code>类型为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.brup.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Ignore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</span><br><span class="line"><span class="comment">//@JsonIgnoreProperties(value = )</span></span><br><span class="line">	<span class="comment">// 一次忽视多个属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> Date dob; <span class="comment">// 转json 格式化日期</span></span><br><span class="line">	<span class="comment">// 密码就不想转成json</span></span><br><span class="line">	<span class="comment">//@JsonIgnore</span></span><br><span class="line">	<span class="keyword">private</span> String password; <span class="comment">//转json 忽视该属性</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, Date dob, String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.dob = dob;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getDob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dob;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDob</span><span class="params">(Date dob)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.dob = dob;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, dob=&quot;</span> + dob + <span class="string">&quot;, password=&quot;</span> + password + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，<code>@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</code>指定该属性转换json格式字符串的时候的日期格式</p>
</blockquote>
<blockquote>
<p>注意，<code>@JsonIgnoreProperties(&#123;&quot;password&quot;&#125;)</code>指定改属性在转json格式字符串的时候可以忽略掉</p>
</blockquote>
<p>测试代码：</p>
<p>例如，User对象转换json格式字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_obj2json</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;tom&quot;</span>,<span class="keyword">new</span> Date(),<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String jsonStr = mapper.writeValueAsString(user);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom&quot;</span>,<span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>格式化：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>例如，json格式字符串转User对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_json2Obj</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    String jsonStr = <span class="string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;tom\&quot;,\&quot;dob\&quot;:\&quot;2022-10-29\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        User user = mapper.readValue(jsonStr, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonMappingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>例如，Map&lt;String,String&gt;对象转json格式字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_map2Json_string</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;21&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String jsonStr = mapper.writeValueAsString(map);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="string">&quot;21&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>:<span class="string">&quot;21&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>例如，json格式字符串转Map&lt;String,String&gt;对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_json2Map_string</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    String jsonStr = <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;tom\&quot;,\&quot;age\&quot;:\&quot;21\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Map&lt;String,String&gt; map = mapper.readValue(jsonStr, Map.class);</span><br><span class="line">        System.out.println(map);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonMappingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>例如，map&lt;String,User&gt;对象转Json格式字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_map2Json_user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, User&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="number">1</span>, <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;tom1&quot;</span>,<span class="keyword">new</span> Date(),<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    map.put(<span class="number">2</span>, <span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">&quot;tom2&quot;</span>,<span class="keyword">new</span> Date(),<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    map.put(<span class="number">3</span>, <span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">&quot;tom3&quot;</span>,<span class="keyword">new</span> Date(),<span class="string">&quot;123456&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String jsonStr = mapper.writeValueAsString(map);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;1&quot;</span>:&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom1&quot;</span>,<span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span>&#125;,<span class="attr">&quot;2&quot;</span>:&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom2&quot;</span>,<span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span>&#125;,<span class="attr">&quot;3&quot;</span>:&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">3</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom3&quot;</span>,<span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>格式化：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;1&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;2&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;3&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>:<span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>例如，json格式字符串转Map&lt;String,User&gt;对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_json2Map_user</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    String jsonStr = <span class="string">&quot;&#123;\&quot;1\&quot;:&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;tom1\&quot;,\&quot;dob\&quot;:\&quot;2022-10-29\&quot;&#125;,\&quot;2\&quot;:&#123;\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;tom2\&quot;,\&quot;dob\&quot;:\&quot;2022-10-29\&quot;&#125;,\&quot;3\&quot;:&#123;\&quot;id\&quot;:3,\&quot;name\&quot;:\&quot;tom3\&quot;,\&quot;dob\&quot;:\&quot;2022-10-29\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//指定要解析转换java类型是Map，已经Map中的俩个泛型的类型分别是String和User</span></span><br><span class="line">        JavaType javaType = mapper.getTypeFactory().constructParametricType(Map.class, String.class,User.class);</span><br><span class="line">        Map&lt;String, User&gt; map = mapper.readValue(jsonStr, javaType);</span><br><span class="line">        <span class="keyword">for</span>(User user:map.values()) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonMappingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>例如，List&lt;String&gt; 对象转Json格式字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_list2Json_string</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;briup&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String jsonStr = mapper.writeValueAsString(list);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;briup&quot;</span>]</span><br></pre></td></tr></table></figure>





<p>例如，Json格式字符串转List&lt;String&gt;对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_json2List_string</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    String jsonStr = <span class="string">&quot;[\&quot;hello\&quot;,\&quot;world\&quot;,\&quot;briup\&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        List&lt;String&gt; list = mapper.readValue(jsonStr,List.class);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>例如，List&lt;User&gt;对象转Json格式字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_list2Json_user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;tom1&quot;</span>,<span class="keyword">new</span> Date(),<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">&quot;tom2&quot;</span>,<span class="keyword">new</span> Date(),<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> User(<span class="number">3</span>,<span class="string">&quot;tom3&quot;</span>,<span class="keyword">new</span> Date(),<span class="string">&quot;123456&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String jsonStr = mapper.writeValueAsString(list);</span><br><span class="line">        System.out.println(jsonStr);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom1&quot;</span>,<span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span>&#125;,&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom2&quot;</span>,<span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span>&#125;,&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">3</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom3&quot;</span>,<span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>格式化：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>:<span class="number">3</span>,</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;tom3&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;dob&quot;</span>:<span class="string">&quot;2020-10-29&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>





<p>例如，json格式字符串转List &lt;User&gt;对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_json2List_user</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    String jsonStr = <span class="string">&quot;[&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;tom1\&quot;,\&quot;dob\&quot;:\&quot;2022-10-29\&quot;&#125;,&#123;\&quot;id\&quot;:2,\&quot;name\&quot;:\&quot;tom2\&quot;,\&quot;dob\&quot;:\&quot;2022-10-29\&quot;&#125;,&#123;\&quot;id\&quot;:3,\&quot;name\&quot;:\&quot;tom3\&quot;,\&quot;dob\&quot;:\&quot;2022-10-29\&quot;&#125;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        JavaType javaType = mapper.getTypeFactory().constructParametricType(List.class, User.class);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = mapper.readValue(jsonStr,javaType);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>总结</code></p>
<ul>
<li><p>对象转json</p>
</li>
<li><p>mapper.writeValueAsString(任何类型数据)</p>
</li>
<li><p>json转对象</p>
<ul>
<li><p>如果正常类型User</p>
<ul>
<li>mapper.readValue(msg,User);</li>
</ul>
</li>
<li><p>如果特殊类型 List<User></p>
<ul>
<li><p>先声明转换类型</p>
<ul>
<li>```java<br>JavaType type = mapper<pre><code>    .getTypeFactory()
    .constructParametricType(List.class, User.class);
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - mapper.readValue(msg,type);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 案例</span><br><span class="line"></span><br><span class="line">**前端** </span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;对象转json&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.8.3/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">	function testJson()&#123;</span><br><span class="line">		$.ajax(&#123;</span><br><span class="line">			type: &quot;get&quot;,</span><br><span class="line">			url: &quot;result&quot;,</span><br><span class="line">			// 返回类型 2.能自动解析成json</span><br><span class="line">			// dataType: &quot;json&quot;, </span><br><span class="line">			success: function(resp)&#123;</span><br><span class="line">				console.log(resp);</span><br><span class="line">				// var obj = JSON.parse(resp); 1.手动转</span><br><span class="line">				//console.log(obj.flag);</span><br><span class="line">				//3.  如果后台返回就是json格式,无须任何处理</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;button onclick=&quot;testJson()&quot;&gt;点击&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong>后端</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.brup.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.brup.entity.Result;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/result&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//resp.setContentType(&quot;text/plain;charset=utf-8&quot;);</span></span><br><span class="line">		<span class="comment">// 3.后台直接返回json</span></span><br><span class="line">		resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">		Result  r = <span class="keyword">new</span> Result(<span class="keyword">true</span>,<span class="string">&quot;可注册&quot;</span>);</span><br><span class="line">		ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		String msg = mapper.writeValueAsString(r);</span><br><span class="line">		resp.getWriter().write(msg);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><h2 id="1-Spring简介"><a href="#1-Spring简介" class="headerlink" title="1.Spring简介"></a>1.Spring简介</h2><blockquote>
<p>Spring是一个使用java语言编写的轻量级开源框架，解决了项目中的一些通用问题，例如依赖注入、切面织入等，同时还提供了项目中各种技术的一站式的解决、整合方案。</p>
</blockquote>
<p>Spring是于2003 年兴起的一个轻量级的Java 开源框架，由Rod Johnson在其著作<code>Expert One-On-One J2EE Development and Design</code>中阐述的部分理念和原型衍生而来,为了解决企业应用开发的复杂性而创建的。</p>
<p>Spring框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为J2EE应用程序开发提供集成的框架。</p>
<p>Spring框架中的组件模块众多，不用的组件模块用来解决不同的问题，我们可以单独使用某一个模块，也可以将众多模块根据项目需要，进行自由组合。</p>
<p>Spring框架中的所有组件模块都依赖于Spring提供的俩个基础功能：是控制反转（<code>IOC</code>）和面向切面（<code>AOP</code>）。 </p>
<p>从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。</p>
<p><a href="https://spring.io/">Spring 官网</a> </p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200909195909915.png" alt="image-20200909195909915"></p>
<p>Spring有很多项目，不同的项目用来解决不同领域的问题，我们一般所说的Spring框架，指的是Spring的基础核心项目：<code>Spring Framework</code></p>
<p>例如，Spring官网提供的项目的列表，项目很多，这里只列出了一部分</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201101232955221.png" alt="image-20201101232955221"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201101233023912.png" alt="image-20201101233023912"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201101233128076.png" alt="image-20201101233128076"></p>
<blockquote>
<p>注意，Spring其他项目都会依赖于核心项目<code>Spring Framework</code>的中的组件模块。</p>
</blockquote>
<p><a href="https://spring.io/projects/spring-framework">Spring Framework官网</a> </p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200909200005767.png" alt="image-20200909200005767"></p>
<p><a href="http://repo.spring.io/libs-release/org/springframework/spring/">Spring Framework下载列表</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201101233850120.png" alt="image-20201101233850120"></p>
<blockquote>
<p>注意，该列表中有<code>Spring Framework</code>的每一个版本的下载</p>
</blockquote>
<h2 id="2-Spring优势"><a href="#2-Spring优势" class="headerlink" title="2.Spring优势"></a>2.Spring优势</h2><ul>
<li><p>容器性质，方便解耦，简化开发<strong>（核心）</strong></p>
<p>Spring提供的<code>IOC</code>容器，可以将对象间的依赖关系交由Spring容器进行控制，避免硬编码所造成的过度程序耦合。</p>
</li>
<li><p>AOP编程的支持<strong>（核心）</strong></p>
<p>通过Spring的<code>AOP</code>功能，方便进行面向切面的编程，许多不容易用传统OOP实现的功能可以通过AOP轻松应付。</p>
</li>
<li><p>声明式事务的支持</p>
<p>通过声明式方式灵活的进行事务的管理，提高开发效率和质量</p>
</li>
<li><p>集成各种优秀框架</p>
<p>Spring不仅不排除其他各种优秀的框架，同时对这些框架(Mybatis、Quartz等)提供了很好的支持</p>
</li>
<li><p>降低JavaEE API的使用难度</p>
<p>Spring对JavaEE API 进行了封装，使得这些API降低了使用难度</p>
</li>
</ul>
<h2 id="3-Spring模块"><a href="#3-Spring模块" class="headerlink" title="3.Spring模块"></a>3.Spring模块</h2><p>Spring-framework 框架是一个分层架构，它由大约20个模块组成，如下图所示：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201009162424400.png" alt="image-20201009162424400"></p>
<p>这些模块分为Core Container、Data Access/Integration、Web、AOP（Aspect Oriented Programming）、Instrumentation和Test</p>
<p><strong>1、Core Container，核心容器</strong></p>
<p>Core Container包含有Core、Beans、Context和Expression Language模块</p>
<p>Core和Beans模块：框架的基础部分，提供反转控制（IOC）和依赖注入（DI）特性。</p>
<p>Context模块：构建于Core和Beans模块基础之上，提供了对国际化、事件传播、资源加载和对Context的透明创建的支持。ApplicationContext接口是Context模块的关键。</p>
<p>Expression Language模块：Expression Language模块提供了一个强大的表达式语言用于在运行时查询和操纵对象。</p>
<p><strong>2、Data Access/Integration，数据访问/集成部分</strong></p>
<p>Data Access/Integration层包含有JDBC、ORM、OXM、JMS和Transaction模块</p>
<p>JDBC模块：该模块提供了一个JDBC抽象层，它可以消除冗长的JDBC编码和解析数据库厂商特有的错误代码。</p>
<p>ORM模块：该模块为流行的对象-关系映射API——JPA、JDO、Hibernate、Mybatis等提供了一个交互层。利用ORM封装包，可以混合使用所有Spring提供的特性进行O/R映射。如前边提到的简单声明性事物管理。</p>
<p>OXM模块：该模块提供了一个对Object/XML映射实现的抽象层，Object/XML映射实现包括JAXB、Castor、XMLBeans、JiBX和XStream。</p>
<p>JMS模块：JMS(Java Messaging Service)模块主要包含了一些制造和消费消息的特性。</p>
<p>Transaction模块：该模块支持编程和声明性的事物管理，这些事物类必须实现特定的接口，并且对所有的POJO都适用。</p>
<p>3、<strong>Web</strong></p>
<p>Web层包含了Web、Servlet、WebSocket、Portlet模块</p>
<p>Web模块：该模块提供了基础的面向web的集成特性。例如多文件上传、使用servlet listeners初始化IoC容器以及一个面向web的应用上下文。它还包含Spring远程支持中web相关部分。</p>
<p>Servlet模块：该模块包含Spring的model-view-controller（MVC）实现。Spring的MVC框架使得模型范围内的代码和web forms之间能够清楚的分离开来，并与Spring框架的其他特性集成在一起。</p>
<p>WebSocket模块：该模块提供了对WebSocket的支持。</p>
<p>Portlet模块：提供了用于portlet环境的MVC的实现，Portlet是和Servlet类似的一种web技术。</p>
<p><strong>4、AOP和Instrumentation</strong></p>
<p>AOP模块：提供了一个符合AOP联盟标准的面向切面编程的实现，它让你可以定义方法拦截器和切点，从而将逻辑代码分开，降低它们之间的耦合性。</p>
<p>Aspects模块：提供了对AspectJ的集成支持，Spring框架的AOP功能是使用AspectJ框架来实现的。</p>
<p>Instrumentation模块提供了class instrumentation支持和classloader实现，使得可以在特定的应用服务器上使用。</p>
<p><strong>5、Test</strong></p>
<p>Test模块：支持使用JUnit和TestNG对Spring组件进行测试。</p>
<blockquote>
<p>注意，我们可以根据自己的需求，来选择引入并使用Spring Framework中不同模块的功能，并不需要一次引入所以模块对应的jar包。</p>
</blockquote>
<h2 id="4-Spring-IOC"><a href="#4-Spring-IOC" class="headerlink" title="4.Spring IOC"></a>4.Spring IOC</h2><h3 id="4-1-问题"><a href="#4-1-问题" class="headerlink" title="4.1.问题"></a>4.1.问题</h3><p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200909165520086.png" alt="image-20200909165520086"></p>
<p>我们之前使用的三层架构，虽然能够在一定程度上进行解耦，但是这里也会带来一个新的问题：</p>
<ul>
<li><code>web</code>层调用<code>service</code>层，要在<code>web</code>层创建<code>service</code>层对象，然后调用其方法</li>
<li><code>service</code>层调用<code>dao</code>层，要在<code>service</code>层创建<code>dao</code>层对象，然后调用其方法</li>
</ul>
<p>也就是，Web层依赖Service的实现，Service需要依赖Dao层实现，并需要我们自己手动创建并维护该这些实现，随着项目逐渐扩展，这些创建和维护工作将会变得越来越复杂。</p>
<p>为了更好的解耦，在启动项目的过程中，提前做好以下工作：</p>
<ul>
<li>创建一个容器（例如一个Map集合即可）</li>
<li>把项目中需要的对象提前创建好，并且存入该容器中</li>
<li>每一个模块需要用到对象，提前就给该模块提供好</li>
</ul>
<p>在这种情况下，原来的代码是这样写的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IUserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面使用userService进行操作</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而现在，就不用我们直接创建对象了，因为容器会自动将需要的对象其他注入到Servlet中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下面使用userService进行操作</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看出，俩个模块的耦合度又降低了，并且将来可以很轻轻的更换接口的实现</p>
</blockquote>
<p>其项目图如下所示：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200909171150553.png" alt="image-20200909171150553"></p>
<blockquote>
<p>注意，Spring IOC就是一个类似这样的容器</p>
</blockquote>
<h3 id="4-2-IOC"><a href="#4-2-IOC" class="headerlink" title="4.2 IOC"></a>4.2 IOC</h3><p><code>IOC (Inverse of Control)</code>  控制反转，将对象的创建以及对象依赖关系反转给Spring 容器，程序本身不进行维护。</p>
<p>Spring官方文档中给结钩图如下：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011183545095.png" alt="image-20201011183545095"></p>
<blockquote>
<p>注意，原来由我们自己手动创建并维护的对象，现在都可以交给Spring的IOC容器去进行管理维护</p>
</blockquote>
<h3 id="4-3-准备"><a href="#4-3-准备" class="headerlink" title="4.3 准备"></a>4.3 准备</h3><p>1、准备Spring 开发所需jar包</p>
<p>可以从官网下载，也可以从提供的资料里面找到。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011184405345.png" alt="image-20201011184405345"></p>
<ul>
<li>docs : Spring API 和 规范文档说明</li>
<li>libs:  jar包以及对应的源码</li>
<li>schema: 约束</li>
</ul>
<blockquote>
<p>注意： 这里使用的Spring版本为 5.0.2.Release，对应核心功能而言，不同的版本之间差异不大</p>
</blockquote>
<p>2、将核心容器jar包以及辅助包导入项目lib目录下</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011193514773.png" alt="image-20201011193514773"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>其中：</p>
<ul>
<li><p>lombok 不属于 Spring的核心容器，只是一个用来简化POJO类写法的工具</p>
</li>
<li><p>commons-logging / log4j 属于日志工具</p>
</li>
</ul>
<p>lombok需要Eclipse现在插件对其进行支持：</p>
<blockquote>
<p>不要放在中文目录下</p>
</blockquote>
<p>双击lombok-1.18.12.jar</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102004906657.png" alt="image-20201102004906657"></p>
<p>选择需要安装插件的STS或Eclipse</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102005003831.png" alt="image-20201102005003831"></p>
<p>点击安装：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102005042446.png" alt="image-20201102005042446"></p>
<blockquote>
<p>注意，安装成功后，需要重新启动STS或者Eclipse</p>
</blockquote>
<p>3、创建pojo类</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102005440635.png" alt="image-20201102005440635"></p>
<p>内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于使用了Lombok中的Data注解，该类编译后，会自动生成对应的GET/SET方法以及toString等方法：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102005556484.png" alt="image-20201102005556484"></p>
<h3 id="4-4-配置"><a href="#4-4-配置" class="headerlink" title="4.4 配置"></a>4.4 配置</h3><p>1、在src下面，创建配置文件，名字为：<code>applicationContext.xml</code></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011191654695.png" alt="image-20201011191654695"></p>
<p>2、xml添加头部声明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在Spring的官方说明文档中，可以找到模板样例：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011192052332.png" alt="image-20201011192052332"></p>
<p>3、在配置文件中添加需要被Spring容器管理的资源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"> 	 </span><br><span class="line">  <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  		bean标签的作用：用于配置让Spring容器创建对象</span></span><br><span class="line"><span class="comment">  			class : 要创建对象的全限定类名</span></span><br><span class="line"><span class="comment">  			name: 该对象在容器中的名字  </span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Husband&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，SpringIOC容器管理的对象，称为bean，所以需要使用bean标签来进行配置</p>
</blockquote>
<p>这里使用了name属性，也可以使用id</p>
<ul>
<li>id: 一个bean的唯一标识 ， 命名格式必须符合XML ID属性的命名规范</li>
<li>name: 可以用特殊字符，并且一个bean可以用多个名称，例如<code>name=&quot;bean1,bean2,bean3&quot;</code></li>
<li>如果没有id，则name的第一个名称默认是id</li>
<li>如果 一个 bean 标签未指定 id、name 属性，则 spring容器会给其一个默认的id，值为其类全名</li>
<li>如果有多个bean标签未指定 id、name 属性，但是class相同，则spring容器会按照其出现的次序，分别给其指定 id 值为 “类全名#1”, “类全名#2”</li>
</ul>
<p>4、测试</p>
<p>创建测试类</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011192646045.png" alt="image-20201011192646045"></p>
<p>内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Husband;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 1.解析配置文件,创建容器</span></span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 2.根据配置的Id值,从容器中获取对象</span></span><br><span class="line">		Husband hunsband = (Husband) ac.getBean(<span class="string">&quot;husband&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(hunsband);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102011303778.png" alt="image-20201102011303778"></p>
<blockquote>
<p>可以看出，此时我们已经可以从容器中（ApplicationContext对象）拿其他配置好的Husband对象了</p>
</blockquote>
<p>这里有红色警告，是因为log4j没有找到对应的配置文件，如果有需要可以src下面添加配置文件：log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout </span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d [%-5p] %c - %m%n</span></span><br></pre></td></tr></table></figure>



<h3 id="4-5-容器"><a href="#4-5-容器" class="headerlink" title="4.5 容器"></a>4.5 容器</h3><p>SpringIOC容器（ApplicationContext）继承关系图如下：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011194054333.png" alt="image-20201011194054333"></p>
<p>容器的顶层接口是 <code>BeanFactory</code></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011200215290.png" alt="image-20201011200215290"></p>
<p><code>BeanFactory</code>和<code>ApplicationContext</code>的区别</p>
<ul>
<li><p>BeanFactory是Spring容器的顶层接口，ApplicationContext是其子接口</p>
</li>
<li><p>ApplicationContext接口,它由BeanFactory接口派生而来，包含BeanFactory的所有功能</p>
</li>
<li><p>BeanFactory 创建容器时不会创建对象，当从容器里面获取对象时才会创建</p>
</li>
<li><p>ApplicationContext 创建容器时就会创建对象</p>
</li>
</ul>
<p><code>ApplicationContext</code>接口的实现类</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011201743451.png" alt="image-20201011201743451"></p>
<p>1、<code>ClassPathXmlApplication</code></p>
<p>从类的根路径下加载配置文件</p>
<p>2、<code>FileSystemXmlApplication</code></p>
<p>从磁盘路径加载配置文件，配置文件可以在磁盘任何位置</p>
<p>一般不适用  d:// </p>
<p>3、<code>AnnotationConfigApplicationContext</code></p>
<p>用注解配置容器对象时，需要使用此类来创建spring容器</p>
<p>在配置文件中配置对象，如果没有id或者name的时候，可以通过Class类型的对象来获取</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Husband&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Husband;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">	</span><br><span class="line">		Husband hunsband = ac.getBean(Husband.class);</span><br><span class="line">		</span><br><span class="line">		System.out.println(hunsband);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>结果如下：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102012119735.png" alt="image-20201102012119735"></p>
<p>除此之外，也可以工厂的方式来创建并获取对象：</p>
<p><strong>1、静态工厂方式</strong></p>
<p>创建工厂类</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011210933773.png" alt="image-20201011210933773"></p>
<p>内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HusbandStaticFactory</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Husband <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Husband();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>修改配置文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		class 工厂类的全限定类名</span></span><br><span class="line"><span class="comment">		factory-method 工厂类里面的静态方法</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.HusbandStaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Husband;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 1.解析配置文件,创建容器</span></span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		<span class="comment">// 2.根据配置的Id值,从容器中获取对象</span></span><br><span class="line">		Husband husband = (Husband) ac.getBean(<span class="string">&quot;husband&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(husband);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102012603969.png" alt="image-20201102012603969"></p>
<p><strong>2、普通工厂创建方式</strong></p>
<p>创建工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.ioc;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HusbandFactory</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Husband <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Husband h = <span class="keyword">new</span> Husband();</span><br><span class="line">		h.setId(<span class="number">1</span>);</span><br><span class="line">		h.setName(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">		h.setSalary(<span class="number">2000</span>);</span><br><span class="line">		<span class="keyword">return</span> h;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置文件内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		配置工厂，让Spring容器产生工厂实例</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.HusbandFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		factory-bean   工厂实例在Spring容器中的唯一标识</span></span><br><span class="line"><span class="comment">		factory-method 工厂实例中的方法</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getInstance&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Husband;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 1.解析配置文件,创建容器</span></span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		<span class="comment">// 2.根据配置的名字,从容器中获取对象</span></span><br><span class="line">		Husband husband = (Husband) ac.getBean(<span class="string">&quot;husband&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//也可以如下获取</span></span><br><span class="line">        <span class="comment">//Husband husband = ac.getBean(Husband.class);</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		System.out.println(husband);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试结果如下：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102013128338.png" alt="image-20201102013128338"></p>
<h3 id="4-7-bean"><a href="#4-7-bean" class="headerlink" title="4.7  bean"></a>4.7  bean</h3><p>1、<code>&lt;bean&gt;</code>标签的作用</p>
<ul>
<li><p>用于配置让spring容器来创建对象</p>
</li>
<li><p>默认情况下它调用的是类中的无参构造函数（反射）</p>
</li>
</ul>
<p>2、<code>&lt;bean&gt;</code>标签的属性</p>
<ul>
<li><p><code>id</code> 给在容器中的对象提供一个唯一标识，用来获取对象</p>
</li>
<li><p><code>name</code>功能类似id，命名要求没有id严格</p>
</li>
<li><p><code>class</code> 指定类的全限定类名。用于反射创建对象。默认情况下调用无参构造函数</p>
</li>
<li><p><code>scope</code> 指定对象范围</p>
<ul>
<li><p><code>sigleton</code> 默认值，单例</p>
</li>
<li><p><code>prototype</code> 多例</p>
</li>
<li><p><code>request</code> WEB项目中,Spring容器创建一个Bean对象，会将该对象存入request</p>
</li>
<li><p><code>session</code> WEB项目中，Spring容器创建一个Bean对象，会将该对象存入session</p>
</li>
<li><p><code>golbal session</code> 只有应用在基于portlet的Web应用程序中才有意义，它映射到portlet的global范围的session</p>
</li>
</ul>
</li>
<li><p><code>init-method</code>: 指定类的初始化方法的名称</p>
</li>
<li><p><code>destory-method</code>: 指定类中销毁方法的名称</p>
</li>
<li><p><code>lazy-init</code>：指定使用进行延迟加载</p>
</li>
</ul>
<blockquote>
<p>注意: destory-method 需要销毁容器才能生效,并且必须是单例模式</p>
</blockquote>
<p>单例和多例的区别：</p>
<p><code>scope=&quot;singleton&quot;</code>一个应用只有一个对象的实例（默认值）</p>
<ul>
<li>创建容器时，对象就被创建了</li>
<li>只要容器不销毁，对象一直存在    </li>
<li>当容器销毁时，对象就被销毁了</li>
</ul>
<p><code>scope=&quot;prototype&quot;</code>每次访问获取对象，都会重新创建对象实例。</p>
<ul>
<li>当从容器中获取对象时，创建新的对象实例</li>
<li>只要对象在使用中，就一直存在</li>
<li>当对象长时间不用时，被java的垃圾回收器回收</li>
</ul>
<blockquote>
<p>最后，理解Spring IOC的特点，本来是我们自己手动创建、管理、维护的对象，现在都交给了Spring容器来进行操作了，我们只要在需要用的时候去容器中拿就可以了。</p>
</blockquote>
<h2 id="5-Spring-DI"><a href="#5-Spring-DI" class="headerlink" title="5.Spring DI"></a>5.Spring DI</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><blockquote>
<p>DI(Denpendency Injection)，依赖注入，SpringIOC容器中的核心操作，可以将对象需要的属性值自动注入</p>
</blockquote>
<p>使用<code>&lt;bean&gt;</code>标签，可以将一个类配置到Spring的IOC容器中，将其进行对象的管理工作，包括对象的创建、出初始化、销毁等。</p>
<p>如果一个对象的初始化需要依赖一些属性值或者其他对象，那么就Spring中的DI就可以帮我们来完成对象初始化时候属性的依赖注入工作。</p>
<p>特别是在，项目中有很多对象，并且对象之间还存在着各种依赖关系，那么springIOC容器就可以帮我们来进行管理和建立这些对象之间的关系。</p>
<h3 id="5-2-set方法注入"><a href="#5-2-set方法注入" class="headerlink" title="5.2 set方法注入"></a>5.2 set方法注入</h3><p>1、POJO类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">	<span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2、配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		property 给属性采用set方法赋值</span></span><br><span class="line"><span class="comment">			name : 属性名，调用该属性的set方法</span></span><br><span class="line"><span class="comment">			value: 属性值，通过set方法赋值</span></span><br><span class="line"><span class="comment">			ref: 属性是其他bean类型采用ref(字符串除外)</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;hunsband&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Hunsband&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Husband;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		Husband husband = (Husband) ac.getBean(<span class="string">&quot;husband&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(husband);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102015305848.png" alt="image-20201102015305848"></p>
<h3 id="5-3-构造器注入"><a href="#5-3-构造器注入" class="headerlink" title="5.3 构造器注入"></a>5.3 构造器注入</h3><p>1、POJO</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">	<span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中：</p>
<p><code>@AllArgsConstructor</code>注解，可以给类中自动添加全参构造器</p>
<p><code>@NoArgsConstructor</code>注解，可以给类中自动添加无参构造器</p>
<p>2、配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		constructor-arg 让属性赋值采用构造函数赋值</span></span><br><span class="line"><span class="comment">			index: 指定参数在构造函数中的索引位置</span></span><br><span class="line"><span class="comment">			type: 指定参数在构造函数中的数据类型</span></span><br><span class="line"><span class="comment">			name: 指定参数在构造函数中的名字</span></span><br><span class="line"><span class="comment">			value: 具体的参数值</span></span><br><span class="line"><span class="comment">			ref: 如果需要的数据为其他bean类型，使用ref</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Husband&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>	</span><br><span class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>	</span><br><span class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;salary&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>	</span><br><span class="line">		<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;date&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者也可以使用构造器参数的下标进行注入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Husband&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Husband;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		Husband husband = (Husband) ac.getBean(<span class="string">&quot;husband&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(husband);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102015746518.png" alt="image-20201102015746518"></p>
<h3 id="5-4-名称空间注入"><a href="#5-4-名称空间注入" class="headerlink" title="5.4 名称空间注入"></a>5.4 名称空间注入</h3><p>1、POJO类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Husband</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">	<span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2、配置</p>
<p>xml文件的添加p名称空间的声明，这里p指的的是property</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201011222524796.png" alt="image-20201011222524796"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span> </span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;husband&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Husband&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;lucy&quot;</span> <span class="attr">p:salary</span>=<span class="string">&quot;4000&quot;</span> <span class="attr">p:date-ref</span>=<span class="string">&quot;now&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;now&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Husband;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		Husband husband = (Husband) ac.getBean(<span class="string">&quot;husband&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(husband);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102020150931.png" alt="image-20201102020150931"></p>
<blockquote>
<p>注意，该方式只是简化了依赖注入的配置，其实本质仍然是调用类中的set方法实现注入功能</p>
</blockquote>
<h3 id="5-5-集合属性注入"><a href="#5-5-集合属性注入" class="headerlink" title="5.5 集合属性注入"></a>5.5 集合属性注入</h3><p>1、POJO类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Entity</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String[] myStrs;</span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; myList;</span><br><span class="line">	<span class="keyword">private</span> Set&lt;String&gt; mySet;</span><br><span class="line">	<span class="keyword">private</span> Map&lt;String, String&gt; myMap;</span><br><span class="line">	<span class="keyword">private</span> Properties myProps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2、配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span> </span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;entity&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.ioc.Entity&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 注入数组 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myStrs&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>CCC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 注入List --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myList&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>DDD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>EEE<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>FFF<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">			</span><br><span class="line">		<span class="comment">&lt;!-- 注入Set --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mySet&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>GGG<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>KKK<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">value</span>&gt;</span>LLL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">				</span><br><span class="line">		<span class="comment">&lt;!-- 注入myMap --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myMap&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 俩种形式都可以注入 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- 注入Properties --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;myProps&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;name&quot;</span>&gt;</span>mary<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;age&quot;</span>&gt;</span>30<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Entity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		Entity entity = (Entity) ac.getBean(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(entity);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102020821042.png" alt="image-20201102020821042"></p>
<h2 id="6-Spring注解"><a href="#6-Spring注解" class="headerlink" title="6.Spring注解"></a>6.Spring注解</h2><blockquote>
<p>spring中除了使用xml方式进行注入外，还可以使用注解的方式进行注入</p>
</blockquote>
<h3 id="6-1-使用"><a href="#6-1-使用" class="headerlink" title="6.1 使用"></a>6.1 使用</h3><p>1、POJO类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 该注解加在类上代表该类需要让Spring容器去创建对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Value</span>  用来给属性注入数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Value(&quot;1&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;tom&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;20&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2、配置</p>
<p>xml文件的添加context名称空间的声明，已经其对对应schema文件的声明</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201012161118498.png" alt="image-20201012161118498"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 配置要扫描的注解包 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.briup.ioc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意约束有三处地方要修改</p>
</blockquote>
<p>3、引入jar包</p>
<p>使用该功能，需要额外引入jar包：spring-aop-5.x.x.RELEASE.jar</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102022052966.png" alt="image-20201102022052966"></p>
<p>否则在运行的时候会报错：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.ClassNotFoundException: org.springframework.aop.TargetSource</span><br><span class="line">	at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">381</span>)</span><br><span class="line">	at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">424</span>)</span><br><span class="line">	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:<span class="number">331</span>)</span><br><span class="line">	at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">357</span>)</span><br><span class="line">	... <span class="number">25</span> more</span><br></pre></td></tr></table></figure>



<p>4、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		Teacher teacher = (Teacher) ac.getBean(<span class="string">&quot;teacher&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(teacher);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102022229321.png" alt="image-20201102022229321"></p>
<h3 id="6-2-常用"><a href="#6-2-常用" class="headerlink" title="6.2 常用"></a>6.2 常用</h3><p>Spring中常用的注解有以下几个：</p>
<ul>
<li><p><code>@Component</code></p>
<p>作用：</p>
<p>​    让spring容器来管理对象，相当于在xml中配置一个bean。</p>
<p>属性：</p>
<p>​    value: 指定bean的名字，如果不指定，默认为当前类名且首字母小写</p>
</li>
<li><p><code>@Controller</code>,<code>@Service</code>,<code>@Repository</code></p>
<p>作用：</p>
<p>​     功能与<code>@Component</code>作用一样，只不过其语义更加明确</p>
<p>​    <code>@Controller</code> 一般作用于 表现层</p>
<p>​    <code>@Service</code> 一般作用于 业务层</p>
<p>​    <code>@Repository</code> 一般作用于 持久层</p>
<p>属性：</p>
<p>​    value : 指定bean的名字,如果不指定，默认为当前类名，且首字母小写</p>
</li>
<li><p><code>@Value</code></p>
<p>作用：</p>
<p>​    用于给属性注入基本数据，此注解中还支持SpEL</p>
<p>属性：</p>
<p>​    value :具体的属性值</p>
</li>
<li><p><code>@Autowaired</code></p>
<p>作用：</p>
<p>​    自动按照类型注入，使用注解注入属性时，set方法可以省略，该注解只能注入bean类型，当有多个相同类型时，将bean的名字作为要注入对象的属性名，也可以注入成功</p>
</li>
<li><p><code>@Qualifier</code></p>
<p>作用：</p>
<p>​        在<code>@Autowaired</code>注入的基础之上，再按照Bean的名字注入。在给属性注入数据时不能独立使用，必须和<code>@Autowaired</code>一起使用</p>
</li>
</ul>
<p>  属性：</p>
<p>  ​    value：指定bean的名字</p>
<ul>
<li><p><code>@Resource</code></p>
<p>作用：</p>
<p>​        直接按照bean的id注入,只能注入bean类型</p>
<p>属性：</p>
<p>​        name: bean的名字</p>
</li>
<li><p><code>@Scope</code></p>
<p>作用：</p>
<p>​    指定bean的作用范围</p>
<p>属性：</p>
<p>​    value: 指定范围值</p>
<p>​    取值为： <code>singleton</code>,<code>prototype</code>,<code>request</code>,<code>session</code>,<code>golbalsession</code></p>
</li>
<li><p><code>@PostConstruct</code></p>
<p>作用：</p>
<p>​    指定初始化方法</p>
</li>
<li><p><code>@PreDestroy </code></p>
<p>作用：</p>
<p>​    指定销毁方法</p>
</li>
</ul>
<h3 id="6-3-特殊"><a href="#6-3-特殊" class="headerlink" title="6.3  特殊"></a>6.3  特殊</h3><blockquote>
<p>其实也可以去掉xml文件，全部使用注解的方式完成ICO和DI配置和操作，但是需要使用专门的容器类型：AnnotationConfigApplicationContext</p>
</blockquote>
<p>1、POJO类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Value(&quot;1&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;tom&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Value(&quot;20&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里没有指定Teacher在容器中名字，默认是类名首字母小写，也可以手动去指定 <code>@Component(&quot;teacher&quot;)</code></p>
</blockquote>
<p>2、测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.annataion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoTationTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> AnnotationConfigApplicationContext(<span class="string">&quot;com.briup.ioc&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		Teacher teacher = (Teacher) ac.getBean(<span class="string">&quot;teacher&quot;</span>);</span><br><span class="line">        </span><br><span class="line">		System.out.println(teacher);		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102025813812.png" alt="image-20201102025813812"></p>
<blockquote>
<p>注意，这里使用AnnotationConfigApplicationContext类型作为容器对象，其参数是要扫描的包</p>
</blockquote>
<blockquote>
<p>注意，记得引入jar包spring-aop-5.x.x.RELEASE.jar</p>
</blockquote>
<p>==思考，如果新增一个类Address，然后Teacher中依赖这个类的对象，那么使用xml和注解分别该怎么配置？==</p>
<h3 id="6-4-新增"><a href="#6-4-新增" class="headerlink" title="6.4 新增"></a>6.4 新增</h3><blockquote>
<p>除了以上的常用注解之外，spring中还新增的一些注解类，可以使用这些注解来代替之前xml的配置</p>
</blockquote>
<h3 id="6-1-Configuration"><a href="#6-1-Configuration" class="headerlink" title="6.1 @Configuration"></a>6.1 <code>@Configuration</code></h3><p>作用：</p>
<ul>
<li><p>用于指定当前类是一个spring配置类，当创建容器时会从该类上加载注解</p>
</li>
<li><p>可以使用AnnotationConfigApplicationContext(配置类.class) 加载配置</p>
</li>
</ul>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span></span></span><br><span class="line"><span class="comment"> * 表示当前类是spring的一个配置类</span></span><br><span class="line"><span class="comment"> * 相当于之前的xml，可以完成其对应的配置功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="6-2-ComponentScan"><a href="#6-2-ComponentScan" class="headerlink" title="6.2 @ComponentScan"></a>6.2 <code>@ComponentScan</code></h3><p>作用：</p>
<ul>
<li>用于指定spring在初始化容器时要扫描的包</li>
</ul>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span></span></span><br><span class="line"><span class="comment"> * 表示当前类是spring的一个配置类</span></span><br><span class="line"><span class="comment"> * 相当于之前的xml，可以完成其对应的配置功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ComponentScan</span>(&quot;com.briup.ioc&quot;)</span></span><br><span class="line"><span class="comment"> * 扫描当前包和指定包下面的java类，发现其中spring注解</span></span><br><span class="line"><span class="comment"> * 包含指定包下面的子包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.briup.ioc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="6-3-Bean"><a href="#6-3-Bean" class="headerlink" title="6.3 @Bean"></a>6.3 <code>@Bean</code></h3><p>作用：</p>
<ul>
<li>该注解只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器</li>
</ul>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 一个<span class="doctag">@Bean</span>注解就相当于bean标签</span></span><br><span class="line"><span class="comment">	 * 方法的返回值对象会存储在Spring容器中</span></span><br><span class="line"><span class="comment">	 * 方法名就是该对象在容器中的唯一标识 </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Teacher <span class="title">teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Teacher();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，也可以手动指定名字，例如<code>@Bean(&quot;teacher&quot;)</code></p>
</blockquote>
<h3 id="6-4-PropertySource"><a href="#6-4-PropertySource" class="headerlink" title="6.4 @PropertySource"></a>6.4 <code>@PropertySource</code></h3><p>作用：</p>
<ul>
<li>用于加载<code>.properties</code>文件中的值，加载后可以使用 <code>@Value(&quot;$&#123;key&#125;&quot;)</code>的形式来获取</li>
</ul>
<p>例如，</p>
<p>POJO类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;my-value.properties&quot;)</span><span class="comment">//指定要读取的资源文件位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;teacher.id&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;teacher.name&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;teacher.age&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean(&quot;t&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Teacher <span class="title">teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">		t.setId(id);</span><br><span class="line">		t.setName(name);</span><br><span class="line">		t.setAge(age);</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>properties文件：my-value.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">teacher.id</span>=<span class="string">2</span></span><br><span class="line"><span class="meta">teacher.name</span>=<span class="string">mary</span></span><br><span class="line"><span class="meta">teacher.age</span>=<span class="string">30</span></span><br></pre></td></tr></table></figure>



<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.config.SpringConfig;</span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//指定要加载的配置类</span></span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfig.class);</span><br><span class="line">		</span><br><span class="line">		Teacher teacher = (Teacher) ac.getBean(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(teacher);	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102030345032.png" alt="image-20201102030345032"></p>
<h3 id="6-5-Import"><a href="#6-5-Import" class="headerlink" title="6.5 @Import"></a>6.5 <code>@Import</code></h3><p>作用：</p>
<ul>
<li>用于导入其他配置类</li>
<li>被引入配置类中，可以不用再写<code>@Configuration</code>注解。当然，写上也没问题</li>
<li>一般项目中写了很多配置类的时候，可以再写一个总的配置类，这个配置类上使用<code>@Import</code>去引入其他的配置，将来容器只要读取这个一个总的配置类即可</li>
</ul>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource(&quot;my-value.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;teacher.id&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;teacher.name&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="meta">@Value(&quot;$&#123;teacher.age&#125;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Bean(&quot;t&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Teacher <span class="title">teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">		t.setId(id);</span><br><span class="line">		t.setName(name);</span><br><span class="line">		t.setAge(age);</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，该配置类将会在其他配置中使用@Import引入，所以可以不添加@Configuration注解</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(value = &#123;SpringConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，该配置类做一个总的配置，引入其他的配置</p>
</blockquote>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.config.AppConfig;</span><br><span class="line"><span class="keyword">import</span> com.briup.ioc.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringIoCTest</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ApplicationContext ac = </span><br><span class="line">				<span class="keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);</span><br><span class="line">		</span><br><span class="line">		Teacher teacher = (Teacher) ac.getBean(<span class="string">&quot;t&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(teacher);	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201102031229401.png" alt="image-20201102031229401"></p>
<blockquote>
<p>可以看出，此时也可以正常的完成功能</p>
</blockquote>
<h3 id="6-6-总结"><a href="#6-6-总结" class="headerlink" title="6.6 总结"></a>6.6 总结</h3><p>到此位置，我们已经认识了spring中的三种配置方式：</p>
<ul>
<li>xml配置</li>
<li>annotation配置</li>
<li>javaconfig配置</li>
</ul>
<p>1、xml配置，可以把配置信息都写在xml中，方便阅读、维护和修改。</p>
<p>2、annotation配置，可以使用注解来代替xml中的标签，在java代码中配置，但是这种方式，会让配置信息分散在各个java类中，虽然简化了xml的繁琐配置，但是不方便阅读、维护和修改。</p>
<p>3、javaconfig配置，主要是使用了<code>@Configuration</code>注解，来代替原来的xml配置，可以将配置信息较为<strong>集中</strong>的写在一个java类中，并且还提供了相关的配套的其他注解类，解决了使用普通注解配置的一些问题。同时将来配合<strong>条件注解</strong>可以完成一些高级的配置功能。例如springboot中使用的自动配置等</p>
<blockquote>
<p>注意，根据当前项目的情况，灵活的选择合适的配置方式，如果有需要也可以将多种配置方式混合使用</p>
</blockquote>
<h1 id="springmvc"><a href="#springmvc" class="headerlink" title="springmvc"></a>springmvc</h1><h2 id="2-Spring-Web-MVC"><a href="#2-Spring-Web-MVC" class="headerlink" title="2 Spring Web MVC"></a>2 Spring Web MVC</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>SpringWebMVC简称SpringMVC，它是Spring Framework框架中提供的一个模块,通过实现MVC模式来很好地将数据、业务与展现进行分离。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201109094601635.png" alt="image-20201109094601635"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201109094646288.png" alt="image-20201109094646288"></p>
<blockquote>
<p>注意，SpringMVC框架的目的是要简化我们日常的Web开发</p>
</blockquote>
<p>SpringMVC的几个特点：</p>
<ul>
<li><p>SpringMVC框架跟其他的WebMVC框架一样,都是请求驱动。</p>
</li>
<li><p>SpringMVC框架设计并围绕一个能够分发请求到控制器的核心Servlet(DispatcherServlet,即前端控制器)。</p>
</li>
<li><p>SpringMVC框架和spring的IOC容器完全整合,并且允许使用spring中其他的所有功能。</p>
</li>
<li><p>SpringMVC框架设计的一个核心的原则就是”开闭原则”,对扩展开放,对修改关闭。所以SpringMVC框架中很多方法都是final的,不允许用户随意覆盖,但是却提供给用户很多可扩展的机制。</p>
</li>
<li><p>SpringMVC框架目前已经成为非常流行的web应用的框架。</p>
</li>
</ul>
<h3 id="2-1-获取"><a href="#2-1-获取" class="headerlink" title="2.1 获取"></a>2.1 获取</h3><p>由于SpringMVC是Spring框架中的一个模块,所以我们下载Spring框架即可,因为里面包含了Spring框架的各个模块的相关东西,当然也包含了SpringMVC的(jar包、API文档、说明文档、源代码等)</p>
<p>SpringMVC框架的jar包分为四部分：</p>
<p>1、web及webmvc的jar包（必选）</p>
<ul>
<li>spring-web-x.x.x.RELEASE</li>
<li>spring-webmvc-x.x.x.RELEASE</li>
</ul>
<p>2、Spring框架的核心模块的jar包（必选）</p>
<ul>
<li>spring-beans-x.x.x.RELEASE</li>
<li>spring-core-x.x.x.RELEASE</li>
<li>spring-context-x.x.x.RELEASE</li>
<li>spring-expression-x.x.x.RELEASE</li>
<li>spring-aop-x.x.x.RELEASE</li>
</ul>
<p>3、日志的jar包（可选）</p>
<ul>
<li>commons-logging-x.x</li>
<li>log4j-x.x.x</li>
</ul>
<p>4、其他（可选）</p>
<ul>
<li>jstl-1.2.jar （如果使用jsp的话，必须引入） </li>
</ul>
<h3 id="2-3-组件"><a href="#2-3-组件" class="headerlink" title="2.3 组件"></a>2.3 组件</h3><p>SpringMVC中的核心组件，有以下几种：</p>
<ul>
<li><p><code>DispatcherServlet</code></p>
<p>前端控制器。用来过滤客户端发送过来,想要进行逻辑处理的请求</p>
</li>
<li><p><code>Controller/Headler</code></p>
<p>控制器/处理器。开发人员自定义,用来处理用户请求的,并且处理完成之后返回给用户指定视图的对象</p>
<p>相当于我们之前编写的Servlet</p>
</li>
<li><p><code>HandlerMapping</code></p>
<p>处理器映射器（简称映射器）。DispatcherServlet接收到客户端请求的URL之后,根据一定的匹配规则,再把请求转发给对应的Handler,这个匹配规则由<code>HandlerMapping</code>决定</p>
</li>
<li><p><code>HandlerAdaptor</code></p>
<p>处理器适配器（简称适配器）。用来适配每一个要执行的Handler对象。通过HandlerAdapter可以支持任意的类作为处理器。作用是告诉SpringMVC框架，将来需要调用Controller中的哪一个方法。</p>
</li>
<li><p><code>ViewResolver</code></p>
<p>视图解析器（简称解析器）。Controller/Headler返回的是逻辑视图名,需要有一个解析器能够将逻辑视图名转换成实际的物理视图。例如，Controller中返回的逻辑视图名字为”hello”，解析器可以给这个逻辑视图名转换为真正的物理视图名，例如加入前缀和后缀：/WEB-INF/jsp/hello.jsp</p>
<p>SpringMVC的可扩展性，决定了视图可以有很多种,所以不同的情况下需要不同的视图解析器，例如使用jsp充当视图的时候，就需要使用专门的jsp解析器</p>
</li>
</ul>
<p>当一个请求进来之前，SpringMVC中的核心组件会一起配合来完成本次请求的处理：</p>
<ol>
<li>请求被前端控制器（DispatcherServlet）接收到</li>
<li>前端控制器（DispatcherServlet）根据映射器（HandlerMapping）中配置的映射关系，将这个请求转交给真正能够处理客户端请求的处理器（Controller/Headler）</li>
<li>处理器（Controller/Headler）通过适配器（HandlerAdaptor），执行指定方法进行处理，完成后返回给用户ModelAndView（模型和视图的结合体）</li>
<li>视图解析器（ViewResolver）根据ModelAndView中的逻辑视图名找到真正的物理视图</li>
<li>使用ModelAndView中的模型对视图进行渲染</li>
</ol>
<p>如图1：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/SpringMVC_work_flow.png" alt="SpringMVC_work_flow"></p>
<p>如图2：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201109102752002.png" alt="image-20201109102752002"></p>
<p>如图3：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20201109102819924.png" alt="image-20201109102819924"></p>
<blockquote>
<p>注意，以上三个图形，描述的都是同一件事情，就是SpringMVC如何处理一个请求</p>
</blockquote>
<h2 id="3-项目搭建"><a href="#3-项目搭建" class="headerlink" title="3 项目搭建"></a>3 项目搭建</h2><p>pom </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定springmvc在项目启动时，读取新的配置文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定spring扫描的包路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.briup.springmvc.web.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启springmvc的注解功能 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置静态资源不被拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">//@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote>
<p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p>
</blockquote>
<p><strong>springboot</strong>的特点：</p>
<ol>
<li><p>创建独立的Spring应用程序</p>
</li>
<li><p>嵌入的Tomcat，无需部署WAR文件</p>
</li>
<li><p>简化Maven配置</p>
</li>
<li><p>自动配置Spring</p>
</li>
<li><p>提供生产就绪型功能，如指标，健康检查和外部配置</p>
</li>
<li><p>没有代码生成和对XML没有要求配置</p>
</li>
<li><p>约定优于配置</p>
</li>
</ol>
<p><strong>springboot</strong>的优点：</p>
<ol>
<li><p>spring boot 可以快速的开发出 restful 风格的系统架构。</p>
</li>
<li><p>方便的自动化，非常适合做微服务架构的搭建</p>
</li>
<li><p>单一jar包运行的方式让部署和管理也非常方便。</p>
</li>
<li><p>除了精简配置这方面, 另外还可以让spring生态圈和其他工具链进行方便快速的整合(比如redis, email, hibernate,mybatis,amqp等)</p>
</li>
</ol>
<p><a href="https://spring.io/">spring官网</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519092628202.png" alt="image-20200519092628202"></p>
<p><strong>springboot是spring的一个顶级项目</strong>：</p>
<blockquote>
<p>我们之前学习的spring核心，其实是spring-framework，这个是其他所有spring项目的基础。</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519092803832.png" alt="image-20200519092803832"></p>
<p><strong>springboot相关的页面：</strong></p>
<blockquote>
<p>CURRENT表示当前springboot推荐使用的最新版本。</p>
<p>General Availability（GA）表示正式发布的版本，官方开始推荐广泛使用，有时候也会用release版本表示。</p>
<p>SNAPSHOT表示快照版，可以正常使用，但该版本仍在继续改进。</p>
<p>Reference Doc 官方提供的springboot参考指南。（<strong>很重要</strong>）</p>
<p>API Doc 官方提供的api文档，类似于刚开始学习java时使用的javase-api文档。</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519093710955.png" alt="image-20200519093710955"></p>
<p><strong>快速创建springboot项目的方式：</strong>  spring initializr 是官网提供的快速创建springboot项目的引导程序。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519095709591.png" alt="image-20200519095709591"></p>
<p><strong>通过对以下几项内容的选择和填写，就可以导出一个搭建好的springboot项目，我们后续的代码在此基础上进行添加和调整即可：</strong> 几乎所有的地方都有默认的选择和值，可以直接导出项目代码。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519100909061.png" alt="image-20200519100909061"></p>
<p>导出代码：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519100929634.png" alt="image-20200519100929634"></p>
<h2 id="二、springboot项目"><a href="#二、springboot项目" class="headerlink" title="二、springboot项目"></a>二、springboot项目</h2><h3 id="1-pom文件"><a href="#1-pom文件" class="headerlink" title="1.pom文件"></a>1.pom文件</h3><p>​        springboot项目最核心的是其maven工程中的pom文件的编写，我们有多种方式可以在maven中构建一个springboot项目。</p>
<p>​        springboot项目中的pom文件，按照官方要求，一般需要在基本的pom配置中添加额外几个地方:</p>
<ol>
<li><p><strong>继承Springboot提供的一个父项目。</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519104909102.png" alt="image-20200519104909102"></p>
<p>springboot官方推荐我们使用spring-boot-starter-parent，在spring-boot-starter-parent中包含了以下信息:</p>
<ul>
<li><p>Java版本</p>
</li>
<li><p>项目编码</p>
</li>
<li><p>测试框架</p>
</li>
<li><p>资源过滤</p>
</li>
<li><p>插件配置</p>
<p>。。。</p>
<p>也可以自己在pom中覆盖这些默认值：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519105512655.png" alt="image-20200519105512655"></p>
</li>
</ul>
</li>
<li><p><strong>根据需求添加对应启动器starter的依赖。</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519104926713.png" alt="image-20200519104926713"></p>
<p>springboot中提供了很多可选的启动器starter：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519110002121.png" alt="image-20200519110002121"></p>
<p>springboot的启动器 starter主要用来简化依赖用的，例如原来在maven项目中需要使用web相关的功能和框架，那么就要引入对应的一些web相关的依赖，并且需要自己去找这些依赖的坐标和版本，但是springboot中只需要引入一个starter就行了：spring-boot-starter-web。</p>
<p>starter会把你需要的相关jar包全部关联到依赖中。在eclipse中的依赖树中可以看到这个web相关的starter包含了哪些依赖:</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519110658582.png" alt="image-20200519110658582"></p>
<p>一个web相关的starter的依赖声明，基本解决了项目中一般web模块功能所依赖jar的管理。</p>
<p>当然，如果更换starter中默认的依赖，也是可以的。例如，spring-boot-starter-web中默认使用的是内嵌的tomcat服务器，可以替换为jetty服务器,具体如下： ==先排除不用的默认依赖，在手动添加自己需要的依赖。==</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519111147673.png" alt="image-20200519111147673"></p>
<p>spring-boot-starter 是核心启动器，其他启动器的名字都是这样的规律：spring-boot-starter-xxx，其中这个xxx就表示该启动器注意负责的功能是什么，例如：spring-boot-starter-jdbc、spring-boot-starter-web、spring-boot-starter-redis、spring-boot-starter-aop、spring-boot-starter-cache等等。</p>
<blockquote>
<p>注意，很多启动器中都包含了核心启动器：spring-boot-starter，所以spring-boot-starter不需要反复多次引入。</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519111902161.png" alt="image-20200519111902161"></p>
</li>
<li><p><strong>配置springboot的maven插件。</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519104938006.png" alt="image-20200519104938006"></p>
<p>springboot的Maven插件（Spring Boot Maven plugin）能够以Maven的方式为应用提供springboot的支持，即为Spring Boot应用提供了执行Maven操作的可能。该插件能够将Spring Boot应用打包为可执行的jar或war文件，然后以普通的jar包方式运行springboot应用。</p>
<p>Spring Boot Maven plugin的5个Goals：</p>
<ul>
<li><p><strong>spring-boot:repackage</strong>，默认goal。</p>
<p>在mvn package之后，再次自动打包成可执行的jar/war，同时保留mvn package生成的jar/war文件为.origin结尾的文件。</p>
</li>
<li><p><strong>spring-boot:run</strong></p>
<p>比较常用，是运行springboot项目的方式之一。</p>
</li>
<li><p>spring-boot:start</p>
<p>在mvn integration-test阶段，进行Spring Boot应用生命周期的管理。</p>
</li>
<li><p>spring-boot:stop</p>
<p>在mvn integration-test阶段，进行Spring Boot应用生命周期的管理。</p>
</li>
<li><p>spring-boot:build-info</p>
<p>生成Actuator使用的构建信息文件build-info.properties。</p>
</li>
</ul>
<p>对于默认的Goals，spring-boot:repackage，在运行maven的打包package命令后会自动执行，并且如果是java项目(非web),在<strong>指定程序入口</strong>后(start-class)，可以直接打包成可执行jar包，自动执行我们指定的程序入口:</p>
<p>​    <img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519132543278.png" alt="image-20200519132543278"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519130947865.png" alt="image-20200519130947865"></p>
<p>使用mvn命令进行打包: pom中加入skipTests标签并指定其值为true， 可跳过测试：</p>
<p><code>&lt;skipTests&gt;true&lt;/skipTests&gt;</code></p>
<p>mvn clean package</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519132909273.png" alt="image-20200519132909273"></p>
<p><strong>注意，在STS中执行maven命令的时候，前面不需要带mvn</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519132939804.png" alt="image-20200519132939804"></p>
<p><strong>打包后生成俩个文件：</strong></p>
<p>demo-0.0.1-SNAPSHOT.jar   </p>
<p>​    这个是springboot插件打的jar包</p>
<p>demo-0.0.1-SNAPSHOT.jar.original </p>
<p>​    这个是clean package命令打的原始jar包</p>
<p><strong>选择第一个jar右键：</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519132754425.png" alt="image-20200519132754425"></p>
<p><strong>在命令行中，使用命令的方式执行这个jar：</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519133302674.png" alt="image-20200519133302674"></p>
<blockquote>
<p>注意，操作完之后，把Terminal选项卡给关闭了，否则再执行clean命令会==报错==。因为clean命令会删除target目录下的内容，但是Terminal正在打开target目录使用其中的文件，不让其他程序删除。</p>
</blockquote>
</li>
</ol>
<h3 id="2-程序入口"><a href="#2-程序入口" class="headerlink" title="2.程序入口"></a>2.程序入口</h3><p>​        springboot项目中需要一个程序入口，就是一个类中含有main方法，但是需要在这个类上使用springboot的专用注解@SpringBootApplication</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>该注解可以让当前类成为一个<strong>配置类</strong>，自动扫描用户的包，以及最重要的一个功能:开启springboot的自动配置功能:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">		@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意，main方法中的这句代码SpringApplication.run(DemoApplication.class, args)，main方法运行后springboot就可以读取到DemoApplication类上的注解从而开启各种功能。</p>
</blockquote>
<p>运行springboot项目后控制台中可以看到以下内容：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519134457148.png" alt="image-20200519134457148"></p>
<h3 id="3-测试代码"><a href="#3-测试代码" class="headerlink" title="3.测试代码"></a>3.测试代码</h3><p>​        springboot项目中的测试类，默认使用了spring-test模块以及结合了junit测试框架。</p>
<blockquote>
<p>注意，不同的springboot版本，内置的使用的junit版本也不同。</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519134650836.png" alt="image-20200519134650836"></p>
<blockquote>
<p>这个测试类和springboot项目的入口类的位置的关系，运行测试类的时候，会自动先运行入口类，因为要先读取配置、扫描包、开启自动配置功能等。要记得，入口类也是一个配置类。</p>
</blockquote>
<blockquote>
<p>==一般会在同包以及子包下自动查找要使用的类。==<br>当前例子中，测试类和入口的类的位置就是在同一个包下面。</p>
</blockquote>
<p>如果测试类和入口类(配置类)的位置比较复杂或者混合，也可以自己去明确指定，例如 :</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = &#123;DemoApplication.class&#125;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4.配置文件"></a>4.配置文件</h3><p>在springboot项目中，默认只有一个配置文件，在大多数情况下这个一个配置文件也就足够了。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519135514278.png" alt="image-20200519135514278"></p>
<p>springboot的配置文件，默认支持俩种方式：</p>
<ol>
<li><p>properties文件</p>
<p>application.properties :</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">utf-8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>yml文件</p>
<p>application.yml :</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">utf-8</span></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>俩种文件的配置内容一致，但是配置的格式不同。俩个文件同时存在，优先使用properties文件中的配置。</p>
</blockquote>
<p>pom文件中添加web启动器的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行springboot的程序入口类DemoApplication：</p>
<p>从日志中可以看出当前使用了8081端口：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519141258964.png" alt="image-20200519141258964"></p>
<p><strong>在springboot官网中</strong>： 有配置文件支持的所有的属性配置。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519142001917.png" alt="image-20200519142001917"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519142124461.png" alt="image-20200519142124461"></p>
<p>​    <img src="https://gitee.com/vanse/images/raw/master/out_before/image-20200519142153437.png" alt="image-20200519142153437"></p>
<h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.briup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8989</span></span><br><span class="line"><span class="comment">#配置数据源</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/st?characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mappers/**/*.xml</span></span><br><span class="line"><span class="meta">logging.level.com.briup.ssm</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure>



<h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.briup.ssm.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SsmApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SsmApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h2><h3 id="controlelr"><a href="#controlelr" class="headerlink" title="controlelr"></a>controlelr</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="dao-1"><a href="#dao-1" class="headerlink" title="dao"></a>dao</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.briup.ssm.dao.UserMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;findAll&quot;</span> resultType=<span class="string">&quot;com.briup.ssm.entity.User&quot;</span>&gt;</span><br><span class="line">        select * from demo_user</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>briup</tag>
      </tags>
  </entry>
  <entry>
    <title>briup_servlet</title>
    <url>/archives/briup/briup-servlet.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="servlet（一）"><a href="#servlet（一）" class="headerlink" title="servlet（一）"></a>servlet（一）</h1><h2 id="1-JavaEE"><a href="#1-JavaEE" class="headerlink" title="1 JavaEE"></a>1 JavaEE</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>JavaEE，Java 平台企业版（Java Platform Enterprise Edition）是 Sun 公司为企业级应用推出的标准平台，用来开发B/S架构软件，可以说它是一种企业级应用开发规范。2018年3月更名为 Jakarta EE。（Oracle将JavaEE交给Eclipse基金会来维护）</p>
<p>JavaEE 5/6/7  版本都在oracle官网维护：</p>
<p><a href="https://docs.oracle.com/javaee/7/">javaee 5/6/7</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132228230.png" alt="image-20200928160813377"></p>
<p>JavaEE 8 在oracle官网中也给出了介绍：</p>
<p><a href="https://www.oracle.com/java/technologies/java-ee-glance.html">JavaEE 8</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132228198.png" alt="image-20200928161001881"></p>
<p>更多关于JavaEE新版本的动向，需要到JakartaEE官网上查看：</p>
<p><a href="https://jakarta.ee/">JakartaEE</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132228767.png" alt="image-20200928161146662"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132228536.png" alt="image-20200928161250020"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132228814.png" alt="image-20200928161312140"></p>
<blockquote>
<p>可以看出，当前JakartaEE官网中，主推的是JakartaEE 8版本，同时JakartaEE 9也处于可用状态</p>
</blockquote>
<blockquote>
<p>虽然JavaEE已经更名为JakartaEE，但是现在大多数情况下，大家还是习惯叫它JavaEE</p>
</blockquote>
<h3 id="1-2-组成"><a href="#1-2-组成" class="headerlink" title="1.2 组成"></a>1.2 组成</h3><p>JavaEE 是企业级应用开发规范，它本身并不是一种技术，而是多种技术解决方案的集合，这些技术和解决方案，会涉及到企业级应用开发过程中，所遇到的各种各样的问题。</p>
<p>也就是说，使用java开发企业级应用的时候，如果遇到问题，可以使用JavaEE中，所指定的技术规范来进行问题的解决。但是一个问题的解决，一般会有很多种方案，JavaEE只是收录了其中一种方案，并制定成了规范标准。</p>
<p>例如，<strong>JavaEE 5 中的技术规范</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132228278.png" alt="image-20200928162515955"></p>
<blockquote>
<p>JavaEE中的每一种技术规范，都可以描述为JavaEE中的一种技术组件</p>
</blockquote>
<p>随着时代的进步，以及越来越多的公司和组织参与到Java世界，出现了各种各样的Java EE组件的代替者，比如Hibernate、Spring就是其中两个典型（第三方框架）。</p>
<p>同时，Java官方制定的一些Java EE技术规范并不太受欢迎，例如</p>
<ul>
<li>它们制定了JSF规范，但实际企业开发喜欢用Struts 2、Spring MVC；</li>
<li>它们制定了EJB规范，但实际企业开发往往还是喜欢用Spring；</li>
<li>它们制定了JPA规范，但实际企业开发往往还是喜欢直接用Hibernate、MyBatis。</li>
</ul>
<p>但是，JavaEE规范中，还是有一些非常重要的技术规范，成为javaEE被广泛使用的核心技术，例如Servlet、Jsp</p>
<p>除了，Servlet和Jsp之外，JavaEE中还有其他一些技术规范，其中核心的可以大致分为13种：</p>
<ul>
<li><p>JDBC(Java Database Connectivity)</p>
<p>JDBC API为访问不同的数据库提供了一种统一的途径</p>
</li>
<li><p>JNDI(Java Name and Directory Interface)</p>
<p>JNDI API被用于执行名字和目录服务</p>
</li>
<li><p>EJB(Enterprise JavaBean) </p>
<p>J2EE技术之所以赢得媒体广泛重视的原因之一就是EJB。它们提供了一个框架来开发和实施分布式商务逻辑，由此很显著地简化了具有可伸缩性和高度复杂的企业级应用的开发</p>
</li>
<li><p>RMI(Remote Method Invoke)</p>
<p>调用远程对象上的方法</p>
</li>
<li><p>Java IDL/CORBA</p>
<p>在Java IDL的支持下，开发人员可以将Java和CORBA集成在一起</p>
</li>
<li><p>JSP(Java Server Pages)</p>
<p>JSP页面由HTML代码和嵌入其中的Java代码所组成</p>
</li>
<li><p>Java Servlet</p>
<p>Servlet是一种Java程序，它扩展了Web服务器的功能，作为一种服务器端的应用，当被请求时开始执行。</p>
</li>
<li><p>XML(Extensible Markup Language)</p>
<p>Java中对XML的支持</p>
</li>
<li><p>JMS(Java Message Service)<br>JMS是用于和面向消息的中间件相互通信的应用程序接口</p>
</li>
<li><p>JTA(Java Transaction Architecture)</p>
<p>JTA定义了一种标准的API，应用系统由此可以访问各种事务监控</p>
</li>
<li><p>JTS(Java Transaction Service)<br>JTS事务管理器，对JTA提供支持和管理服务</p>
</li>
<li><p>JavaMail</p>
<p>JavaMail是用于存取邮件服务器的API，它提供了一套邮件服务器的抽象类</p>
</li>
<li><p>JAF(JavaBeans Activation Framework)</p>
<p>JavaMail可以利用JAF来处理MIME编码的邮件附件</p>
</li>
</ul>
<h3 id="1-3-区别"><a href="#1-3-区别" class="headerlink" title="1.3 区别"></a>1.3 区别</h3><p>在每一个JavaEE的版本中，会对一些指定的核心技术规范进行版本升级，或者新增一些技术规范</p>
<p>例如，<strong>JavaEE 7 中的技术规范</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132228790.png" alt="image-20200928164809409"></p>
<blockquote>
<p>其中，使用不同的颜色，表示出在此版本中，新增了哪些技术规范，以及哪些是可选的技术规范</p>
</blockquote>
<p>在官网中，会对JavaEE中，每项技术规范的版本罗列出来，并进行说明</p>
<p><a href="https://www.oracle.com/java/technologies/javaee/javaeetechnologies.html#javaee7">JavaEE 7中技术规范版本</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132231046.png" alt="image-20200928165437589"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132231800.png" alt="image-20200928165535726"></p>
<blockquote>
<p>可以看出，这里列出了JavaEE 7中，关于web应用开发技术中，每项技术规范的版本</p>
</blockquote>
<p>下图是<strong>JavaEE 5</strong>中，对web开发技术中，每项技术规范的版本：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132231340.png" alt="image-20200928165737079"></p>
<blockquote>
<p>可以看出，JavaEE 5 和 JavaEE 7版本中，很多技术规范的版本的都有所升级</p>
</blockquote>
<p>JakartaEE官网中，对其新版本中的规范技术也有详细说明：</p>
<p><a href="https://jakarta.ee/specifications/">JakartaEE官网版本说明</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132231316.png" alt="image-20200928170022610"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132231141.png" alt="image-20200928170055327"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132231332.png" alt="image-20200928170131504"></p>
<h3 id="1-4-选择"><a href="#1-4-选择" class="headerlink" title="1.4 选择"></a>1.4 选择</h3><p>在JavaEE技术规范中，我们主要关注的是Servlet和Jsp的版本，特别是Servlet，版本不同，会直接影响将来代码中功能实现的方式。这里，我们选择使用<strong>JavaEE 7</strong>中的<strong>Servlet3.1</strong>版本，这个也是当前使用最广泛的版本。</p>
<p>通过Maven中央仓库中的servlet依赖使用情况，也可以看出：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232740.png" alt="image-20200928171345590"></p>
<blockquote>
<p>注意，一般情况下，高版本是会兼容低版本的功能的</p>
</blockquote>
<h3 id="1-5-下载"><a href="#1-5-下载" class="headerlink" title="1.5 下载"></a>1.5 下载</h3><p><a href="https://download.oracle.com/otndocs/jcp/java_ee-7-fr-eval-spec/index.html">JavaEE 7官方说明文档下载</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232860.png" alt="image-20200928171849967"></p>
<blockquote>
<p>注意，这个是JavaEE 7的总文档，里面包含各种技术组件的说明</p>
</blockquote>
<p><a href="https://download.oracle.com/otndocs/jcp/servlet-3_1-fr-eval-spec/index.html">Servlet3.1 官方文档下载</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232934.png" alt="image-20200928171933203"></p>
<blockquote>
<p>注意，第一个是Servlet3.1的说明文档，第二个是Servlet3.1的API文档</p>
</blockquote>
<h3 id="1-6-容器"><a href="#1-6-容器" class="headerlink" title="1.6 容器"></a>1.6 容器</h3><p>通过前面的JavaEE技术组件图中，可以看出Servlet和Jsp，并不能像之前普通java程序一样，写一个main方法运行，而是需要将Servlet和Jsp程序，放到Web容器中运行：</p>
<p><strong>JavaEE 5中的技术组件图：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232449.png" alt="image-20200928172533726"></p>
<p><strong>JavaEE 7中的技术组件图：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232112.png" alt="image-20200928172504604"></p>
<p>Web容器，也称为Web Container，它其实是一个运行环境，它可以给Servlet和Jsp程序的运行，提供一个合适的运行环境。所以，将来在将web项目部署到服务器里面的时候，会要求服务器中含有<strong>web容器</strong>，以便支持Servlet和Jsp程序的运行。如果服务器中没有web容器，那么这个服务器中将不能运行servlet和jsp的程序。</p>
<p>一般情况下对服务器的描述有：</p>
<ul>
<li><p>web服务器</p>
<p>也称为web server或者http server，主要用于处理http请求以及返回响应。它可以处理请求，也可以将请求转发至其他服务器，多用于处理web中的静态资源。例如，Nginx 、apache</p>
</li>
<li><p>web容器</p>
<p>主要用于支持Servlet和Jsp的运行(没有主函数)，同时也可以处理http协议下的静态资源的访问，因为一般是在==web服务器中内嵌了web容器。例如，tomcat、jetty==</p>
</li>
<li><p>JavaEE应用服务器</p>
<p>它具备了 Web Server 处理http请求的能力（没有Web Server专业），同时也支持了JavaEE 技术组件，比如JMS、DI、JPA、Transactions、Concurrency等，同时也包含了Web Container。例如，WebLogic、WebSphere.(一般配合web服务器使用tomcat+nginx)</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232595.png" alt="image-20200928195857793"></p>
<blockquote>
<p>后面，我们会选择tomcat作为web容器，去部署运行servlet和jsp相关的程序</p>
</blockquote>
<p>==思考，JavaEE、Servlet、Jsp、Web Container、tomcat这几者之间的关系是什么？==</p>
<h2 id="2-Tomcat"><a href="#2-Tomcat" class="headerlink" title="2 Tomcat"></a>2 Tomcat</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>Tomcat是由Apache基金组织维护的一款开源、免费、Java语言实现的web容器，同时它也是一个web服务器，支持Http协议下的资源访问（静态资源、动态资源）。</p>
<p>在Tomcat服务器中，可以部署web应用，然后对外提供Http协议下的资源访问</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232808.png" alt="image-20200928202700541"></p>
<h3 id="2-2-下载"><a href="#2-2-下载" class="headerlink" title="2.2 下载"></a>2.2 下载</h3><p><a href="https://tomcat.apache.org/">apache-tomcat官网</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232498.png" alt="image-20200928202942725"></p>
<p>官网列出了tomcat和Servlet、Jsp等相关技术规范的版本关系：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232937.png" alt="image-20200928203045326"></p>
<blockquote>
<p>可以看出，tomcat8.5刚好支持JavaEE 7里面的servlet3.1规范</p>
</blockquote>
<p><a href="https://tomcat.apache.org/download-80.cgi">tomcat 8.5下载</a></p>
<p>官网中分别提供了源码和编译后的软件下载：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232866.png" alt="image-20200928203537201"></p>
<h3 id="2-3-安装"><a href="#2-3-安装" class="headerlink" title="2.3 安装"></a>2.3 安装</h3><p>将下载完成的压缩包，直接解压到文件中即可，例如</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232776.png" alt="image-20200928203849722"></p>
<blockquote>
<p>注意，这个解压安装的路径中，不要有中文、空格、特殊符号等</p>
</blockquote>
<h3 id="2-4-目录"><a href="#2-4-目录" class="headerlink" title="2.4 目录"></a>2.4 目录</h3><p>tomcat解压后，每个目录的作用：</p>
<ul>
<li><p>bin目录，存放运行tomcat需要的命令文件</p>
<p>例如，tomcat启动和关闭的命令</p>
<p>windows中，startup.bat、shutdown.bat</p>
<p>Unix中，startup.sh、shutdown.sh</p>
</li>
<li><p>conf目录，存放tomcat相关的配置文件</p>
<p>其中最重要的一个配置文件就是server.xml</p>
<p>例如，在该文件中配置tomcat启动后监听的端口号</p>
</li>
<li><p>lib目录，存放项目运行时需要的jar包</p>
<p>这个目录中存放的是公共的jar包，部署到tomcat服务器中的多个web项目，可以共享这些jar包</p>
<p>例如，servlet-api.jar，在使用servlet规范编写代码的时候，需要该jar中的接口</p>
</li>
<li><p>logs目录，存放tomcat运行时的日志文件</p>
<p>tomcat把会运行时的重要信息记录下来</p>
<p>例如，tomcat中部署的web项目发生了严重错误</p>
</li>
<li><p>temp目录，存放tomcat运行时产生的临时文件</p>
<p>tomcat在运行期间，可能会产生一些临时文件，这些文件默认放到这个目录下</p>
</li>
<li><p>webapps目录，部署web项目的位置</p>
<p>把web项目部署到tomcat服务器中，其实就是把项目放到这个目录下面</p>
</li>
<li><p>work目录，编译Jsp页面后所存放的目录</p>
</li>
</ul>
<h3 id="2-5-端口"><a href="#2-5-端口" class="headerlink" title="2.5 端口"></a>2.5 端口</h3><p>tomcat启动后，会默认监听端口8080，如果和本机中的其他服务器程序(oracle)有冲突，可以在配置文件中进行修改：</p>
<p><code>conf/server.xml</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132232264.png" alt="image-20200928205335160"></p>
<p>例如，可以修改成8989</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132233106.png" alt="image-20200928205414023"></p>
<blockquote>
<p>注意，也可以修改成其它，自己想使用的端口号，和本地已有的程序没有冲突即可</p>
</blockquote>
<h3 id="2-6-运行"><a href="#2-6-运行" class="headerlink" title="2.6 运行"></a>2.6 运行</h3><p>因为tomcat软件是java编写的，所以在启动运行tomcat的时候，需要有JDK的支持，并且通过tomcat官网给出的版本关系图可知，当前使用的Tomcat 8.5 需要有JDK7或以上的版本支持。</p>
<p>第一步，安装JDK7或以上版本，并正确配置好JAVA_HOME，以便让Tomcat在启动时可以找到安装的JDK</p>
<p>第二步，运行bin目录下的启动文件即可（双击startup.bat）</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132233282.png" alt="image-20200928210142789"></p>
<blockquote>
<p>注意，如果出现命令窗口一闪而过，并且消失，那么很可能是JAVA_HOME配置问题</p>
</blockquote>
<blockquote>
<p>注意，这里出现日志显示乱码，是因为Windows中默认编码的问题</p>
</blockquote>
<h3 id="2-7-访问"><a href="#2-7-访问" class="headerlink" title="2.7 访问"></a>2.7 访问</h3><p>Tomcat成功启动后，可以使用URL地址，来访问部署到Tomcat中的web项目：</p>
<p><a href="http://localhost:8989/your_project/resource_in_project">http://localhost:8989/your_project/resource_in_project</a><br><a href="http://127.0.0.1:8989/your_project/resource_in_project">http://127.0.0.1:8989/your_project/resource_in_project</a></p>
<p>webapps目录是Tomcat中部署项目的位置，默认情况下，里面已经有了一些示例项目：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132233796.png" alt="image-20200928210721010"></p>
<blockquote>
<p>注意，webapps中，文件夹的名字，默认就是部署的项目名字</p>
</blockquote>
<p>例如，<a href="http://127.0.0.1:8989/examples/index.html">http://127.0.0.1:8989/examples/index.html</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132233426.png" alt="image-20200928210821686"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132233211.png" alt="image-20200928210912034"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132233570.png" alt="image-20200928210928468"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132233217.png" alt="image-20200928210941237"></p>
<h3 id="2-8-关闭"><a href="#2-8-关闭" class="headerlink" title="2.8 关闭"></a>2.8 关闭</h3><p>tomcat启动后，如果关闭，可以直接运行bin目录下的shutdown.bat文件，或者在tomcat的运行窗口的右上角，直接点击叉号：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132233650.png" alt="image-20200928211342512"></p>
<blockquote>
<p>注意，双击shutdown.bat关闭服务器和点击叉号关闭服务器，俩种虽然都可以关闭，但是关闭的细节有所不同，特殊场景下会导出程序再次运行的结果不同，后面在实际操作过程中，会具体解释</p>
</blockquote>
<blockquote>
<p>注意，代码+环境+操作 = 正常的程序执行结果</p>
</blockquote>
<h2 id="3-Project"><a href="#3-Project" class="headerlink" title="3 Project"></a>3 Project</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>在Tomcat中，部署的Web项目，是有固定的结构要求的，假设以web-test项目为例，进行说明。</p>
<p>这里描述的是，把web项目部署到Tomcat中之后的目录结构，并不是项目在Eclipse中的结构，所以Eclipse帮我们部署项目的时候，其实是把原来的项目结构进行处理，变为tomcat中要求的项目结构，然后再部署到tomcat里面的webapps目录中的。</p>
<p>对应一个web项目（例如，web-test），部署后最基本的项目结构为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">web-test/</span><br><span class="line">└─WEB-INF/</span><br><span class="line">    │  web.xml</span><br><span class="line">    │</span><br><span class="line">    ├─classes/</span><br><span class="line">    └─lib/</span><br></pre></td></tr></table></figure>

<p>其中，</p>
<p>web-test，它是项目的根目录，也是web项目的名字</p>
<ul>
<li>这里面一定要有子目录WEB-INF</li>
<li>除此之外，这里还可以存放web项目的静态资源（html、css、js、image）</li>
<li>这里还可以新建其它子目录</li>
</ul>
<p>WEB-INF，它是web项目中的核心目录，客户端浏览器是无法直接访问该目录下的资源</p>
<ul>
<li>classes，存放项目中编译好的class文件</li>
<li>lib，存放项目中使用到的第三方jar包（不会给其他tomcat部署的web项目共享）</li>
<li>web.xml，它是web项目中核心的配置文件，tomcat启动后会自动读取项目中web.xml文件</li>
</ul>
<h3 id="3-2-操作"><a href="#3-2-操作" class="headerlink" title="3.2 操作"></a>3.2 操作</h3><p>在桌面创建好web-test项目，其结构按照上面描述的规则。</p>
<p>然后进行以下操作，<strong>感受</strong>一个web项目编写、编译、部署、运行、访问的过程</p>
<p>1、新建index.html页面，存放到web-test项目目录下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2、在桌面创建java类（servlet）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ServletException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;title&gt;index&lt;/title&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;Hello World! briup&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3、编译此java类（servlet）</p>
<p>当前类中，使用到了servlet规范，需要用到servlet-api.jar，此jar包在tomcat中lib里面中，所以在编译的时候，需要指定jar所在的路径：</p>
<p><code>javac -cp D:\briup\apache-tomcat-8.5.58\lib\servlet-api.jar -d . HelloWorld.java</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132233637.png" alt="image-20200928215132763"></p>
<p>4、将编译好的class文件，连同包对应的目录，一起剪切到WEB-INF下面的classes目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132233057.png" alt="image-20200928215359894"></p>
<p>5、配置web.xml</p>
<p>在tomcat的目录中，有web.xml文件的配置模板：conf/web.xml</p>
<p>复制过来，进行修改，如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.briup.test.HelloWorld<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="comment">&lt;!-- 当前浏览器访问web-test项目中的动态资源/hello-world的时候--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tomcat会自动帮我们调用com.briup.test.HelloWorld中的方法来进行处理--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello-world<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>6、部署项目</p>
<p>将完成以上步骤的web-test项目，部署到tomcat中的webapps目录中。（复制过去即可）</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234649.png" alt="image-20200928220234198"></p>
<p>7、启动</p>
<p>如果tomcat之前已经启动了，可以关闭后重写启动。</p>
<p>8、访问</p>
<p>先访问web-test项目中的静态资源</p>
<p><a href="http://127.0.0.1:8989/web-test/index.html">http://127.0.0.1:8989/web-test/index.html</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234796.png" alt="image-20200928220545658"></p>
<p>再访问web-test项目中的动态资源</p>
<p><a href="http://127.0.0.1:8989/web-test/hello-world">http://127.0.0.1:8989/web-test/hello-world</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234475.png" alt="image-20200928220623329"></p>
<h3 id="3-3-思考"><a href="#3-3-思考" class="headerlink" title="3.3 思考"></a>3.3 思考</h3><p>以上例子中，我们新建了一个java类<code>HelloWorld</code>，此类中并没有编写main方法，只有一个<code>doGet</code>方法，那么最后我们通过浏览器访问/hello-world路径的时候，该方法是怎么执行的？</p>
<p>大致思路如下：</p>
<ol>
<li>浏览器发送请求，访问web-test项目中的/hello-world资源</li>
<li>tomcat接收到请求，根据web.xml文件的配置信息，找到/hello-world对应的是com.briup.test.HelloWorld</li>
<li>tomcat创建HelloWorld类的对象（反射）</li>
<li>tomcat调用HelloWorld对象中的方法</li>
<li>最后doGet方法被执行，向浏览器写回一个html页面的源代码</li>
<li>浏览器接到tomcat写回来的html页面源代码，解析并显示出来</li>
</ol>
<h2 id="4-Eclipse"><a href="#4-Eclipse" class="headerlink" title="4 Eclipse"></a>4 Eclipse</h2><p>上面示例，是自己通过手动的方式，创建一个web项目，然后再进行编写、编译、部署、启动、运行。</p>
<p>同时，也可以使用Eclipse来简化以上操作的步骤</p>
<h3 id="4-1-关联"><a href="#4-1-关联" class="headerlink" title="4.1 关联"></a>4.1 关联</h3><p>在Eclipse中，新建服务器，关联外部解压的tomcat</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234546.png" alt="image-20200928222557951"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234299.png" alt="image-20200928222617948"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234469.png" alt="image-20200928222700920"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234155.png" alt="image-20200928222718421"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234715.png" alt="image-20200928222756686"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234340.png" alt="image-20200928222838990"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234110.png" alt="image-20200928222859017"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132238143.png" alt="image-20200928223031128"></p>
<blockquote>
<p>此时，Eclipse中多了一个Servers的项目，里面是关联了外部tomcat的配置文件</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234472.png" alt="image-20200928223226355"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234871.png" alt="image-20200928223345650"></p>
<p>对默认配置进行修改，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234868.png" alt="image-20200928223455105"></p>
<blockquote>
<p>注意，第一个修改地方表示使用外部的tomcat的位置，第二个修改的地方表示web项目部署的位置</p>
</blockquote>
<p>如果还要修改端口号，也可以在这里修改：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234951.png" alt="image-20200928224641385"></p>
<h3 id="4-2-启动"><a href="#4-2-启动" class="headerlink" title="4.2 启动"></a>4.2 启动</h3><p>启动之前，可以先把之前手动不是的web-test项目，从webapps目录中删除掉。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234200.png" alt="image-20200928223607332"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234606.png" alt="image-20200928224006472"></p>
<blockquote>
<p>控制台中，可以看到tomcat启动的日志信息</p>
</blockquote>
<h3 id="4-2-关闭"><a href="#4-2-关闭" class="headerlink" title="4.2 关闭"></a>4.2 关闭</h3><p>在Eclipse，关闭已经启动的Tomcat服务器，也很简单。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234615.png" alt="image-20200928224358321"></p>
<p>或者，也可以点击console右上方的红点，直接停止JVM的运行，那么tomcat服务器也就停止了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234188.png" alt="image-20200928224457926"></p>
<h3 id="4-3-dynamic-web"><a href="#4-3-dynamic-web" class="headerlink" title="4.3 dynamic-web"></a>4.3 dynamic-web</h3><p>在Eclipse中，创建web项目，可以使用Eclipse中的动态web项目（dynamic  web）</p>
<h4 id="4-3-1-创建"><a href="#4-3-1-创建" class="headerlink" title="4.3.1 创建"></a>4.3.1 创建</h4><p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234262.png" alt="image-20200928225125715"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132234892.png" alt="image-20200928225158905"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235938.png" alt="image-20200928225449055"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235761.png" alt="image-20200928225547450"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235870.png" alt="image-20200928225750688"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235462.png" alt="image-20200928230110222"></p>
<p>如果之前没有打钩自动生成web.xml文件，这时候也可以点击项目然后自动生成：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235958.png" alt="image-20200928230230925"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235431.png" alt="image-20200928230339161"></p>
<blockquote>
<p>注意，如果需要关联servlet-api.jar的源代码，可以直接将apache-tomcat-8.5.58-src.zip配置关联过去即可</p>
</blockquote>
<h4 id="4-3-2-编写"><a href="#4-3-2-编写" class="headerlink" title="4.3.2 编写"></a>4.3.2 编写</h4><p>项目中，src里面是编写java源代码的地方</p>
<p><code>HelloWorld</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello-world&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;title&gt;index&lt;/title&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;Hello World! dynamic web&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里使用一个注解 <code>@WebServlet</code>，来代替了之前web.xml中的配置，其效果是一样的</p>
</blockquote>
<p>==思考，这里用到的servlet规范，在servlet-api.jar里面，此jar在什么地方，该项目是怎么引入的？==</p>
<p>项目中，WebContent里面是编写页面的地方</p>
<p><code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world!dynamic web<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235327.png" alt="image-20200928231330732"></p>
<h4 id="4-3-3-部署"><a href="#4-3-3-部署" class="headerlink" title="4.3.3 部署"></a>4.3.3 部署</h4><p>仔细观察会发现，此时Eclipse中的web项目结构，和要求的部署到Tomcat中的项目结构，是有所不同的，那么在部署的时候，Eclipse里会进行自动处理，因为Eclipse中对项目的部署做映射配置：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235095.png" alt="image-20200928231721322"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235815.png" alt="image-20200928231953209"></p>
<blockquote>
<p>默认情况下，Eclipse已经把当前的项目结构，和最后部署到Tomcat中的项目结构的对应关系，都配置好了</p>
</blockquote>
<p><strong>接下来部署项目：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235359.png" alt="image-20200928232133403"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235343.png" alt="image-20200928232144212"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235486.png" alt="image-20200928232157368"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235319.png" alt="image-20200928232217507"></p>
<h4 id="4-3-4-启动"><a href="#4-3-4-启动" class="headerlink" title="4.3.4 启动"></a>4.3.4 启动</h4><p>部署完成后，就可以启动tomcat了</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235248.png" alt="image-20200928232300519"></p>
<p>启动成功后，观察tomcat中的webapps目录里面，是否已经完成了项目部署：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235713.png" alt="image-20200928232422146"></p>
<h4 id="4-3-5-访问"><a href="#4-3-5-访问" class="headerlink" title="4.3.5 访问"></a>4.3.5 访问</h4><p>访问静态资源：</p>
<p><a href="http://127.0.0.1:8989/dynamic-web/index.html">http://127.0.0.1:8989/dynamic-web/index.html</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132235992.png" alt="image-20200928232510037"></p>
<p>访问动态资源：</p>
<p><a href="http://127.0.0.1:8989/dynamic-web/hello-world">http://127.0.0.1:8989/dynamic-web/hello-world</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236656.png" alt="image-20200928232537584"></p>
<h4 id="4-3-6-移除"><a href="#4-3-6-移除" class="headerlink" title="4.3.6 移除"></a>4.3.6 移除</h4><p>项目如果不需要运行了，还可以从tomcat的部署中移除：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236980.png" alt="image-20200928232644327"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236319.png" alt="image-20200928232716802"></p>
<p>观察tomcat中的webapps目录中是否已经将当前项目给移除：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236234.png" alt="image-20200928232744989"></p>
<p>因为项目移除了，此时浏览器访问会出现404，资源找不到的情况：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236145.png" alt="image-20200928233122326"></p>
<h3 id="4-4-maven-web"><a href="#4-4-maven-web" class="headerlink" title="4.4 maven-web"></a>4.4 maven-web</h3><p>在Eclipse中，创建web项目，还可以使用maven项目</p>
<h4 id="4-4-1-创建"><a href="#4-4-1-创建" class="headerlink" title="4.4.1 创建"></a>4.4.1 创建</h4><p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236632.png" alt="image-20200928233325758"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236128.png" alt="image-20200928233343830"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236653.png" alt="image-20200928233530045"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236351.png" alt="image-20200928233606264"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236439.png" alt="image-20200928234300664"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236000.png" alt="image-20220512103524555"></p>
<p>在webapp中，新建目录WEB-INF，里面在新建web.xml</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236616.png" alt="image-20200928234426964"></p>
<p><code>web.xml</code> 文件内容： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">display-name</span>&gt;</span>maven-web<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以复制之前的web.xml，修改下即可</p>
</blockquote>
<p>配置pom.xml文件，指定maven项目的JDK版本、项目编码、以及相关项目依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.briup.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 引入servlet3.1的依赖 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">&lt;!-- 引入jstl的依赖，jsp页面中会使用到 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里将servlet的依赖范围（scope）设置为了provided，因为tomcat的lib目录中也有这个jar包，将来部署的时候，使用tomcat自带的jar包即可</p>
</blockquote>
<p>修改完这些配置后，记得对maven项目进行update操作：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236897.png" alt="image-20200928234927413"></p>
<p>此时，maven项目中就不会报错了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236135.png" alt="image-20200928235011223"></p>
<blockquote>
<p>注意，因为maven项目中会对web.xml文件进行验证，从网络上下载schame，但是可能会因为网络原因下载验证失败，导致maven项目还会报错，这个错误不影响运行，或多更新几次项目就可以了。</p>
</blockquote>
<blockquote>
<p>注意，此时的maven项目并没有像动态web项目一样，引用了tomcat的运行环境，而且我们在pom文件中，自己添加了依赖，将需要用的的servlet-api.jar引入了进来</p>
</blockquote>
<h4 id="4-4-2-编写"><a href="#4-4-2-编写" class="headerlink" title="4.4.2 编写"></a>4.4.2 编写</h4><p>在maven项目中，完成和上面项目中一样的功能，进行测试。</p>
<p>项目中，src/main/java里面是编写java源代码的地方</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello-world&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;title&gt;index&lt;/title&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;Hello World! maven web&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里输出的是maven web，之前上个例子有所不同</p>
</blockquote>
<p>项目中，webapp里面是编写页面的地方</p>
<p><code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236069.png" alt="image-20200928235843519"></p>
<h4 id="4-4-3-部署"><a href="#4-4-3-部署" class="headerlink" title="4.4.3 部署"></a>4.4.3 部署</h4><p>Eclipse中，也对Maven项目，做了部署映射，可以将maven项目的结构，转换为Tomcat中部署项目的结构要求：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132236836.png" alt="image-20200929000015319"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237705.png" alt="image-20200929000050330"></p>
<blockquote>
<p>所以，maven项目的结构虽然和Tomcat中部署项目的结构有很大区别，但是最终部署完成后，还是会变成最终要求的项目结构</p>
</blockquote>
<p>接下来进行项目的部署：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237905.png" alt="image-20200929000230541"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237642.png" alt="image-20200929000304499"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237468.png" alt="image-20200929000325275"></p>
<h4 id="4-4-4-启动"><a href="#4-4-4-启动" class="headerlink" title="4.4.4 启动"></a>4.4.4 启动</h4><p>部署完成后，就可以启动tomcat了，如果已经启动了，也可以重启一次。</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237020.png" alt="image-20200929000447419"></p>
<p>启动成功后，观察tomcat中的webapps目录里面，是否已经完成了项目部署：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237794.png" alt="image-20200929000522218"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237331.png" alt="image-20220512110054611"></p>
<h4 id="4-4-5-访问"><a href="#4-4-5-访问" class="headerlink" title="4.4.5 访问"></a>4.4.5 访问</h4><p>访问静态资源：</p>
<p><a href="http://127.0.0.1:8989/maven-web/index.html">http://127.0.0.1:8989/maven-web/index.html</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237115.png" alt="image-20200929000612531"></p>
<p>访问动态资源：</p>
<p><a href="http://127.0.0.1:8989/maven-web/hello-world">http://127.0.0.1:8989/maven-web/hello-world</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237403.png" alt="image-20200929000712569"></p>
<h4 id="4-4-6-移除"><a href="#4-4-6-移除" class="headerlink" title="4.4.6 移除"></a>4.4.6 移除</h4><p>项目如果不需要运行了，还可以从tomcat的部署中移除：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237499.png" alt="image-20200929000824385"></p>
<blockquote>
<p>注意，如果tomact还在运行期间，把项目移除了，可能会导致控制台中输出错误信息，但是这个影响，重新启动tomcat就可以了。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237805.png" alt="image-20200929000934737"></p>
<p>观察tomcat中的webapps目录中是否已经将当前项目给移除：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237141.png" alt="image-20200929001001172"></p>
<p>因为项目移除了，此时浏览器访问会出现404，资源找不到的情况：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237814.png" alt="image-20200929001046633"></p>
<h2 id="5-Http"><a href="#5-Http" class="headerlink" title="5 Http"></a>5 Http</h2><blockquote>
<p>在上面的测试中，客户端浏览器和tomcat服务器进行访问交互，其采用的协议是http，该协议规定了客户端和服务器之间的交互方式，以及交互内容的格式要求。</p>
</blockquote>
<h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>超文本传输协议 (HTTP-Hypertext transfer protocol) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。HTTP是一个应用层协议，由请求和响应构成，是一个标准的客户端服务器模型。</p>
<h3 id="5-2-交互方式"><a href="#5-2-交互方式" class="headerlink" title="5.2 交互方式"></a>5.2 交互方式</h3><p>http协议规定，默认情况下：</p>
<ul>
<li>先由客户端（浏览器）向服务器（tomcat）发送请求（request）</li>
<li>服务器接收到请求后，根据请求的资源路径，在服务器内部部署的项目中，查找是否有该资源</li>
<li>如果该资源存在，那么服务器就会将该资源返回（静态资源），或者把该资源的运行结果返回（动态资源）</li>
<li>如果该资源不存在，那么服务器就会返回一个状态码（404），表示本次访问的资源找不到</li>
<li>不管资源存在还是不存在，服务器都会针对这次请求，返回一个结果，这个结果就被称之为响应（response）</li>
<li>客户端（浏览器）接收到本次请求的响应内容后，解析并显示出来</li>
</ul>
<p>此时，本次http协议下的访问结束。用户还可以再次发出请求，那么就重复上述过程。</p>
<h3 id="5-3-内容格式"><a href="#5-3-内容格式" class="headerlink" title="5.3 内容格式"></a>5.3 内容格式</h3><blockquote>
<p>无论是客户端发送的请求内容，还是服务器返回的响应内容，在http协议中，都是有固定的格式要求的。</p>
</blockquote>
<h4 id="5-3-1-请求"><a href="#5-3-1-请求" class="headerlink" title="5.3.1 请求"></a>5.3.1 请求</h4><p>客户端发送到服务器端的请求消息，称之为请求(request)，其实就是一个按照http协议的规则拼接而成的字符串</p>
<p>Request请求消息包含三部分：</p>
<ul>
<li>请求行，request line</li>
<li>消息报头（请求头），request head</li>
<li>请求正文，request body</li>
</ul>
<p><strong>1、请求行，request line</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//格式: CRLF表示回车和换行</span><br><span class="line">Method Request-URI HTTP-Version CRLF</span><br></pre></td></tr></table></figure>

<ul>
<li>Method表示请求方法；一般为GET或者POST</li>
<li>Request-URI是一个统一资源标识符，本次请求的资源路径</li>
<li>HTTP-Version表示请求的HTTP协议版本，HTTP/1.1</li>
</ul>
<p>例如，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test.html HTTP/1.1</span><br></pre></td></tr></table></figure>



<p><strong>2、消息报头（请求头），request head</strong></p>
<blockquote>
<p>注意，此部分作为了解，遇到具体情况再进行查阅即可</p>
</blockquote>
<p>http请求报头的生成，主要有三种情况：</p>
<ul>
<li><p>浏览器自动生成的请求</p>
<p>绝大部分正常用户访问都是这类情况，只要是用户主动输入网址访问时发送的http请求，那这些头部字段都是浏览器自动生成的，比如host，cookie，user-agent, Accept-Encoding:等</p>
</li>
<li><p>浏览器插件</p>
<p>javascript脚本增加或者修改的header。JS能够控制浏览器发起请求，也能在这里增加一些header，但是考虑到安全和性能的原因，对JS控制 header的能力做了一些限制，比如host和cookie, user-agent等这些字段，JS是无法干预的</p>
</li>
<li><p>中间代理</p>
<p>如果用户请求要经过一些中间代理（比如运营商或者公司网关），中间代理能够查看和修改用户的全部数据和任何头部字段。除非使用了HTTPS</p>
</li>
</ul>
<p>http消息报头包括普通报头、请求报头、响应报头、实体报头这四大类，它们的作用是描述 客户端或者服务器 的属性，并且都是由 名字+冒号+空格+值 组成，例如， Content-Type: text/html</p>
<ul>
<li><p>普通报头</p>
<p>即可用于请求，也可用于响应，是作为一个整体而不是特定资源与事务相关联</p>
<p>例如，</p>
<p>Cache-Control<br>Connection<br>Date<br>Pragma<br>Transfer-Encoding<br>Upgrade<br>Via</p>
</li>
<li><p>请求报头</p>
<p>允许客户端传递关于自身信息和希望的响应形式</p>
<p>例如，</p>
<p>Accept<br>Accept-Charset<br>Accept-Encoding<br>Accept-Language<br>Authorization<br>Host<br>User-Agent<br>From<br>If-Modified-Since<br>If-Match<br>If-None-Match<br>If-Range<br>If-Unmodified-Since<br>Max-Forwards<br>Proxy-Authorization<br>Range<br>Referer</p>
</li>
<li><p>响应报头</p>
<p>允许服务器传递关于自身信息的响应</p>
<p>例如，</p>
<p>Location<br>Server<br>WWW-Authenticate<br>Age<br>Proxy-Authenticate<br>Public<br>Retry-After<br>Vary<br>Warning</p>
</li>
<li><p>实体报头</p>
<p>定义被传送资源的信息。即可用于请求，也可用于响应</p>
<p>例如，</p>
<p>Content-Encoding<br>Content-Language<br>Content-Length<br>Content-Type<br>Last-Modified<br>Expires<br>Allow<br>Content-Base<br>Content-Location<br>Content-MD5<br>Content-Range<br>Etag<br>extension-header</p>
</li>
</ul>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test.html HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:9999</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,en;q=0.8,zh;q=0.5,en-US;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure>

<p>​        </p>
<p>具体的可以在浏览器的web控制台中，进行查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132237163.png" alt="image-20200929004449654"></p>
<p><strong>3、请求正文，request body</strong></p>
<p>请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。</p>
<p>请求正文中可以包含客户提交的字符串信息</p>
<p>例如，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /test.html HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:9999</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,en;q=0.8,zh;q=0.5,en-US;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">id=1&amp;name=tom&amp;age=20</span><br></pre></td></tr></table></figure>



<h4 id="5-3-2-响应"><a href="#5-3-2-响应" class="headerlink" title="5.3.2 响应"></a>5.3.2 响应</h4><p>服务器在接收和解析客户端的请求消息后，会返回给客户端一个HTTP响应消息（response）。</p>
<p>其实也是一个按照http协议的规则拼接而成的一个字符串。</p>
<p>HTTP响应也是由三个部分组成：</p>
<ul>
<li>响应状态行，response status line</li>
<li>消息报头（响应头），response head</li>
<li>响应正文，response body</li>
</ul>
<p><strong>1、响应状态行，response status line</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//格式如下：CRLF表示回车和换行</span><br><span class="line">HTTP-Version Status-Code Reason-Phrase CRLF</span><br></pre></td></tr></table></figure>

<ul>
<li>HTTP-Version表示服务器HTTP协议的版本</li>
<li>Status-Code表示服务器发回的响应状态代码</li>
<li>Reason-Phrase表示状态代码的文本描述</li>
</ul>
<p>例如，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure>



<p>关于响应状态代码，共分为5种类型：</p>
<table>
<thead>
<tr>
<th align="left">分类</th>
<th align="left">分类描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1xx</td>
<td align="left">信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td align="left">2xx</td>
<td align="left">成功，操作被成功接收并处理</td>
</tr>
<tr>
<td align="left">3xx</td>
<td align="left">重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td align="left">4xx</td>
<td align="left">客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td align="left">5xx</td>
<td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
<p><strong>HTTP状态码列表</strong></p>
<table>
<thead>
<tr>
<th align="left">状态码</th>
<th align="left">状态码英文名称</th>
<th align="left">中文描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">100</td>
<td align="left">Continue</td>
<td align="left">继续。客户端应继续其请求</td>
</tr>
<tr>
<td align="left">101</td>
<td align="left">Switching Protocols</td>
<td align="left">切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">200</td>
<td align="left">OK</td>
<td align="left">请求成功。一般用于GET与POST请求</td>
</tr>
<tr>
<td align="left">201</td>
<td align="left">Created</td>
<td align="left">已创建。成功请求并创建了新的资源</td>
</tr>
<tr>
<td align="left">202</td>
<td align="left">Accepted</td>
<td align="left">已接受。已经接受请求，但未处理完成</td>
</tr>
<tr>
<td align="left">203</td>
<td align="left">Non-Authoritative Information</td>
<td align="left">非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本</td>
</tr>
<tr>
<td align="left">204</td>
<td align="left">No Content</td>
<td align="left">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td>
</tr>
<tr>
<td align="left">205</td>
<td align="left">Reset Content</td>
<td align="left">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域</td>
</tr>
<tr>
<td align="left">206</td>
<td align="left">Partial Content</td>
<td align="left">部分内容。服务器成功处理了部分GET请求</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">300</td>
<td align="left">Multiple Choices</td>
<td align="left">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td>
</tr>
<tr>
<td align="left">301</td>
<td align="left">Moved Permanently</td>
<td align="left">永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替</td>
</tr>
<tr>
<td align="left">302</td>
<td align="left">Found</td>
<td align="left">临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</td>
</tr>
<tr>
<td align="left">303</td>
<td align="left">See Other</td>
<td align="left">查看其它地址。与301类似。使用GET和POST请求查看</td>
</tr>
<tr>
<td align="left">304</td>
<td align="left">Not Modified</td>
<td align="left">未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源</td>
</tr>
<tr>
<td align="left">305</td>
<td align="left">Use Proxy</td>
<td align="left">使用代理。所请求的资源必须通过代理访问</td>
</tr>
<tr>
<td align="left">306</td>
<td align="left">Unused</td>
<td align="left">已经被废弃的HTTP状态码</td>
</tr>
<tr>
<td align="left">307</td>
<td align="left">Temporary Redirect</td>
<td align="left">临时重定向。与302类似。使用GET请求重定向</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">400</td>
<td align="left">Bad Request</td>
<td align="left">客户端请求的语法错误，服务器无法理解</td>
</tr>
<tr>
<td align="left">401</td>
<td align="left">Unauthorized</td>
<td align="left">请求要求用户的身份认证</td>
</tr>
<tr>
<td align="left">402</td>
<td align="left">Payment Required</td>
<td align="left">保留，将来使用</td>
</tr>
<tr>
<td align="left">403</td>
<td align="left">Forbidden</td>
<td align="left">服务器理解请求客户端的请求，但是拒绝执行此请求</td>
</tr>
<tr>
<td align="left">404</td>
<td align="left">Not Found</td>
<td align="left">服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面</td>
</tr>
<tr>
<td align="left">405</td>
<td align="left">Method Not Allowed</td>
<td align="left">客户端请求中的方法被禁止</td>
</tr>
<tr>
<td align="left">406</td>
<td align="left">Not Acceptable</td>
<td align="left">服务器无法根据客户端请求的内容特性完成请求</td>
</tr>
<tr>
<td align="left">407</td>
<td align="left">Proxy Authentication Required</td>
<td align="left">请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权</td>
</tr>
<tr>
<td align="left">408</td>
<td align="left">Request Time-out</td>
<td align="left">服务器等待客户端发送的请求时间过长，超时</td>
</tr>
<tr>
<td align="left">409</td>
<td align="left">Conflict</td>
<td align="left">服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突</td>
</tr>
<tr>
<td align="left">410</td>
<td align="left">Gone</td>
<td align="left">客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置</td>
</tr>
<tr>
<td align="left">411</td>
<td align="left">Length Required</td>
<td align="left">服务器无法处理客户端发送的不带Content-Length的请求信息</td>
</tr>
<tr>
<td align="left">412</td>
<td align="left">Precondition Failed</td>
<td align="left">客户端请求信息的先决条件错误</td>
</tr>
<tr>
<td align="left">413</td>
<td align="left">Request Entity Too Large</td>
<td align="left">由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息</td>
</tr>
<tr>
<td align="left">414</td>
<td align="left">Request-URI Too Large</td>
<td align="left">请求的URI过长（URI通常为网址），服务器无法处理</td>
</tr>
<tr>
<td align="left">415</td>
<td align="left">Unsupported Media Type</td>
<td align="left">服务器无法处理请求附带的媒体格式</td>
</tr>
<tr>
<td align="left">416</td>
<td align="left">Requested range not satisfiable</td>
<td align="left">客户端请求的范围无效</td>
</tr>
<tr>
<td align="left">417</td>
<td align="left">Expectation Failed</td>
<td align="left">服务器无法满足Expect的请求头信息</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">500</td>
<td align="left">Internal Server Error</td>
<td align="left">服务器内部错误，无法完成请求</td>
</tr>
<tr>
<td align="left">501</td>
<td align="left">Not Implemented</td>
<td align="left">服务器不支持请求的功能，无法完成请求</td>
</tr>
<tr>
<td align="left">502</td>
<td align="left">Bad Gateway</td>
<td align="left">作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</td>
</tr>
<tr>
<td align="left">503</td>
<td align="left">Service Unavailable</td>
<td align="left">由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中</td>
</tr>
<tr>
<td align="left">504</td>
<td align="left">Gateway Time-out</td>
<td align="left">充当网关或代理的服务器，未及时从远端服务器获取请求</td>
</tr>
<tr>
<td align="left">505</td>
<td align="left">HTTP Version not supported</td>
<td align="left">服务器不支持请求的HTTP协议的版本，无法完成处理</td>
</tr>
</tbody></table>
<p><strong>常见状态码&amp;含义</strong></p>
<pre><code> 200 - 请求成功，已经正常处理完毕
</code></pre>
<p>​    301 - 请求永久重定向，转移到其它URL</p>
<p>​    302 - 请求临时重定向</p>
<p>​    304 - 请求被重定向到客户端本地缓存</p>
<p>​    400 - 客户端请求存在语法错误</p>
<p>​    401 - 客户端请求没有经过授权</p>
<p>​    403 - 客户端的请求被服务器拒绝，一般为客户端没有访问权限</p>
<p>​    404 - 客户端请求的URL在服务端不存在</p>
<p>​    500 - 服务端错误</p>
<p><strong>2、消息报头（响应头），response head</strong></p>
<p>和请求报头中的描述一致。</p>
<p>额外的，在响应的消息报头中，一般都会有Content-Type字段，用来告诉浏览器，本次响应回去的内容是什么类型的数据，浏览器可以根据就这个对内容进行解析。</p>
<p>例如，如果响应的数据是html，则响应报头中应该有，<code>Content-Type: text/html</code></p>
<p>例如，如果响应的数据是xml，则响应报头中应该有，<code>Content-Type: text/xml</code></p>
<p>例如，如果响应的数据是普通文本，则响应报头中应该有，<code>Content-Type: text/plain</code></p>
<p>例如，如果响应的数据是png图片，则响应报头中应该有，<code>Content-Type: image/png</code></p>
<p><strong>3、响应正文，response body</strong></p>
<p>响应正文就是服务器返回的资源的内容，响应正文和消息报头之间也需要有一个空行！</p>
<p>例如，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html;charset=ISO-8859-1</span><br><span class="line">Content-Length: 106</span><br><span class="line">Date: Mon, 28 Sep 2020 16:59:15 GMT</span><br><span class="line">Keep-Alive: timeout=20</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Hello World! maven web&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<p>具体的可以在浏览器的控制台中查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132238815.png" alt="image-20200929010159867"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132239046.png" alt="image-20200929010227874"></p>
<h1 id="servlet（二）"><a href="#servlet（二）" class="headerlink" title="servlet（二）"></a>servlet（二）</h1><h2 id="1-实现方式"><a href="#1-实现方式" class="headerlink" title="1 实现方式"></a>1 实现方式</h2><h3 id="1-1-概述-1"><a href="#1-1-概述-1" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>Servlet技术可以扩展服务器端的功能，让java代码在服务器端也能成为一种资源（动态资源），客户端浏览器可以通过指定的资源地址（URI），来访问这个java代码（Servlet），同时在Servlet代码中，还可以使用IO流把结果写回给浏览器。</p>
<p>按照Servlet规范要求，编写一个Servlet程序，只需要让自己的类实现<code>javax.servlet.Servlet</code>接口就可以了，但是该接口也有一些默认的实现类，所以除了实现接口的方式之外，我们也可以继承它默认的几个实现类，并且重写指定方法，也同样可以完成Servlet程序的编写。</p>
<h3 id="1-2-Servlet"><a href="#1-2-Servlet" class="headerlink" title="1.2 Servlet"></a>1.2 Servlet</h3><p><code>javax.servlet.Servlet</code></p>
<p>它是Servlet技术的核心接口，所有的Servlet程序，都必须是该接口的实现类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化servlet对象的时候被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回ServletConfig对象,该对象封装了Servlet的配置信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问servlet对象的时候被调用（最重要的方法）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回servlet相关信息,比如作者、版本、版权等</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁servlet对象的时候被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在这五个方法中，最重要的是 <code>service(ServletRequest req, ServletResponse res)</code>方法，因为当客户端浏览器通过指定地址访问该Servlet的时候，Tomcat会自动调用Servlet中的service方法。</p>
<p>service方法的作用就是处理客户端浏览器发送的请求，并且写回本次请求的响应内容，所以我们在重写的service方法中，可以按照当前的功能需求，来完成代码的编写。</p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//接收请求中携带的参数，指定参数名为name</span></span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//设置本次响应回去内容的类型，并且指定了编码，这是给浏览器看的</span></span><br><span class="line">		res.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//通过响应对象获取输出流</span></span><br><span class="line">		PrintWriter out = res.getWriter();</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//给浏览器写回内容</span></span><br><span class="line">		out.println(<span class="string">&quot;hello! &quot;</span>+name);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>web.xml</code>中进行配置，目的是为了告诉tomcat，这个servlet对应的URI地址是什么，其实就是一种映射关系的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.briup.test.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>通过url地址访问此Servlet，并且携带参数：</p>
<p><a href="http://127.0.0.1:8989/servlet-test/hello?name=tom">http://127.0.0.1:8989/servlet-test/hello?name=tom</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132226977.png" alt="image-20200929165014319"></p>
<blockquote>
<p>可以看出，响应头信息中的Content-Type字段值，就是我们在Servlet中进行设置的值</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132226729.png" alt="image-20200929165110420"></p>
<blockquote>
<p>火狐浏览器中还提供了详细的字段解释说明，在电脑联网的时候，可以点击字段前面的问号进行查看</p>
</blockquote>
<h3 id="1-3-GenericServlet"><a href="#1-3-GenericServlet" class="headerlink" title="1.3 GenericServlet"></a>1.3 GenericServlet</h3><p><code>javax.servlet.GenericServlet</code></p>
<p>它是一个抽象类，它对Servlet接口中的方法进行了默认实现，但是最重要的<code>service</code>方法并没有实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>,</span></span><br><span class="line"><span class="class">        <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getInitParameterNames();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getServletConfig().getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// NOOP by default</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        getServletContext().log(getServletName() + <span class="string">&quot;: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">        getServletContext().log(getServletName() + <span class="string">&quot;: &quot;</span> + message, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> config.getServletName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，该类中，实现了Servlet接口中的init(ServletConfig config)方法，同时又重载了一个无参的init方法，并且有参数的init方法中又调用了这个重载的无参init方法。</p>
<p>由此可知，将来我们对Servlet进行初始化操作的时候，重写这个无参的init方法即可。</p>
</blockquote>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello-generic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloGenericServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		res.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = res.getWriter();</span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;hello!&quot;</span>+name);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里使用注解<code>@WebServlet</code>来代替web.xml中的映射配置，俩者的效果是一样的</p>
</blockquote>
<blockquote>
<p>注意，这种方式只要实现一个<code>service</code>方法即可，其他方法在父类中已经进行了默认实现</p>
</blockquote>
<p>通过url地址访问此Servlet，并且携带参数：</p>
<p><a href="http://127.0.0.1:8989/servlet-test/hello-generic?name=tom">http://127.0.0.1:8989/servlet-test/hello-generic?name=tom</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132226402.png" alt="image-20200929171544550"></p>
<h3 id="1-4-HttpServlet"><a href="#1-4-HttpServlet" class="headerlink" title="1.4 HttpServlet"></a>1.4 HttpServlet</h3><p><code>javax.servlet.http.HttpServlet</code></p>
<p>它是一个抽象类，但是类中没有抽象方法。</p>
<p>它继承了 <code>GenericServlet</code>，对接收到的客户端请求，进行了细分，对应不同的请求类型：</p>
<ul>
<li>DELETE</li>
<li>HEAD</li>
<li>GET</li>
<li>OPTIONS</li>
<li>POST</li>
<li>PUT</li>
<li>TRACE</li>
</ul>
<p>分别使用不同的方法进行处理。</p>
<p>例如，当前如果是GET请求，那么就调用doGet方法进行处理，当前如果是POST请求，那么就调用doPost方法进行处理，所以在HttpServlet中，定义了很多doXxx方法，用来处理不同类型的请求。</p>
<p>源码较长，这里给出部分代码，能说明问题即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_DELETE = <span class="string">&quot;DELETE&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_HEAD = <span class="string">&quot;HEAD&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_GET = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_OPTIONS = <span class="string">&quot;OPTIONS&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_POST = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_PUT = <span class="string">&quot;PUT&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_TRACE = <span class="string">&quot;TRACE&quot;</span>;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHead</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (DispatcherType.INCLUDE.equals(req.getDispatcherType())) &#123;</span><br><span class="line">            doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            NoBodyResponse response = <span class="keyword">new</span> NoBodyResponse(resp);</span><br><span class="line">            doGet(req, response);</span><br><span class="line">            response.setContentLength();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_put_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(HttpServletRequest req,</span></span></span><br><span class="line"><span class="params"><span class="function">                            HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String msg = lStrings.getString(<span class="string">&quot;http.method_delete_not_supported&quot;</span>);</span><br><span class="line">        sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOptions</span><span class="params">(HttpServletRequest req,</span></span></span><br><span class="line"><span class="params"><span class="function">            HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doTrace</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//..</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                    <span class="comment">// Invalid date header - proceed as if none was set</span></span><br><span class="line">                    ifModifiedSince = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; (lastModified / <span class="number">1000</span> * <span class="number">1000</span>)) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request = (HttpServletRequest) req;</span><br><span class="line">            response = (HttpServletResponse) res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(lStrings.getString(<span class="string">&quot;http.non_http&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意1，HttpServlet是抽象类，但是里面没有抽象方法</p>
<p>注意2，HttpServlet继承了GenericServlet，实现了service方法，并且对service方法进行了重载</p>
<p>注意3，实现的service方法中，对请求和响应进行了强制类型转换，将普通的请求和响应对象，强制转换成了针对HTTP协议的请求和响应，然后调用重载的service方法，将转换的请求和响应传入</p>
<p>注意4，重载后的service方法中，根据当前请求的类型（get、post获取其他），再调用对应的doXxx方法进行处理</p>
<p>注意5，doXxx方法中会有一些默认的实现，例如doGet方法中会默认返回<code>http.method_delete_not_supported</code></p>
<p>由以上代码可知，我们编写子类继承 <code>HttpServlet</code>，并且重写方法即可，如果需要处理GET方式的请求，那么就重写doGet方法，如果需要处理POST方式的请求，那么就重写doPost方法。</p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello-http-servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloHttpServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = resp.getWriter();</span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;GET: hello！&quot;</span>+name);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = resp.getWriter();</span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;POST: hello！&quot;</span>+name);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在页面中编写一个表单，跳转表单提交的方式，来最终观察get和post方式发送请求后，Servlet中方法调用情况：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;hello-http-servlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">		用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据测试结果可知，当前页面中发送GET请求的时候，Servlet中的doGet方法被调用，当页面中发送POST请求的时候，Servlet中的doPost方法被调用</p>
</blockquote>
<h2 id="2-GET和POST"><a href="#2-GET和POST" class="headerlink" title="2 GET和POST"></a>2 GET和POST</h2><blockquote>
<p>HTTP协议中，定义了很多种请求的方式，但是浏览器默认情况下，只能发出GET方式请求和POST方式请求</p>
</blockquote>
<h3 id="2-1-常见情况"><a href="#2-1-常见情况" class="headerlink" title="2.1 常见情况"></a>2.1 常见情况</h3><p>在页面中，常见的发送GET方式请求的情况有：</p>
<ul>
<li>浏览器地址栏直接输入地址访问</li>
<li>超链接访问  <a href=""></li>
<li><code>&lt;image src=&quot;&quot;&gt;</code>访问图片</li>
<li>外部js文件的引入</li>
<li>外部css文件的引入</li>
<li>表单提交数据，method=”get”</li>
<li>在javascript代码中访问资源</li>
<li>ajax中设置请求为get方式</li>
<li>使用jsp相关标签访问资源</li>
</ul>
<p>在页面中，常见的发送POST方式请求的情况有：</p>
<ul>
<li>表单提交数据，method=”post”</li>
<li>ajax中设置请求为post方式</li>
</ul>
<blockquote>
<p>可以看出，浏览器中发出的请求，大多数都是GET方式请求</p>
</blockquote>
<h3 id="2-2-特点区别"><a href="#2-2-特点区别" class="headerlink" title="2.2 特点区别"></a>2.2 特点区别</h3><p>http协议下的请求格式为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1部分: 请求行   get /hello http 1.1			</span><br><span class="line">2部分: 请求头部/消息报头	</span><br><span class="line">3部分: \r\n</span><br><span class="line">4部分: 请求正文	参数放的位置</span><br></pre></td></tr></table></figure>



<p>GET方式传参数，参数在uri后面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /hello?name=tom HTTP1.1</span><br><span class="line">key: value</span><br><span class="line">key: value</span><br><span class="line">key: value</span><br><span class="line">.....</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GET方式传参，参数会显示在地址栏中，并且参数的长度也会被地址栏的长度而限制</p>
</blockquote>
<p>post方式传参，参数在请求正文中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /hello HTTP1.1</span><br><span class="line">key: value</span><br><span class="line">key: value</span><br><span class="line">key: value</span><br><span class="line">.....</span><br><span class="line">\r\n</span><br><span class="line">name=tom</span><br></pre></td></tr></table></figure>

<blockquote>
<p>POST方式传参，参数不会显示在地址中，而是在请求体中，并且参数长度并没有直接限制</p>
</blockquote>
<h2 id="3-生命周期"><a href="#3-生命周期" class="headerlink" title="3 生命周期"></a>3 生命周期</h2><blockquote>
<p>Servlet生命周期，是指一个Servlet创建、初始化、执行、销毁的过程</p>
</blockquote>
<h3 id="3-1-创建"><a href="#3-1-创建" class="headerlink" title="3.1 创建"></a>3.1 创建</h3><p>项目中，编写Servlet程序，然后进行映射配置（指定URI地址），最后把项目部署到Tomcat中运行。</p>
<p>在Tomcat启动过程中，会检查Servlet的配置，根据配置来决定Servlet实例何时创建：</p>
<ul>
<li>第一次被访问的时候创建（默认）</li>
<li>Tomcat启动过程中创建（需要配置）</li>
</ul>
<p><strong>第一次被访问的时候创建：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LifeServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet创建&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet执行&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>life<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.briup.test.LifeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>life<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/life<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>从结果可以看出，只有第一次访问的时候创建了servlet实例，之后就不再创了，访问后直接执行方法</p>
</blockquote>
<blockquote>
<p>注意，servlet在运行期间是单例模式</p>
</blockquote>
<p><strong>Tomcat启动过程中创建：</strong></p>
<p>配置中加入标签 <code>&lt;load-on-startup&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>life<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.briup.test.LifeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>life<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/life<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>修改配置后，启动Tomcat过程中，就可以看到servlet实例被创建，如果有多个servlet实例都需要在启动期间进创建，那么 <code>&lt;load-on-startup&gt;</code> 标签中的值越小，越会被优先创建 (该值&gt;=0)</p>
</blockquote>
<h3 id="3-2-初始化"><a href="#3-2-初始化" class="headerlink" title="3.2 初始化"></a>3.2 初始化</h3><p>Servlet实例被创建之后，Tomcat还会调用Servlet实例中的init方法，来对该Servlet实例做初始化工作，所以如果有需要，我们可以重写Servlet中的init方法（重写无参init即可），给当前Servlet做初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LifeServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet创建&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet初始化&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet执行&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看出，Tomcat创建Servlet实例之后，就会调用其init方法做初始化工作</p>
</blockquote>
<p><strong>初始化传参：</strong></p>
<p>通过配置，我们可以给Servlet进行初始化参数，init方法中可以通过<code>ServletConfig</code>对象来获取该参数。</p>
<p>在配置中，使用<code>&lt;init-param&gt;</code>可以进行初始化传参</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>life<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.briup.test.LifeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>briup<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>life<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/life<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LifeServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet创建&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet初始化&quot;</span>);</span><br><span class="line">		String username = getServletConfig().getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		String password = getServletConfig().getInitParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;\t初始化参数：username=&quot;</span>+username);</span><br><span class="line">		System.out.println(<span class="string">&quot;\t初始化参数：password=&quot;</span>+password);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet执行&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，<code>getServletConfig()</code>方法在父类中已经实现，该方法可以返回ServletConifg对象，对象中封装了当前Servlet的相关配置信息</p>
</blockquote>
<h3 id="3-3-执行"><a href="#3-3-执行" class="headerlink" title="3.3 执行"></a>3.3 执行</h3><p>当客户端浏览器通过URI地址访问Servlet的时候，Tomcat会根据我们配置的映射关系，通过当前URI地址找到对应的Servlet实例，然后调用其<code>service(ServletRequest req, ServletResponse res)</code>方法。</p>
<p>由于父类中，service方法的重载，最终会根据当前请求方法（get或post等），调用到对应的doXxx方法，然后我们在子类中重写了这个doXxx方法，那么最后会调用到我们重写的doXxx方法。</p>
<p>这里需要注意的是，Tomcat接收到请求后，只会调用Servlet接口中的service方法，而不是直接调用我们的doGet方法等，由于方法的层层调用，最后才调用到我们重写的doGet等方法。</p>
<p>==思考，如果我们在子类中没有重写doGet方法，这时候浏览器发送get方法进行访问，会出现什么结果？==</p>
<h3 id="3-4-销毁"><a href="#3-4-销毁" class="headerlink" title="3.4 销毁"></a>3.4 销毁</h3><p>当前服务器进行正常关闭或者重启的时候，Tomcat会调用Servlet实例的<code>destroy()</code>方法，如果我们重写了该方法，那么会调用到我们重写之后的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LifeServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet创建&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet初始化&quot;</span>);</span><br><span class="line">		String username = getServletConfig().getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		String password = getServletConfig().getInitParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;\t初始化参数：username=&quot;</span>+username);</span><br><span class="line">		System.out.println(<span class="string">&quot;\t初始化参数：password=&quot;</span>+password);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet执行&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet销毁&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，服务器需要正常关闭或者重启的时候才会调用销毁的方法，如果直接调用console右上角的红点关闭服务器的话，是看不到执行销毁方法的。</p>
</blockquote>
<p>:tipping_hand_man: vanse</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.life;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * servlet生命周期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> vanse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 创建</span></span><br><span class="line"><span class="comment">	 * 	默认: 访问该资源时才创建(懒加载) 并且只会创建一次(单例)</span></span><br><span class="line"><span class="comment">	 *  修改: 启动服务器就创建(及时加载) 并且只会创建一次(单例)</span></span><br><span class="line"><span class="comment">	 *  	web.xml  load-on-startup 该值&gt;=0 即可 </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LifeServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet创建&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 初始化</span></span><br><span class="line"><span class="comment">	 * 		和创建方法一起调用 只会初始化一次</span></span><br><span class="line"><span class="comment">	 * 		可以获取配置信息的初始化值</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line"><span class="comment">//	@Override</span></span><br><span class="line"><span class="comment">//	public void init() throws ServletException &#123;</span></span><br><span class="line"><span class="comment">//		System.out.println(&quot;servlet...init&quot;);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	String username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	String password = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		username = config.getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		password = config.getInitParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 执行</span></span><br><span class="line"><span class="comment">	 * 		每访问一次资源路径时执行 (执行多次)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servelt...service&quot;</span>);</span><br><span class="line">		<span class="comment">// 准备好的数据</span></span><br><span class="line">		System.out.println(username + <span class="string">&quot;=&quot;</span> + password);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 销毁</span></span><br><span class="line"><span class="comment">	 * 		正常关闭(重启)服务器 该servlet销毁 调用一次</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet...destory&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="3-5-注解"><a href="#3-5-注解" class="headerlink" title="3.5 注解"></a>3.5 注解</h3><p>以上在web.xml中的配置，都可以使用注解配置来代替：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@WebServlet(value = &quot;/life&quot;,initParams = &#123;&#125;,loadOnStartup = 1)</span></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/life&quot;,initParams = &#123;</span></span><br><span class="line"><span class="meta">		@WebInitParam(name = &quot;username&quot;,value = &quot;briup&quot;),</span></span><br><span class="line"><span class="meta">		@WebInitParam(name = &quot;password&quot;,value = &quot;123456&quot;)</span></span><br><span class="line"><span class="meta">&#125;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LifeServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet创建&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet初始化&quot;</span>);</span><br><span class="line">		String username = getServletConfig().getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		String password = getServletConfig().getInitParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;\t初始化参数：username=&quot;</span>+username);</span><br><span class="line">		System.out.println(<span class="string">&quot;\t初始化参数：password=&quot;</span>+password);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet执行&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet销毁&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>其效果和之前使用xml配置是一样的</p>
</blockquote>
<p>例如，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>life<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.briup.web.servlet.LifeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>briup<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>life<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/life<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面XML中的配置，和下面类中注解的配置，是等价的，效果一样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@WebServlet(value = &quot;/life&quot;,initParams = &#123;&#125;,loadOnStartup = 1)</span></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/life&quot;,initParams = &#123;</span></span><br><span class="line"><span class="meta">	@WebInitParam(name = &quot;username&quot;,value = &quot;briup&quot;),</span></span><br><span class="line"><span class="meta">	@WebInitParam(name = &quot;password&quot;,value = &quot;123456&quot;)</span></span><br><span class="line"><span class="meta">&#125;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-6-思考"><a href="#3-6-思考" class="headerlink" title="3.6 思考"></a>3.6 思考</h3><p>通过上面Servlet生命周期的描述可知，在Tomcat运行期间，一个Servlet的实例只会有一个（单例），那么在实际访问过程中，是否会出现线程安全问题？</p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@WebServlet(value = &quot;/life&quot;,initParams = &#123;&#125;,loadOnStartup = 1)</span></span><br><span class="line"><span class="meta">@WebServlet(value = &quot;/life&quot;,initParams = &#123;</span></span><br><span class="line"><span class="meta">		@WebInitParam(name = &quot;username&quot;,value = &quot;briup&quot;),</span></span><br><span class="line"><span class="meta">		@WebInitParam(name = &quot;password&quot;,value = &quot;123456&quot;)</span></span><br><span class="line"><span class="meta">&#125;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LifeServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet创建&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet初始化&quot;</span>);</span><br><span class="line">		String username = getServletConfig().getInitParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		String password = getServletConfig().getInitParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;\t初始化参数：username=&quot;</span>+username);</span><br><span class="line">		System.out.println(<span class="string">&quot;\t初始化参数：password=&quot;</span>+password);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet执行&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;name = &quot;</span>+name);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;servlet销毁&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动服务器后，连续两次访问该Servlet，并且分别传不同的参数，观察其执行结果。</p>
</blockquote>
<blockquote>
<p>结论，在Servlet中，应该尽量避免使用成员变量，如果有需要，可以使用synchronized进行代码块加锁</p>
</blockquote>
<h2 id="4-接收参数-request"><a href="#4-接收参数-request" class="headerlink" title="4 接收参数(request)"></a>4 接收参数(request)</h2><blockquote>
<p>在Servlet中，一项重要的工作，就是接收页面请求中携带的参数。</p>
</blockquote>
<h3 id="4-1-方式"><a href="#4-1-方式" class="headerlink" title="4.1 方式"></a>4.1 方式</h3><p>虽然GET请求和POST请求携带参数的方式（位置）不同，但是由于Servlet底层API的封装，我们在Servlet中，通过请求（request）获取参数的方式都是一样的。</p>
<p>所以下面的示例中，都以GET方式传参的方式进行说明。</p>
<h3 id="4-2-单值"><a href="#4-2-单值" class="headerlink" title="4.2 单值"></a>4.2 单值</h3><p>接收请求中单一的参数值的时候，也就是一个参数名对应一个值，使用<code>getParameter</code>方法即可：</p>
<p><code>/param?name=tom&amp;age=20</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		String age = req.getParameter(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		System.out.println(age);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，Servlet获取到的参数值，默认都是String类型的，如果需要可以自己进行类转换</p>
</blockquote>
<h3 id="4-3-多值"><a href="#4-3-多值" class="headerlink" title="4.3 多值"></a>4.3 多值</h3><p>一个参数名对应多个值，例如页面中的多选框，此时可以使用<code>getParameterValues</code>方法</p>
<p><code>/param?like=0&amp;like=1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String[] like = req.getParameterValues(<span class="string">&quot;like&quot;</span>);</span><br><span class="line">		System.out.println(Arrays.toString(like));</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，该方法返回是一个String类型数组，因为一个参数名可能会对应多个值</p>
</blockquote>
<h3 id="4-4-特殊"><a href="#4-4-特殊" class="headerlink" title="4.4 特殊"></a>4.4 特殊</h3><p>在一些特殊情况下，需要获取请求中携带的所有<strong>参数名</strong>，此时可以使用<code>getParameterNames</code>方法</p>
<p><code>/param?name=tom&amp;age=20&amp;like=0&amp;like=1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Enumeration&lt;String&gt; names = req.getParameterNames();</span><br><span class="line">		<span class="keyword">while</span>(names.hasMoreElements())&#123;</span><br><span class="line">			String paramName = names.nextElement();</span><br><span class="line">			System.out.println(paramName);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">like</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，<code>hasMoreElements</code>可以判断是否有下一个元素，<code>nextElement</code>可以返回一下元素</p>
</blockquote>
<p>在一些特殊情况下，需要获取请求中携带的所有<strong>参数</strong>和对应的<strong>值</strong>，此时可以使用<code>getParameterMap</code>方法</p>
<p><code>/param?name=tom&amp;age=20&amp;like=0&amp;like=1</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		Map&lt;String, String[]&gt; map = req.getParameterMap();</span><br><span class="line">		<span class="keyword">for</span>(String key:map.keySet())&#123;</span><br><span class="line">			System.out.println(key+<span class="string">&quot; : &quot;</span>+Arrays.toString(map.get(key)));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果：</span></span><br><span class="line">name : [tom]</span><br><span class="line">age  : [<span class="number">20</span>]</span><br><span class="line">like : [<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>



<p>==思考，什么情况下，会不知道客户端传什么名字的参数给我们？==</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.requestparam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后台处理请求参数  HttpServletRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> vanse</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/requestParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	 * HttpServletRequest: 封装了请求内容</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 1.获取单个参数值</span></span><br><span class="line">		<span class="comment">// String name = req.getParameter(&quot;name&quot;);</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 2.获取多个参数值</span></span><br><span class="line"><span class="comment">//		String[] hobby = req.getParameterValues(&quot;hobby&quot;);</span></span><br><span class="line"><span class="comment">//		System.out.println(Arrays.toString(hobby));</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 3.获取所有名称 (基本不用)</span></span><br><span class="line"><span class="comment">//		Enumeration&lt;String&gt; names = req.getParameterNames();</span></span><br><span class="line"><span class="comment">//		while(names.hasMoreElements()) &#123;</span></span><br><span class="line"><span class="comment">//			System.out.println(names.nextElement());</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获取所有名称和值</span></span><br><span class="line">		Map&lt;String, String[]&gt; map = req.getParameterMap();</span><br><span class="line">		map.forEach((k,v) -&gt; System.out.println(k+<span class="string">&quot;=&quot;</span>+Arrays.toString(v)));</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 将来可以封装class User&#123;</span></span><br><span class="line"><span class="comment">		 * 	private String name;</span></span><br><span class="line"><span class="comment">		 *  private String[] hobby;</span></span><br><span class="line"><span class="comment">		 * &#125;</span></span><br><span class="line"><span class="comment">		 * 反射调用 setName(lucy)  springmvc</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">//	public void saveUser(User user) &#123;</span></span><br><span class="line"><span class="comment">//		</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-参数乱码"><a href="#5-参数乱码" class="headerlink" title="5 参数乱码"></a>5 参数乱码</h2><p>客户端发起的请求中，携带参数给Servlet，或者Servlet把数据写回给客户端，在这期间，如果出现中文，那么就会有可能出现中文乱码的问题。</p>
<h3 id="5-1-GET传参"><a href="#5-1-GET传参" class="headerlink" title="5.1 GET传参"></a>5.1 GET传参</h3><p>如果是GET请求中携带的参数，出现乱码，可以在Tomcat服务器的server.xml文件中进行配置。</p>
<p>因为GET请求的参数写在URI后的，所以需要在<code>&lt;Connector&gt;</code>中加入新的属性URIEncoding=”XXX”</p>
<p>例如，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8989&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>例如，</p>
<p><code>/encoding?name=张三</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/encoding&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;name = &quot;</span>+name);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>如果是server.xml中配置为：<code>URIEncoding=&quot;GBK&quot;</code></p>
<p>执行结果为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = 寮犱笁</span><br></pre></td></tr></table></figure>



<p>如果是server.xml中配置为：<code>URIEncoding=&quot;UTF-8&quot;</code></p>
<p>执行结果为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">name = 张三</span><br></pre></td></tr></table></figure>



<blockquote>
<p>具体的情况，还要看当前自己电脑中运行环境才行，因为有可能根据当前环境，设置为GBK刚好不是乱码</p>
</blockquote>
<blockquote>
<p>注意，这种设置编码方式，只能解决GET方式传参乱码，对POST方式无效</p>
</blockquote>
<h3 id="5-2-POST传参"><a href="#5-2-POST传参" class="headerlink" title="5.2 POST传参"></a>5.2 POST传参</h3><p>如果是POST请求中携带的参数，出现乱码，可以调用<code>setCharacterEncoding</code>方法设置获取参数时使用的编码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world! dynamic web<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;encoding&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">		用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>页面表单中提交参数<code>name=张三</code>给当前Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/encoding&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//注意，此时是POST提交方式，Servlet中重写的是doPost方法</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//req.setCharacterEncoding(&quot;UTF-8&quot;);</span></span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;name = &quot;</span>+name);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果：</span></span><br><span class="line">name = å¼ ä¸</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果在获取参数之前，先使用setCharacterEncoding方法设置编码UTF-8，执行结果为 name = 张三</p>
</blockquote>
<blockquote>
<p>注意，这种方式只针对POST方式传参乱码，对GET方式无效</p>
</blockquote>
<h3 id="5-3-写回数据"><a href="#5-3-写回数据" class="headerlink" title="5.3 写回数据"></a>5.3 写回数据</h3><p>Servlet中将中文写回给浏览器的时候，也可能会出现中文乱码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/encoding&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = resp.getWriter();</span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;你好，程序员&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>访问后，浏览器中出现乱码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132227716.png" alt="image-20200930015814334"></p>
<p><strong>修改代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/encoding&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//设置响应中的编码为UTF-8</span></span><br><span class="line">		resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//告诉浏览器当前响应中的内容的类型，和内容的编码为UTF-8</span></span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/plain;charset=UTF-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = resp.getWriter();</span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;你好，程序员&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>访问后，浏览器中显示正常：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132227067.png" alt="image-20200930020103012"></p>
<h3 id="5-4-总结"><a href="#5-4-总结" class="headerlink" title="5.4 总结"></a>5.4 总结</h3><p>一般在Servlet中，会<strong>先</strong>进行编码设置，方法POST方式传参乱码，和方法响应写回数据乱码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>同时，在给浏览器写回数据的时候，先设置响应的类型和编码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.setContentType(<span class="string">&quot;text/plain;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">resp.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，因为一般写回给浏览器的数据是普通文本或者html页面，将来还可能是json格式字符串数据</p>
<p>其目的是，让浏览器在解析数据之前，有个准备，提前知道数据的类型和编码</p>
</blockquote>
<p>如果GET方式传参出现乱码，则需要在server.xml文件中进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8989&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>:tipping_hand_man: vanse</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.encode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/responseEncoding&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseEncodingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 设置请求编码</span></span><br><span class="line">		req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		<span class="comment">// 设置响应编码</span></span><br><span class="line">		resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		<span class="comment">// 浏览器乱码 </span></span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>); <span class="comment">// 普通文本</span></span><br><span class="line">		<span class="comment">// resp.setContentType(&quot;text/html;charset=utf-8&quot;); // html</span></span><br><span class="line">		</span><br><span class="line">		String name = req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		PrintWriter writer = resp.getWriter();</span><br><span class="line">		<span class="comment">// 流输出到浏览器 中文</span></span><br><span class="line">		writer.write(name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<hr>
<p>额外的，了解一下Unicode(字符集)和UTF-8(编码规则)的对应关系：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unicode符号范围      | UTF-8编码方式</span><br><span class="line">十六进制			   二进制</span><br><span class="line">0000 0000-0000 007F | 0xxxxxxx</span><br><span class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所以，在UTF-8的编码规则下，一个字符可能是1字节，2字节、3字节、4字节，主要是看该字符的Unicode值的所在范围。</p>
</blockquote>
<p>例如“汉”字的Unicode编码是6C49。6C49在0800-FFFF之间，所以肯定要用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。</p>
<h2 id="6-跳转和重定向-response"><a href="#6-跳转和重定向-response" class="headerlink" title="6 跳转和重定向(response)"></a>6 跳转和重定向(response)</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p>如果访问一个servlet，需要让servlet把一个已经存在html页面返回，我们可以使用IO流读取这个页面，并写回.</p>
<p><code>hello.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world! <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/html&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = resp.getWriter();</span><br><span class="line">		String realPath = getServletContext().getRealPath(<span class="string">&quot;/hello.html&quot;</span>);</span><br><span class="line">		BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(realPath),<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span>((line=in.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">			out.println(line);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		in.close();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，<code>getServletContext().getRealPath(&quot;/hello.html&quot;)</code>是获取这个html页面，部署在服务器中的绝对路径，方便IO流的读取。</p>
</blockquote>
<blockquote>
<p>用io流的方式读取字节无法解决乱码</p>
</blockquote>
<p>但是，这样实现功能有点麻烦，而且很多都是固定的代码，所以可以进行封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 响应已经存在的html</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> vanse</span></span><br><span class="line"><span class="comment"> *	io流</span></span><br><span class="line"><span class="comment"> *		读该html文件</span></span><br><span class="line"><span class="comment"> *	        将内容写到页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/responseReadyHtml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseReadyHtmlServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 1.设置编码</span></span><br><span class="line">		resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">		<span class="comment">// 2.找到该文件</span></span><br><span class="line">			<span class="comment">// 2.1 文件路径 (本地磁盘写死)</span></span><br><span class="line">		<span class="comment">// D:\备课\相关软件\jd12\day61-web-maven\src\main\webapp\test.html</span></span><br><span class="line">		<span class="comment">//String path = &quot;D:\\备课\\相关软件\\jd12\\day61-web-maven\\src\\main\\webapp\\test.html&quot;;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 动态获取test.html在服务器(项目)中的路径</span></span><br><span class="line">		<span class="comment">// 容器(项目)的上下文</span></span><br><span class="line">		String path = getServletContext().getRealPath(<span class="string">&quot;test.html&quot;</span>);</span><br><span class="line">		<span class="comment">// E:\soft-it\tomcat\apache-tomcat-8.5.58\webapps\day61-web-maven\test.html</span></span><br><span class="line">		System.out.println(path);</span><br><span class="line">		File file = <span class="keyword">new</span> File(path);</span><br><span class="line">		<span class="comment">// 3.读写文件</span></span><br><span class="line">			<span class="comment">// 输入流 读</span></span><br><span class="line">		BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(file),<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">			<span class="comment">// 输出流 写</span></span><br><span class="line">		PrintWriter writer = resp.getWriter();</span><br><span class="line">		String line = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">while</span>( (line = reader.readLine()) != <span class="keyword">null</span>  ) &#123;</span><br><span class="line">			<span class="comment">// 读一行写一行</span></span><br><span class="line">			writer.write(line);  <span class="comment">// </span></span><br><span class="line">			writer.flush();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 该流需要手动关</span></span><br><span class="line">		reader.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>其实Servlet中已经专门对这种情况进行了封装处理，我们可以使用专门的方法来完成此效果：</p>
<ul>
<li>跳转</li>
<li>重定向</li>
</ul>
<h3 id="6-2-跳转"><a href="#6-2-跳转" class="headerlink" title="6.2 跳转"></a>6.2 跳转</h3><p>也称之为，服务器内部跳转。</p>
<p>其本质是，在servlet接收到一个请求的时候，可以将此请求转发给服务器内部的另一个资源中，如果这个资源是一个html页面，那么tomcat就会自动读取这个html页面并写回给浏览器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/forward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//path表示为一个页面的地址</span></span><br><span class="line">		String path = <span class="string">&quot;/hello.html&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//根据指定地址，获取请求转发对象（RequestDispatcher）</span></span><br><span class="line">		RequestDispatcher dispatcher = req.getRequestDispatcher(path);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用请求转发对象，把请求对象和响应对象转发给服务器内部的另一个资源（html）</span></span><br><span class="line">		<span class="comment">//完成跳转效果</span></span><br><span class="line">		dispatcher.forward(req, resp);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>需要注意的是，服务器内部跳转，不仅可以从一个Servlet跳转到一个html页面中，也可以从一个Servlet跳转到另一个Servlet中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/forward&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//path表示为一个servlet的映射地址</span></span><br><span class="line">		String path = <span class="string">&quot;/html&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//根据指定地址，获取请求转发对象（RequestDispatcher）</span></span><br><span class="line">		RequestDispatcher dispatcher = req.getRequestDispatcher(path);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//使用请求转发对象，把请求对象和响应对象转发给服务器内部的另一个资源（servlet）</span></span><br><span class="line">		<span class="comment">//完成跳转效果</span></span><br><span class="line">		dispatcher.forward(req, resp);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>此时整体访问情况如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132227141.png" alt="image-20200930023542815"></p>
<p><strong>服务器内部跳转的特点：</strong></p>
<ul>
<li>需要使用request对象来完成</li>
<li>服务器内部跳转期间，其实就是把请求request和响应response转发到下一个资源中，所以在整个过程中,使用的是同一个request和response</li>
<li>服务器内部跳转,【不会】改变浏览器地址栏中的地址，因为从始至终浏览器只发出了一个请求</li>
</ul>
<h3 id="6-3-重定向"><a href="#6-3-重定向" class="headerlink" title="6.3 重定向"></a>6.3 重定向</h3><p>也称之为，客户端重定向。</p>
<p>其本质是，客户端浏览器发送第一次请求，访问servlet获取资源，但是服务器中，已经将资源转移到另一个位置了，所以需要通知客户端浏览器，重新发送第二次请求，访问一个新的资源位置。</p>
<p>此时，服务器需要通知浏览器发送第二次请求，并且请求新的资源位置</p>
<ul>
<li>通过响应状态码（302），通知浏览器需要重定向</li>
<li>通过响应头字段（Location: 新地址），通知浏览器新的资源位置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/redirect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//需要客户端重定向的一个新的资源位置</span></span><br><span class="line">		String location = <span class="string">&quot;hello.html&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//通知客户端浏览器进行资源重定向</span></span><br><span class="line">		resp.sendRedirect(location);</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>访问结果为：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132227347.png" alt="image-20200930024921090"></p>
<blockquote>
<p>可以看出，第一次访问/redirect的响应状态码是302，并且响应头信息中指定了新的资源地址，浏览器根据这个新地址发出了第二次请求，并且当前浏览器地址栏中的地址，显示的是第二次请求的地址</p>
</blockquote>
<p><strong>此时整体访问情况如下：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132227837.png" alt="image-20200930031120256"></p>
<p><strong>客户端重定向的特点：</strong></p>
<ul>
<li>需要使用response对象来完成</li>
<li>客户端重定向，会让浏览器发出第二次请求，那么在服务器内部会产生新的request对象和response对象</li>
<li>客户端重定向,【会】改变浏览器地址栏中的地址，因为发出了第二次请求</li>
</ul>
<p>客户端重定向不仅可以重定向到一个html页面，也可以重定向到另一个Servlet中，只要改变重定向地址即可。</p>
<h3 id="6-4-总结"><a href="#6-4-总结" class="headerlink" title="6.4 总结"></a>6.4 总结</h3><p>服务器内部跳转：</p>
<ul>
<li>使用request完成</li>
<li>跳转的本质是在服务器内部把请求和响应进行转发，转发给下一个指定的资源</li>
<li>如果request中有数据，在跳转到的下一个资源中是可以拿到这个数据，因为只有一个request请求对象</li>
<li>由于服务器跳转是把请求和响应在服务器内部中进行转发，所以浏览器的地址栏中的地址是不受影响的，始终还是第一次发出请求的地址，其实浏览器根本就不知道服务器内部的请求转发情况</li>
<li>在设置跳转的资源地址的时候，路径的前面一般要加上/，例如 <code>String path = &quot;/hello.html&quot;;</code></li>
</ul>
<p>客户端重定向：</p>
<ul>
<li><p>使用response完成</p>
</li>
<li><p>重定向的本质是把新的资源路径返回给浏览器，让浏览器向这个新地址发送一个新请求</p>
<p>此处是利用了响应的状态码302和响应头信息中的Location字段来完成</p>
</li>
<li><p>如果request中有数据，重定向后在新的资源中是拿不到这个数据的，因为重定向会发出新的请求，但是数据在上一个老的请求中</p>
</li>
<li><p>由于重定向让浏览器发出新的请求，所以浏览器地址栏中的地址会变成新请求的地址</p>
</li>
<li><p>在设置重定向的资源地址的时候，路径的前面一般不加/</p>
<p>例如，<code>String path = &quot;hello.html&quot;;</code></p>
<p>但是如果一定要加/的话,那么还需要额外加上一个项目名</p>
<p>例如，<code>String path = &quot;/servlet/hello.html&quot;;</code></p>
<p>同时也可以动态获取项目：<code>req.getContextPath()</code></p>
<p>例如，<code>String path = req.getContextPath()+&quot;/hello.html&quot;;</code></p>
</li>
</ul>
<blockquote>
<p>注意，关于路径问题，后面会有专门的部分去讲解</p>
</blockquote>
<h1 id="servlet（三）"><a href="#servlet（三）" class="headerlink" title="servlet（三）"></a>servlet（三）</h1><h2 id="1-项目路径"><a href="#1-项目路径" class="headerlink" title="1 项目路径"></a>1 项目路径</h2><h3 id="1-1-斜杠（-）"><a href="#1-1-斜杠（-）" class="headerlink" title="1.1 斜杠（/）"></a>1.1 斜杠（/）</h3><p>斜杠（/）在路径中，一般的意思就是路径之间的分割，但是web项目中经常会来看到有一些路径，它的最前面会有一个斜杠（/），例如</p>
<ul>
<li>/index.html</li>
<li>/hello</li>
<li>/servlet/user/hello</li>
</ul>
<p>那么这个路径中开头斜杠（/）的解析，有俩种情况：</p>
<ul>
<li>由服务器解析</li>
<li>由客户端解析</li>
</ul>
<h4 id="1-1-1-客户端解析"><a href="#1-1-1-客户端解析" class="headerlink" title="1.1.1 客户端解析"></a>1.1.1 客户端解析</h4><p>当由客户端（浏览器）解析路径最左边斜杠（/）的时候，这个斜杠指的是端口号后面的斜杠（/）</p>
<p><a href="http://ip:port/">http://ip:port/</a></p>
<p>例如，在页面中有一个超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/hello.html&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个斜杠（/）由客户端浏览器进行解析，当点击这个超链接的时候，地址栏中的中会变成：</p>
<p><a href="http://ip:port/hello.html">http://ip:port/hello.html</a></p>
<p>例如，在servlet中，完成客户端重定向</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">&quot;/hello.html&quot;</span>;</span><br><span class="line">response.sendRedirect(url);</span><br></pre></td></tr></table></figure>

<p>客户端重定是把url地址返回给浏览器，浏览器解析之后，发出新的请求，这时候浏览器地址栏中的url地址变为：</p>
<p><a href="http://ip:port/hello.html">http://ip:port/hello.html</a></p>
<blockquote>
<p>可以看出，这种情况代码虽然是写在服务器端的，但是路径最后是返回给浏览器进行解析</p>
</blockquote>
<h4 id="1-1-2-服务器解析"><a href="#1-1-2-服务器解析" class="headerlink" title="1.1.2 服务器解析"></a>1.1.2 服务器解析</h4><p>当由服务器端解析路径最左边斜杠（/）的时候，这个斜杠指的是项目名后面的斜杠（/）</p>
<p><a href="http://ip:port/projectName/">http://ip:port/projectName/</a></p>
<p>例如，在web.xml文件中配置servlet的映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个斜杠（/）由服务器端进行解析，它代表的是项目名后的斜杠（/），这个资源的访问需要使用以下URL：</p>
<p><a href="http://ip:port/projectName/hello">http://ip:port/projectName/hello</a></p>
<blockquote>
<p>注意，使用注解的方式配置servlet的效果也是一样的效果</p>
</blockquote>
<p>例如，在servlet中进行服务器内部跳转操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">&quot;/test&quot;</span>;</span><br><span class="line">request.getRequestDispatcher(url).forward(request, response);</span><br></pre></td></tr></table></figure>

<p>这个斜杠（/）由服务器端进行解析，它代表的是项目名后的斜杠（/），最后内部跳转所访问的URL地址就是：</p>
<p><a href="http://ip:port/projectName/test">http://ip:port/projectName/test</a></p>
<h3 id="1-2-方法"><a href="#1-2-方法" class="headerlink" title="1.2 方法"></a>1.2 方法</h3><blockquote>
<p>Servlet中提供了一些和路径相关的方法</p>
</blockquote>
<h4 id="1-2-1-HttpServletRequest"><a href="#1-2-1-HttpServletRequest" class="headerlink" title="1.2.1 HttpServletRequest"></a>1.2.1 HttpServletRequest</h4><p><code>javax.servlet.http.HttpServletRequest</code>接口，表示http协议的请求</p>
<p>常用的和路径相关的方法：</p>
<ul>
<li><code>getContextPath()</code>，获取项目的根路径（默认是项目名）</li>
<li><code>getServletPath()</code>，获取当前访问的servlet地址</li>
<li><code>getRequestURL()</code>，获取当前请求的URL地址</li>
<li><code>getRequestURI()</code>，获取当前请求的URI地址</li>
</ul>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/path&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;req.getContextPath() = &quot;</span>+req.getContextPath());</span><br><span class="line">		System.out.println(<span class="string">&quot;req.getServletPath() = &quot;</span>+req.getServletPath());</span><br><span class="line">		System.out.println(<span class="string">&quot;req.getRequestURL()  = &quot;</span>+req.getRequestURL());</span><br><span class="line">		System.out.println(<span class="string">&quot;req.getRequestURI()  = &quot;</span>+req.getRequestURI());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>访问地址 <a href="http://127.0.0.1:8989/servlet-test/path">http://127.0.0.1:8989/servlet-test/path</a></p>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">req.getContextPath() = /servlet-test</span><br><span class="line">req.getServletPath() = /path</span><br><span class="line">req.getRequestURL()  = http://127.0.0.1:8989/servlet-test/path</span><br><span class="line">req.getRequestURI()  = /servlet-test/path</span><br></pre></td></tr></table></figure>





<h4 id="1-2-2-ServletContext"><a href="#1-2-2-ServletContext" class="headerlink" title="1.2.2 ServletContext"></a>1.2.2 ServletContext</h4><p><code>javax.servlet.ServletContext</code>接口，表示Servlet上下文环境，代表了整个web项目，是非常重要的一个对象</p>
<p>常用的和路径相关的方法：</p>
<ul>
<li><p><code>getContextPath()</code>，获取当前项目的根路径（默认就是项目名）</p>
</li>
<li><p><code>getRealPath(String path)</code>，获取一个资源在服务器中的绝对路径</p>
</li>
<li><p><code>getResourcePaths(String path)</code>，获取一个路径下面的所有资源</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/path&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//通过request对象获取ServletContext对象</span></span><br><span class="line">		ServletContext servletContext = getServletContext();</span><br><span class="line">		</span><br><span class="line">		String contextPath = servletContext.getContextPath();</span><br><span class="line">		System.out.println(<span class="string">&quot;contextPath = &quot;</span>+contextPath);</span><br><span class="line">		</span><br><span class="line">		String realPath = servletContext.getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;realPath = &quot;</span>+realPath);</span><br><span class="line">		</span><br><span class="line">		Set&lt;String&gt; resourcePaths = servletContext.getResourcePaths(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">		resourcePaths.forEach(System.out::println);</span><br><span class="line">			</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>访问地址 <a href="http://127.0.0.1:8989/servlet-test/path">http://127.0.0.1:8989/servlet-test/path</a></p>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">contextPath = /servlet-test</span><br><span class="line">realPath = D:\briup\apache-tomcat-8.5.58\webapps\servlet-test\</span><br><span class="line">/META-INF/</span><br><span class="line">/hello.html</span><br><span class="line">/WEB-INF/</span><br><span class="line">/index.html</span><br></pre></td></tr></table></figure>



<h3 id="1-3-相对路径"><a href="#1-3-相对路径" class="headerlink" title="1.3 相对路径"></a>1.3 相对路径</h3><p><strong>例如1</strong>，假设path.html和hello.html在同一个目录下。</p>
<p>path.html页面中有一个超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;hello.html&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>超链接中的这个路径就是一个相对路径，相对于<strong>当前路径</strong>，当前路径指的是浏览器地址栏中这个时候的路径。</p>
<p>所以当点击超链接的时候，就是在当前路径后面加上这个相对路径：</p>
<p>1、访问path.html的url地址：</p>
<p><a href="http://127.0.0.1:8989/servlet-test/path.html">http://127.0.0.1:8989/servlet-test/path.html</a></p>
<p>2、点击超链接之后，地址栏中的地址变为：当前路径+相对路径</p>
<p><a href="http://127.0.0.1:8989/servlet_test/">http://127.0.0.1:8989/servlet_test/</a><br>+<br>hello.html<br>=<br><a href="http://127.0.0.1:8989/servlet-test/hello.html">http://127.0.0.1:8989/servlet-test/hello.html</a></p>
<p><strong>例如2</strong>，假设path.html和hello.html不在同一个目录下，path.html在test目录下</p>
<p>path.html页面中有一个超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;hello.html&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>超链接中的这个路径就是一个相对路径，相对于当前路径，当前路径指的是浏览器地址栏中这个时候的路径。</p>
<p>所以当点击超链接的时候，就是在当前路径后面加上这个相对路径：</p>
<p>1、访问path.html的url地址：</p>
<p><a href="http://127.0.0.1:8989/servlet-test/test/path.html">http://127.0.0.1:8989/servlet-test/test/path.html</a></p>
<p>2、点击超链接之后,地址栏中的地址变为：当前路径+相对路径</p>
<p><a href="http://127.0.0.1:8989/servlet-test/test">http://127.0.0.1:8989/servlet-test/test</a><br>+<br>hello.html<br>=<br><a href="http://127.0.0.1:8989/servlet-test/test/hello.html">http://127.0.0.1:8989/servlet-test/test/hello.html</a></p>
<p>这时候出现404错误，页面找不到，因为访问地址不对。<br>修改连接地址如下，即可正常点击访问：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../hello.html&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>例如3</strong>，假设path.html和hello.html在同一个目录下(此时web.xml)</p>
<p>path.html页面中有一个超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;hello.html&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>web.xml中映射的路径为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/path<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>访问这个servlet之后，进行一个服务器内部跳转，跳转到path.html页面<br>这时候，浏览器地址栏中地址为servlet地址，显示的内容为path.html页面，点击超链接观察效果。</p>
<p>1、访问servlet的url地址：</p>
<p><a href="http://127.0.0.1:8989/servlet-test/servlet/path">http://127.0.0.1:8989/servlet-test/servlet/path</a></p>
<p>2、然后点击页面中的超链接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;hello.html&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>超链接中的这个路径就是一个相对路径，相对于当前路径，当前路径指的是浏览器地址栏中这个时候的路径。</p>
<p>所以当点击超链接的时候，就是在当前路径后面加上这个相对路径：</p>
<p>3、点击超链接之后,地址栏中的地址变为：当前路径+相对路径</p>
<p><a href="http://127.0.0.1:8989/servlet-test/servlet">http://127.0.0.1:8989/servlet-test/servlet</a><br>+<br>hello.html<br>=<br><a href="http://127.0.0.1:8989/servlet-test/servlet/hello.html">http://127.0.0.1:8989/servlet-test/servlet/hello.html</a></p>
<blockquote>
<p>可以看出，此时又会出现404错误</p>
</blockquote>
<p><strong>例如4</strong>，页面中使用<code>&lt;base&gt;</code>标签</p>
<p>在html页面添加base标签之后，这个页面中的所有相对路径，就不再是相对于地址栏中的路径了，而是相对于base标签中设置的路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://127.0.0.1:8989/servlet-test/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>path.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;hello.html&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认情况下，页面中的相对路径，参照点是浏览器地址栏中的当前地址，使用<code>&lt;base&gt;</code>标签之前，页面中这些相对路径的参照点，就变成了<code>&lt;base href=&quot;...&quot;&gt;</code>标签中指定的地址</p>
</blockquote>
<h3 id="1-4-修改路径"><a href="#1-4-修改路径" class="headerlink" title="1.4 修改路径"></a>1.4 修改路径</h3><p>默认情况下，项目部署后，项目路径（ContextPath）就是项目的名字，也可以根据情况对该路径进行修改。</p>
<p>例如，把ContextPath修改为/</p>
<p>在Eclipse中部署后，server.xml文件中会多一个配置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;servlet&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/servlet&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">source</span>=<span class="string">&quot;org.eclipse.jst.jee.server:servlet&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>此时项目的ContextPath为 <code>/servlet</code>，可以在这里直接修改为 <code>/</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">&quot;servlet&quot;</span> <span class="attr">path</span>=<span class="string">&quot;/&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;true&quot;</span> <span class="attr">source</span>=<span class="string">&quot;org.eclipse.jst.jee.server:servlet&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>启动后，原来是这样访问的路径：<a href="http://127.0.0.1:8989/servlet/index.html">http://127.0.0.1:8989/servlet/index.html</a></p>
<p>现在可以这样来访问：<a href="http://127.0.0.1:8989/index.html">http://127.0.0.1:8989/index.html</a></p>
<p>或者在部署之前，也可以直接修改项目的ContextPath：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132228502.png" alt="image-20201005213218225"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132224597.png" alt="image-20201005213239196"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132224812.png" alt="image-20201005213315890"></p>
<blockquote>
<p>最后，部署启动即可</p>
</blockquote>
<h2 id="2-范围对象"><a href="#2-范围对象" class="headerlink" title="2 范围对象"></a>2 范围对象</h2><h3 id="2-1-概述-1"><a href="#2-1-概述-1" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>在web项目中，如果有数据，需要进行传递，并且要求在某一个范围内进行传递，那么就可以在servlet中使用以下几个对象，在指定的范围内，进行数据传递。</p>
<table>
<thead>
<tr>
<th>接口类型</th>
<th>对象名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>javax.servlet.http.HttpServletRequest</td>
<td>request</td>
<td>请求范围，数据存入后，在同一个请求内有效</td>
</tr>
<tr>
<td>javax.servlet.http.HttpSession</td>
<td>session</td>
<td>会话范围，数据存入后，在同一个会话内有效</td>
</tr>
<tr>
<td>javax.servlet.ServletContext</td>
<td>application</td>
<td>应用范围，数据存入后，在同一个项目内有效</td>
</tr>
</tbody></table>
<h3 id="2-2-获取"><a href="#2-2-获取" class="headerlink" title="2.2 获取"></a>2.2 获取</h3><p>在servlet程序中，如何获取这三种对象</p>
<p>1、request对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">	<span class="comment">//request和response是方法的参数，可以直接使用</span></span><br><span class="line">		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>2、session对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	<span class="comment">//使用request对象，调用getSession方法即可</span></span><br><span class="line">	HttpSession session = request.getSession();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果request有对应的session,则返回这个session</span></span><br><span class="line">    <span class="comment">//如果request没有对应的session,则创建一个新的session并返回</span></span><br><span class="line">    <span class="comment">//request.getSession()等价于这种情况</span></span><br><span class="line">    HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果request有对应的session,则返回这个session</span></span><br><span class="line">    <span class="comment">//如果request没有对应的session,则返回null</span></span><br><span class="line">	HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>3、application对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		ServletContext application = request.getServletContext();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//或者使用以下方式，默认当前servlet继承了HttpServlet</span></span><br><span class="line"><span class="comment">//		request.getSession().getServletContext();</span></span><br><span class="line"><span class="comment">//		super.getServletContext();</span></span><br><span class="line"><span class="comment">//		super.getServletConfig().getServletContext();</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，application对象有且只有一个，所以无论什么方式获取到的，都是同一个对象（内存地址一样）</p>
</blockquote>
<h3 id="2-3-声明周期"><a href="#2-3-声明周期" class="headerlink" title="2.3 声明周期"></a>2.3 声明周期</h3><p>1、request对象</p>
<p>客户端每次发请求，服务器就会创建一个新的request对象，本次访问结束后，该request对象就会被销毁，所以每次请求都是一个全新的request对象。</p>
<blockquote>
<p>可以看出，存入request中的数据，只能在一次请求之内有效</p>
</blockquote>
<p>2、session对象</p>
<p><code>request.getSession()</code>方法第一次被调用时，会创建session对象，<code>session.invalidate()</code>调用的时候会销毁session。</p>
<p>session如果自动超时的话，也会被销毁，默认超时时间为30分钟，可以在web.xml中进行设置，单位是分钟</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，session超时时间指的是，客户端不与服务器进行交互的时间</p>
</blockquote>
<blockquote>
<p>一个会话中可以有多个request请求，所以放在session中的数据，可以被多个请求所共享</p>
</blockquote>
<p>3、application对象</p>
<p>启动tomcat服务器的时候，就会被创建，关闭tomcat服务器的时候，就会被销毁。</p>
<p>每个项目在运行期间，都会<strong>有且只有一个</strong>application对象，与这个项目对应。</p>
<blockquote>
<p>整个项目在运行期间，因为只有一个application对象，所以这个对象是所有用户共享的。大家都可以向这个对象里面存值，也可以再拿出来。</p>
</blockquote>
<h3 id="2-4-存取数据"><a href="#2-4-存取数据" class="headerlink" title="2.4 存取数据"></a>2.4 存取数据</h3><p>使用三种对象进行存数据、取数据的方式是一样的：</p>
<p>例如，存值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setAttribute(<span class="string">&quot;key&quot;</span>, value);</span><br><span class="line">session.setAttribute(<span class="string">&quot;key&quot;</span>, value);</span><br><span class="line">application.setAttribute(<span class="string">&quot;key&quot;</span>, value);</span><br></pre></td></tr></table></figure>



<p>例如，取值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">session.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">application.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>例如，还可以删除指定的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.removeAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">session.removeAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">application.removeAttribute(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure>



<h3 id="2-5-思考"><a href="#2-5-思考" class="headerlink" title="2.5 思考"></a>2.5 思考</h3><p>1、每次request对象创建之后，服务器怎么知道这个request和哪个session对象相对应?</p>
<p>2、服务器正常关闭和非正常关闭对session对象是否有影响？</p>
<ul>
<li>正常关闭再打开,session还在</li>
<li>非正常关闭再打开,session不在</li>
</ul>
<h2 id="3-会话追踪"><a href="#3-会话追踪" class="headerlink" title="3 会话追踪"></a>3 会话追踪</h2><h3 id="3-1-无状态访问"><a href="#3-1-无状态访问" class="headerlink" title="3.1 无状态访问"></a>3.1 无状态访问</h3><p>http协议的访问是无状态的访问，当前访问是不会知道之前访问的状态的，也就是说http协议的访问是不会帮我们保存访问的记录/痕迹的。</p>
<p>但是，有些时候我们需要记录之前的访问状态。</p>
<p>例如，在购物网站中，第一次访问点击购买了一个手机，第二次访问点击购买了一个电脑，第三次访问点击购物车结算，这个时候我们就必须知道前两次访问的时候购买了什么，要不然就没有方法去结算。</p>
<blockquote>
<p>会话追踪技术，就可以用来解决这种类似的问题</p>
</blockquote>
<h3 id="3-2-cookie"><a href="#3-2-cookie" class="headerlink" title="3.2 cookie"></a>3.2 cookie</h3><p>cookie是常用到的一种会话追踪技术，cookie是浏览器中用来存储信息的一种本地文件，浏览器再向服务器发送请求的时候，可以根据服务器的地址，将对应的cookie中的信息，携带到请求头中，一起发送给服务器。</p>
<blockquote>
<p>注意，session是保存在服务器端的对象，而cookie是保存在客户端（浏览器）的一种本地文件</p>
</blockquote>
<p>不同的浏览器，查看cookie的方式不同，但是基本都在内置的“隐私与安全”选项中：</p>
<p>例如，火狐浏览器</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132224108.png" alt="image-20201004195948843"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132224861.png" alt="image-20201004200024202"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132224036.png" alt="image-20201004200055613"></p>
<p><strong>也可以在火狐中安装插件，更加方便查看cookie：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132224092.png" alt="image-20201004200153391"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132224700.png" alt="image-20201004200222127"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132224076.png" alt="image-20201004200246170"></p>
<p>例如，使用chrome浏览器</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132224759.png" alt="image-20201004200721510"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132224941.png" alt="image-20201004200747122"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132225236.png" alt="image-20201004200802686"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132225425.png" alt="image-20201004202955925"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132225719.png" alt="image-20201004203015415"></p>
<h4 id="3-2-1-cookie和session"><a href="#3-2-1-cookie和session" class="headerlink" title="3.2.1 cookie和session"></a>3.2.1 cookie和session</h4><p>如果在一次请求的过程中，服务器端产生了session，那么这个session的id值，会写入到响应（response）中，然后由响应将session的id值，带回到浏览器中，浏览器收到后，再把这个id值写入到本地的cookie的文件中。</p>
<p>并且这个session的id值，在浏览器的cookie的文件中，有一个默认的名字：JSESSIONID</p>
<p>之后，浏览器发送请求的时候，会把之前保存在cookie文件中的JSESSIONID的值，传给服务器。</p>
<p>服务器通过这个JESSIONID的值，就能够知道服务器内存中是哪一个session对象，和当前这个客户端对应。</p>
<blockquote>
<p>这种情况下，就能到达一个效果，客户端的每一次访问，在服务器端都能够拿到相同的一个session对象，从而实现不同请求之间通过相同的session对象进行数据的共享</p>
</blockquote>
<h4 id="3-3-2-服务器写回cookie"><a href="#3-3-2-服务器写回cookie" class="headerlink" title="3.3.2 服务器写回cookie"></a>3.3.2 服务器写回cookie</h4><p>使用response对象，可以把cookie带回到浏览器，然后浏览器把cookie对象中的内容保存到对应的一个cookie的文件中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建cookie对象</span></span><br><span class="line">Cookie c1 = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">Cookie c2 = <span class="keyword">new</span> Cookie(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//设置cookie的有效时间</span></span><br><span class="line">c1.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">365</span>);</span><br><span class="line">c2.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">365</span>*<span class="number">10</span>);</span><br><span class="line"><span class="comment">//把cookie放到response里面</span></span><br><span class="line">response.addCookie(c1);</span><br><span class="line">response.addCookie(c2);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，如果没有设置cookie生效的时间，那么这个cookie就是会话cookie，也就是当关闭浏览器的时候cookie就是失效了。</p>
</blockquote>
<h4 id="3-2-3-服务器读取cookie"><a href="#3-2-3-服务器读取cookie" class="headerlink" title="3.2.3 服务器读取cookie"></a>3.2.3 服务器读取cookie</h4><p>servlet中，可以使用request对象拿到从浏览器发送过来的cookie数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从request中拿到一个cookie数组</span></span><br><span class="line"><span class="comment">//如果没任何cookie数据则返回null</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="comment">//遍历数组 拿出key和value</span></span><br><span class="line"><span class="keyword">for</span>(Cookie c:cookies)&#123;</span><br><span class="line">    String key = c.getName();</span><br><span class="line">    String value = c.getValue();</span><br><span class="line">    System.out.println(key+<span class="string">&quot; : &quot;</span>+value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>==思考，浏览器向A网站发送请求，那么会不会把B网站的cookie携带过去(跨域)？==</p>
<h3 id="3-3-URL重写"><a href="#3-3-URL重写" class="headerlink" title="3.3 URL重写"></a>3.3 URL重写</h3><blockquote>
<p>会话追踪，除了使用cookie技术来实现之外，还可以使用另一种方式来实现：URL重写</p>
</blockquote>
<h4 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1 概述"></a>3.3.1 概述</h4><p>当用户把浏览器的cookie功能禁用之后，浏览器在发请求的时候，响应（response）把cookie带回来，但是浏览器无法接收，这其中就包括最重要的JSESSIONID。</p>
<p>例如，</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132225127.png" alt="image-20201004213359668"></p>
<blockquote>
<p>这时候，浏览器无法接收响应携带回来的cookie值，请求中也不会携带cookie。</p>
</blockquote>
<h4 id="3-3-2-使用"><a href="#3-3-2-使用" class="headerlink" title="3.3.2 使用"></a>3.3.2 使用</h4><p>浏览器cookie被禁用后，可以URL重写技术，也可以到达会话追踪的效果。</p>
<p>将需要进行会话追踪的链接，使用指定方法进行处理后，得到新的链接地址：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = response.encodeURL(<span class="string">&quot;url&quot;</span>);  <span class="comment">// lookUserCookie?jesssionId</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，重写后的url和原来的url比较，其实就是在url后面拼接上了JSESSIONID的值，以便点击链接的时候可以把JSESSIONID的值也传过来，从而达到会话追踪的效果</p>
</blockquote>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/url&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">		response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		request.getSession().setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = response.getWriter();</span><br><span class="line">		</span><br><span class="line">		String url = request.getContextPath()+<span class="string">&quot;/sayHello&quot;</span>;</span><br><span class="line">		<span class="comment">//这里就是对当前这个url进行的重写的操作</span></span><br><span class="line">        <span class="comment">//原来的url为：/servlet-test/sayHello</span></span><br><span class="line">        <span class="comment">//重写后url为：/servlet-test/sayHello;jsessionid=587325D14741A0DB1688E98D8D30AE59</span></span><br><span class="line">        <span class="comment">//url = response.encodeURL(url);  此时需要禁用cookie</span></span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">		out.println(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">		out.println(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">		out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">		out.write(<span class="string">&quot;&lt;a href = &quot;</span>+url+<span class="string">&quot;&gt;点击&lt;/a&gt;&quot;</span>);</span><br><span class="line">      </span><br><span class="line">		out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">		out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">			</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/sayHello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SayHelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String name = (String)request.getSession().getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;hello!&quot;</span>+name);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>注意事项，</p>
<p>1、测试前先确保浏览器的cookie功能已经被禁用</p>
<p>2、<code>response.encodeURL(url);</code>核心代码分别注释掉和代开，来观察测试结果</p>
<blockquote>
<p>注意，无论是cookie还是URL重写，其核心都是将sessionID保存到客户端，然后发请求的时候，把这个id值传给服务器，服务器通过这个id值，找到服务器内存中哪一个session对象和当前请求相对应。</p>
</blockquote>
<h2 id="cookie和sesson的思考"><a href="#cookie和sesson的思考" class="headerlink" title="cookie和sesson的思考"></a>cookie和sesson的思考</h2><p><code>cookie的安全问题</code></p>
<p>问: 如果登录了网站A,再登录网站B,B会获取到A的cookie信息吗?</p>
<ul>
<li>由于同源策略,B无法获取</li>
</ul>
<p>但是</p>
<ul>
<li>XSS，跨站脚本攻击。攻击者获得页面的js权限，能操作页面的一切，包括Session Storage和未设置HTTP Only属性的Cookie</li>
<li>CSRF，跨站请求伪造，就是钓鱼网站</li>
</ul>
<h1 id="servlet（四）"><a href="#servlet（四）" class="headerlink" title="servlet（四）"></a>servlet（四）</h1><h2 id="1-filter"><a href="#1-filter" class="headerlink" title="==1 filter=="></a>==1 filter==</h2><h3 id="1-1-概述-2"><a href="#1-1-概述-2" class="headerlink" title="1.1 概述"></a>1.1 概述</h3><p>在一个请求去访问某个资源的时候，filter（过滤器）可以在这个请求，访问到这个资源之前，把请求拦下，然后做出一系列的处理，例如编码转换、信息过滤、登录验证、权限判断等等，最后filter再决定，是否要让这个请求去访问那个目标资源。</p>
<h3 id="1-2-编写"><a href="#1-2-编写" class="headerlink" title="1.2 编写"></a>1.2 编写</h3><p><code>javax.Servlet.Filter</code>是Servlet技术中，提供的一个接口，实现该接口的类，并且完成对应的配置，那么这个类就是一个过滤器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤器对象初始化时调用的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当过滤器拦截到请求的时候,会调用这个doFilter方法进行处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">            FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤器对象销毁时调用的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>doFilter</code>方法有三个参数，前两个分别是请求和响应对象，第三个参数是比较重要的一个参数</p>
<p><code>javax.servlet.FilterChain</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FilterChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   	<span class="comment">//FilterChain是一个接口,表示过滤器链,这个接口中只有一个方法doFilter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>同一个请求有可能要依次的通过两个或者多个过滤器，在servlet中，把这样多个过滤器看做一个过滤器链，这个过滤器链就用<code>FilterChain</code>接口类型来表示。</p>
<p><code>chain.doFilter(req,res)</code>，表示把当前的req和res传给这个过滤器链中的下一个过滤器对象，然后对该请求进行处理，如果说链中已经没有下一个过滤器了，那么就把这次访问放行，去访问它真正要访问的目标资源。</p>
<p>例如，编写一个编码过滤器，设置请求和响应的编码为UTF-8</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		<span class="comment">//过滤器初始化的时候调用该方法</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置编码</span></span><br><span class="line">		request.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将请求放行</span></span><br><span class="line">		chain.doFilter(request, response);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//过滤器销毁时候调用该方法</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>例如，当请求中没有指定参数的时候，就不让其访问目标资源，并且返回提示页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(username == <span class="keyword">null</span>) &#123;</span><br><span class="line">			response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">			PrintWriter out = response.getWriter();</span><br><span class="line">			</span><br><span class="line">			out.println(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">			out.println(<span class="string">&quot;&lt;body&gt;&quot;</span>);</span><br><span class="line">			out.println(<span class="string">&quot;&lt;h1&gt;请在请求中携带username参数&lt;/h1&gt;&quot;</span>);</span><br><span class="line">			out.println(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">			out.println(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//如果满足条件，那么就放行</span></span><br><span class="line">			chain.doFilter(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="1-3-配置"><a href="#1-3-配置" class="headerlink" title="1.3  配置"></a>1.3  配置</h3><p>和servlet程序一样，filter过滤器编写完成后，并不能立刻工作，还需要进行配置，指定这个过滤器会对哪些路径的访问生效。</p>
<p>例如，在web.xml中配置编码过滤的filter对所有路径都生效</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.briup.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>其中<code>&lt;url-pattern&gt;&lt;/url-pattern&gt;</code>有四种配置方式</p>
<ul>
<li><p>精确匹配</p>
<p>例如，<code>&lt;url-pattern&gt;/test_servlet&lt;/url-pattern&gt;</code></p>
<p>表示此拦截器只会拦截/test_servlet这一个路径</p>
</li>
<li><p>扩展名匹配</p>
<p>例如，<code>&lt;url-pattern&gt;*.html&lt;/url-pattern&gt;</code></p>
<p>表示此拦截器只会拦截后缀名是.html的路径</p>
</li>
<li><p>路径匹配</p>
<p>例如，<code>&lt;url-pattern&gt;/test/*&lt;/url-pattern&gt;</code></p>
<p>表示此拦截器拦截/test路径下的所有资源</p>
</li>
<li><p>匹配任意路径</p>
<p>例如，<code>&lt;url-pattern&gt;/*&lt;/url-pattern&gt;</code></p>
<p>表示此拦截器拦截项目下所有资源</p>
</li>
</ul>
<h3 id="1-4-顺序"><a href="#1-4-顺序" class="headerlink" title="1.4 顺序"></a>1.4 顺序</h3><p>如果有多个过滤器，并且多个过滤器拦截的路径有相同的部分，就有一些路径被    这多个过滤器共同拦截，那么过滤器的顺序是按照web.xml中配置的顺序从上到下执行的</p>
<p>例如，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.briup.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span><span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>checkFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.briup.filter.CheckFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>checkFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当请求方法/test的时候，encodingFilter会先拦截，然后是checkFilter再拦截</p>
</blockquote>
<h3 id="1-5-其他"><a href="#1-5-其他" class="headerlink" title="1.5 其他"></a>1.5 其他</h3><h4 id="1-5-1-生命周期"><a href="#1-5-1-生命周期" class="headerlink" title="1.5.1 生命周期"></a>1.5.1 生命周期</h4><p>当前服务器启动的时候，Filter会被创建并调用init方法初始化，服务器关闭的时候会被销毁并调用destory方法。</p>
<p>重写init和destory方法，启动服务器、访问资源被拦截、再关闭服务器，即可看到生命周期中的创建、初始化、访问、销毁的过程</p>
<h4 id="1-5-2-初始化"><a href="#1-5-2-初始化" class="headerlink" title="1.5.2 初始化"></a>1.5.2 初始化</h4><p>和servlet一样，filter初始化的时候，也可以传入参数</p>
<p>例如，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.briup.filter.EncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">	    	<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">	    	<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String encoding;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		<span class="comment">//过滤器初始化的时候调用该方法</span></span><br><span class="line">		encoding = filterConfig.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//默认值是UTF-8</span></span><br><span class="line">		<span class="keyword">if</span>(encoding==<span class="keyword">null</span>) &#123;</span><br><span class="line">			encoding = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        </span><br><span class="line">		HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">		System.out.println(<span class="string">&quot;encodingFilter : &quot;</span>+req.getRequestURI());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置编码</span></span><br><span class="line">		request.setCharacterEncoding(encoding);</span><br><span class="line">		response.setCharacterEncoding(encoding);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将请求放行</span></span><br><span class="line">		chain.doFilter(request, response);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//过滤器销毁时候调用该方法</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="1-5-3-拦截类型"><a href="#1-5-3-拦截类型" class="headerlink" title="1.5.3 拦截类型"></a>1.5.3 拦截类型</h4><p>在web.xml中进行配置的时候，还可以配置拦截器拦截的请求类型，默认是REQUEST，也就是只要是浏览器发送的请求，且满足路径要求，就会被拦截器拦截。</p>
<p>例如，默认情况下，服务器内部跳转的请求，就无法被拦截，除非进行配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>checkFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.briup.filter.CheckFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>checkFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>FORWARD<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里默认的配置是REQUEST类型的请求拦截，也就是浏览器直接发送请求</p>
</blockquote>
<blockquote>
<p>除此之外，还有其他的拦截类型，了解知道即可。重点关注的时候REQUEST和FORWARD俩种</p>
</blockquote>
<blockquote>
<p>配置后在拦截器中测试,看是否拦截到路径 此处应该只拦截转发路径,请求路径不会拦截</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;验证过滤器执行: &quot;</span>);</span><br><span class="line">HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">System.out.println(req.getRequestURI());</span><br></pre></td></tr></table></figure>



<h3 id="1-6-注解"><a href="#1-6-注解" class="headerlink" title="1.6 注解"></a>1.6 注解</h3><p>同时，也可以使用注解来完成过滤器的配置工作。</p>
<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.DispatcherType;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(value = &quot;/*&quot;,initParams = &#123;@WebInitParam(name = &quot;encoding&quot;,value = &quot;UTF-8&quot;)&#125;,dispatcherTypes = &#123;DispatcherType.REQUEST&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> String encoding;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		<span class="comment">//过滤器初始化的时候调用该方法</span></span><br><span class="line">		encoding = filterConfig.getInitParameter(<span class="string">&quot;encoding&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;encoding = &quot;</span>+encoding);</span><br><span class="line">		<span class="keyword">if</span>(encoding==<span class="keyword">null</span>) &#123;</span><br><span class="line">			encoding = <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">		HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">		System.out.println(<span class="string">&quot;encodingFilter:&quot;</span>+req.getRequestURI());</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置编码</span></span><br><span class="line">		request.setCharacterEncoding(encoding);</span><br><span class="line">		response.setCharacterEncoding(encoding);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将请求放行</span></span><br><span class="line">		chain.doFilter(request, response);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//过滤器销毁时候调用该方法</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>需要注意的是，使用注解<code>@WebFilter</code>的形式来配置的过滤的话，那么多个过滤器拦截同一个路径，过滤器的执行顺序是<strong>过滤器类名的首字母</strong>的顺序来执行的</p>
<h2 id="2-listener"><a href="#2-listener" class="headerlink" title="2 listener"></a>2 listener</h2><h3 id="2-1-概述-2"><a href="#2-1-概述-2" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><p>监听器（listener）用于监听web程序中的事件，监听器主要用于对 Session、request、application进行监控。</p>
<p>例如，创建、修改、删除Session、request、application等，并触发响应的事件。</p>
<h3 id="2-2-分类"><a href="#2-2-分类" class="headerlink" title="2.2 分类"></a>2.2 分类</h3><p>不同功能的监听器，需要实现不同的接口，可以大致分为以下几种监听器类型：</p>
<p>1、监听 request、Session、application 的创建和销毁，这些接口分别为</p>
<ul>
<li>ServletRequestListener</li>
<li>HttpSessionListener</li>
<li>ServletContextListener</li>
</ul>
<p>2、监听request、session、application三个对象中属性变化，这些接口分别为</p>
<ul>
<li>ServletRequestAttributeListener</li>
<li>HttpSessionAttributeListener</li>
<li>ServletContextAttributeListener</li>
</ul>
<p>3、监听Session对象里面存放着的其他对象，这些接口分别为</p>
<ul>
<li>HttpSessionBindingListener    </li>
<li>HttpSessionActivationListener</li>
</ul>
<h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h3><p><strong>1、监听 request、Session、application 的创建和销毁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerTest</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span>, <span class="title">ServletContextListener</span>, <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建 session</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">		HttpSession session = se.getSession();</span><br><span class="line">		System.out.println(<span class="string">&quot;新创建一个session, ID为: &quot;</span> + session.getId());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 销毁 session</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">		HttpSession session = se.getSession();</span><br><span class="line">		System.out.println(<span class="string">&quot;销毁一个session, ID为: &quot;</span> + session.getId());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 加载 application</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">		ServletContext servletContext = sce.getServletContext();</span><br><span class="line">		System.out.println(<span class="string">&quot;即将启动&quot;</span> + servletContext.getContextPath());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 卸载 application</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">		ServletContext servletContext = sce.getServletContext();</span><br><span class="line">		System.out.println(<span class="string">&quot;即将关闭&quot;</span> + servletContext.getContextPath());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建 request</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		HttpServletRequest request = (HttpServletRequest) sre.getServletRequest();</span><br><span class="line"></span><br><span class="line">		String uri = request.getRequestURI(); <span class="comment">// /helloSerlvet?name=lucy</span></span><br><span class="line">       <span class="comment">// name=lucy</span></span><br><span class="line">		uri = request.getQueryString() == <span class="keyword">null</span> ? uri : (uri + <span class="string">&quot;?&quot;</span> + request.getQueryString());</span><br><span class="line"></span><br><span class="line">		request.setAttribute(<span class="string">&quot;dateCreated&quot;</span>, System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">		System.out.println(<span class="string">&quot;IP &quot;</span> + request.getRemoteAddr() + <span class="string">&quot; 请求 &quot;</span> + uri);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 销毁 request</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		HttpServletRequest request = (HttpServletRequest) sre.getServletRequest();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> time = System.currentTimeMillis() - (Long) request.getAttribute(<span class="string">&quot;dateCreated&quot;</span>);</span><br><span class="line"></span><br><span class="line">		System.out.println(request.getRemoteAddr() + <span class="string">&quot;请求处理结束, 用时&quot;</span> + time + <span class="string">&quot;毫秒. &quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里的监听器使用了注解配置，也可以使用xml配置，在web.xml中</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.briup.listener.TestListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p><strong>2、监听request、session、application三个对象中属性变化</strong></p>
<p>三种监听器中的方法是一样的，这里以session为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionAttributeListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionBindingEvent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionAttributeListenerTest</span> <span class="keyword">implements</span> <span class="title">HttpSessionAttributeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加属性</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent se)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//HttpSession session = se.getSession();</span></span><br><span class="line">		String name  = se.getName();</span><br><span class="line">		Object value = se.getValue();</span><br><span class="line">		System.out.println(<span class="string">&quot;新建session属性：&quot;</span> + name + <span class="string">&quot;, 值为：&quot;</span> + value);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 删除属性</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent se)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//HttpSession session = se.getSession();</span></span><br><span class="line">		String name = se.getName();</span><br><span class="line">		Object value = se.getValue();</span><br><span class="line">		System.out.println(<span class="string">&quot;删除session属性：&quot;</span> + name + <span class="string">&quot;, 值为：&quot;</span> + value);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 修改属性</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent se)</span> </span>&#123;</span><br><span class="line">		HttpSession session = se.getSession();</span><br><span class="line">		String name = se.getName();</span><br><span class="line">		Object oldValue = se.getValue();</span><br><span class="line">		Object newValue = session.getAttribute(name);</span><br><span class="line">		System.out.println(<span class="string">&quot;修改session属性：&quot;</span> + name + <span class="string">&quot;, 原值：&quot;</span> + oldValue + <span class="string">&quot;, 新值：&quot;</span> + newValue);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>3、监听Session对象里面存放着的其他对象</strong></p>
<blockquote>
<p>注意，这种请求是需要让被监测的对象（一般是实体类）来实现指定接口</p>
<p>注意，这种情况使用较少，了解即可</p>
</blockquote>
<p><code>javax.servlet.http.HttpSessionBindingListener</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpSessionBindingListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象被放进session前调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueBound</span><span class="params">(HttpSessionBindingEvent event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象从session中移除后调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueUnbound</span><span class="params">(HttpSessionBindingEvent event)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><code>javax.servlet.http.HttpSessionActivationListener</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpSessionActivationListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//session即将被持久化到硬盘时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionWillPassivate</span><span class="params">(HttpSessionEvent se)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//session从硬盘加载后调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDidActivate</span><span class="params">(HttpSessionEvent se)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>例如，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionActivationListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionBindingEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionBindingListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">HttpSessionBindingListener</span>,<span class="title">HttpSessionActivationListener</span>,<span class="title">Serializable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">long</span> id, String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;User [id=&quot;</span> + id + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// session从硬盘加载后  </span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDidActivate</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;  </span><br><span class="line">		HttpSession session = se.getSession();  </span><br><span class="line">		System.out.println(<span class="keyword">this</span> + <span class="string">&quot;已经成功从硬盘中加载。sessionId: &quot;</span> + session.getId());  </span><br><span class="line">	&#125;  </span><br><span class="line">  </span><br><span class="line">	<span class="comment">// session即将被持久化到硬盘时  </span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionWillPassivate</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;  </span><br><span class="line">		HttpSession session = se.getSession();  </span><br><span class="line">		System.out.println(<span class="keyword">this</span> + <span class="string">&quot;即将保存到硬盘。sessionId: &quot;</span> + session.getId());  </span><br><span class="line">	&#125;  </span><br><span class="line">  </span><br><span class="line">	<span class="comment">// 当前对象被放进session前  </span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueBound</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;  </span><br><span class="line">		HttpSession session = event.getSession();  </span><br><span class="line">		String name = event.getName();  </span><br><span class="line">		System.out.println(<span class="keyword">this</span> + <span class="string">&quot;被绑定到session \&quot;&quot;</span> + session.getId() + <span class="string">&quot;\&quot;的&quot;</span> + name + <span class="string">&quot;属性上&quot;</span>);  </span><br><span class="line">	&#125;  </span><br><span class="line">  </span><br><span class="line">	<span class="comment">// 当前对象从session中移除后  </span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueUnbound</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;  </span><br><span class="line">		HttpSession session = event.getSession();  </span><br><span class="line">		String name = event.getName();  </span><br><span class="line">		System.out.println(<span class="keyword">this</span> + <span class="string">&quot;被从session \&quot;&quot;</span> + session.getId() + <span class="string">&quot;\&quot;的&quot;</span> + name + <span class="string">&quot;属性上移除&quot;</span>);  </span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;	</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>配合测试的Servlet为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		String flag = request.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(flag==<span class="keyword">null</span>) &#123;</span><br><span class="line">			request.getSession().setAttribute(<span class="string">&quot;user&quot;</span>, <span class="keyword">new</span> User(<span class="number">1L</span>,<span class="string">&quot;tom&quot;</span>));</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			request.getSession().removeAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 如果user从session移除,序列化不成功</p>
</blockquote>
<h2 id="3-error-page"><a href="#3-error-page" class="headerlink" title="3 error-page"></a>3 error-page</h2><p>在web.xml中，可以使用<code>&lt;error-page&gt;</code>来定制错误的返回页面</p>
<p>例如，如果出现404情况，则跳转到/404.html页面中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>也可以指定servlet中出现的异常情况：</p>
<p>例如，当servlet程序的时候，如果出现了以下类型异常，则跳转到not_found.html页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.io.FileNotFoundException<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h2 id="4-WEB-INF"><a href="#4-WEB-INF" class="headerlink" title="4 WEB-INF"></a>4 WEB-INF</h2><p>WEB-INF是Java的WEB应用中的安全目录。</p>
<p>安全目录指的是客户端无法访问，只有服务端可以访问的目录。</p>
<p>例如，如果将hello.html页面存放在WEB-INF下，那么浏览器中是无法通过以下地址【直接】访问到该页面的：</p>
<p><a href="http://127.0.0.1:8989/servlet-test/WEB-INF/hello.html">http://127.0.0.1:8989/servlet-test/WEB-INF/hello.html</a></p>
<p>但是，在servlet中是可以通过服务器内部跳转，来访问到WEB-INF目录下的资源的。</p>
<p>所以，浏览器可以访问servlet，让servlet再通过服务器内部跳转的方式，来访问WEB-INF下的hello.html，从而提高页面的安全性，因为在servlet中可以对本次请求进行验证，通过后跳转到WEB-INF下的页面，否则返回错误信息。</p>
<h2 id="5-上传"><a href="#5-上传" class="headerlink" title="5 上传"></a>5 上传</h2><h3 id="5-1-概述-1"><a href="#5-1-概述-1" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>在不同版本的servlet中，完成上传的方式不同，servlet3.0及之前的版本，完成上传较为麻烦（了解即可），servlet3.1版本完成上传较为简单。</p>
<p>servlet3.0之前上传需要注意事项： </p>
<ol>
<li>需要导入两个包：commons-fileupload-1.4.jar,commons-io-2.8.0.jar</li>
<li>页面表单一定要是post方式提交</li>
<li>表单编码类型设置为：enctype=”multipart/form-data”，默认是 application/x-www-form-urlencoded</li>
<li>上传成功的时候，上传的文件可以在项目中的目录，也可以在系统目录</li>
<li>设置了表单的enctype=”multipart/form-data” 就【无法】通过HttpServletRequest对象的getParameter方法获取请求参数值。</li>
</ol>
<p>servlet3.1上传需要注意事项：</p>
<ol>
<li>不需要导入额外的jar包，使用servlet提供的@MultipartConfig注解和javax.servlet.http.Part接口类型对象即可</li>
<li>页面表单一定要是post方式提交</li>
<li>表单编码类型设置为：enctype=”multipart/form-data”，默认是 application/x-www-form-urlencoded</li>
<li>上传成功的时候，上传的文件可以在项目中的目录，也可以在系统目录</li>
<li>设置了表单的enctype=”multipart/form-data” 【也可以】通过HttpServletRequest对象的getParameter方法获取请求参数值。</li>
</ol>
<blockquote>
<p>注意，MultipartConfig和Part在Servlet3.0就加入了，但是里面的一些方法使用Servlet3.1在新增的</p>
</blockquote>
<h3 id="5-2-实现"><a href="#5-2-实现" class="headerlink" title="5.2 实现"></a>5.2 实现</h3><h4 id="5-2-1-servlet3-0"><a href="#5-2-1-servlet3-0" class="headerlink" title="5.2.1 servlet3.0"></a>5.2.1 servlet3.0</h4><p>1、引入jar</p>
<p>如果是动态的web项目，将需要的jar包，直接复制粘贴到项目中WEB-INF里面的lib目录中即可</p>
<p>如果是maven项目，直接引入依赖坐标即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">maven.compiler.soruce</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.soruce</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2、编写页面upload.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	 </span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3、编写servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * servlet3.0之前的上传操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/upload1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpLoadServlet1</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="keyword">private</span> String path = <span class="string">&quot;D:\\briup\\upload&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">// 防止上传文件名乱拿吗</span></span><br><span class="line">		req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">		resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">		String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		<span class="comment">//页面表单中设置了enctype=&quot;multipart/form-data&quot;后</span></span><br><span class="line">		<span class="comment">//无法直接通过getParameter方法获取普通组件的参数值</span></span><br><span class="line">		System.out.println(<span class="string">&quot;getParameter username = &quot;</span>+username);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//如果是上传的目录在项目中，可以通过该方法获得该上传目录的绝对路径</span></span><br><span class="line"><span class="comment">//		String realpath = getServletContext().getRealPath(path);</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//构造一个文件上传处理对象</span></span><br><span class="line">			DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">			ServletFileUpload upLoad = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//获得表单中提交内容</span></span><br><span class="line">			List&lt;FileItem&gt; list = upLoad.parseRequest(request);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (FileItem fileItem : list) &#123;</span><br><span class="line">				<span class="comment">//fileItem.isFormField()返回true表示是普通的表单组件</span></span><br><span class="line">				<span class="comment">//fileItem.isFormField()返回false表示是上传输入框</span></span><br><span class="line">				<span class="keyword">if</span> (fileItem.isFormField()) &#123;</span><br><span class="line">					<span class="comment">//getFieldName()方法获得普通表单组件的参数名</span></span><br><span class="line">					String FieldName = fileItem.getFieldName();</span><br><span class="line">					<span class="comment">//获得该参数所对应的值并指定编码</span></span><br><span class="line">					String Content = fileItem.getString(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">					<span class="comment">//为了后面可以把普通参数从request中拿出来</span></span><br><span class="line">					request.setAttribute(FieldName, Content);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//getName()取得上传文件的名字</span></span><br><span class="line">					String fileName = fileItem.getName();</span><br><span class="line">					<span class="comment">//避免文件名字重复</span></span><br><span class="line">					fileName = System.currentTimeMillis()+<span class="string">&quot;-&quot;</span>+fileName;</span><br><span class="line">					File dir = <span class="keyword">new</span> File(path);</span><br><span class="line">					<span class="keyword">if</span>(!dir.exists()) &#123;</span><br><span class="line">						dir.mkdirs();</span><br><span class="line">					&#125;</span><br><span class="line">					File file = <span class="keyword">new</span> File(dir, fileName);</span><br><span class="line">					<span class="comment">//把上传文件进行指定目录</span></span><br><span class="line">					fileItem.write(file);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//因为上面解析request中是数据后,把普通表单组件中的key和value放到了request中,所以这里可以拿出来</span></span><br><span class="line">			System.out.println(<span class="string">&quot;request.getAttribute(\&quot;username\&quot;) = &quot;</span>+request.getAttribute(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h4 id="5-2-2-servlet3-1"><a href="#5-2-2-servlet3-1" class="headerlink" title="5.2.2 servlet3.1"></a>5.2.2 servlet3.1</h4><p>1、编写页面upload.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	 </span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/upload2&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2、编写servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.MultipartConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Part;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * servlet3.1的上传操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/upload2&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MultipartConfig(location = &quot;D:\\briup\\upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpLoadServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//可以使用filter来进行编码设置</span></span><br><span class="line">		<span class="comment">//request.setCharacterEncoding(&quot;UTF-8&quot;);</span></span><br><span class="line">		<span class="comment">//response.setCharacterEncoding(&quot;UTF-8&quot;);</span></span><br><span class="line">		</span><br><span class="line">		String username = request.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取上传的文件</span></span><br><span class="line">		Part part = request.getPart(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取上传文件的名字</span></span><br><span class="line">		<span class="comment">//servlet3.1的方法</span></span><br><span class="line">		String fileName = part.getSubmittedFileName();</span><br><span class="line">		</span><br><span class="line">		System.out.println(username+<span class="string">&quot; 上传了文件：&quot;</span>+fileName);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//避免上传的文件重复，文件名前面加上时间戳</span></span><br><span class="line">		part.write(System.currentTimeMillis()+<span class="string">&quot;-&quot;</span>+fileName);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">       <span class="comment">//		String realPath = getServletContext().getRealPath(&quot;/upload&quot;);</span></span><br><span class="line">		<span class="comment">//		File file = new File(realPath);</span></span><br><span class="line">        <span class="comment">//		if(!file.exists()) &#123;</span></span><br><span class="line">        <span class="comment">//			file.mkdirs();</span></span><br><span class="line">        <span class="comment">//		&#125;</span></span><br><span class="line">        <span class="comment">//		part.write(realPath+&quot;/&quot;+fileName);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// String realPath = &quot;D:/upload&quot;;</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:@MultipartConfig(location = “D:\briup\upload”)  该方式D:\briup\upload必须存在</p>
<p>可以有多种路径写法</p>
</blockquote>
<p><code>@MutipartConfig</code>注解参数：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132226274.png" alt="image-20201006010856560"></p>
<p><code>Part</code>接口的方法：</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/servlet/202205132226705.png" alt="image-20201006011014051"></p>
<h2 id="6-下载"><a href="#6-下载" class="headerlink" title="6 下载"></a>6 下载</h2><p>servlet下载需要注意事项:</p>
<ol>
<li>servlet其实就是用io流不停的去读那个文件，然后再用输出流不停的写给客户端浏览器</li>
<li>下载结束，也就是说输出流结束之后，下面是不能再写跳转的代码的，要不然会报错</li>
<li>按照http协议的要求，设置下载的响应类型ContentType，以及设置响应头Content-Disposition来指定下载文件的名字</li>
</ol>
<p>1、编写页面download.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h2</span>&gt;</span>servlet下载<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;download?fileName=下载.png&quot;</span>&gt;</span>我的文档<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2、编写servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="keyword">private</span> String path = <span class="string">&quot;D:\\briup\\upload&quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">			HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 获得用户需要下载文件的名字</span></span><br><span class="line">		String fileName = request.getParameter(<span class="string">&quot;fileName&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 如果是下载文件的目录在项目中，可以通过该方法获得该下载文件目录的绝对路径</span></span><br><span class="line"><span class="comment">//		String realPath = getServletContext().getRealPath(path);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 响应类型设置为下载:application/x-download</span></span><br><span class="line">		response.setContentType(<span class="string">&quot;application/x-download&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 下载文件时显示文件的保存名称</span></span><br><span class="line">		String fileDisplay = <span class="string">&quot;briup_&quot;</span>+fileName;</span><br><span class="line">		<span class="comment">// 下载文件名的中文编码转换 因为写回去的时候是字节流</span></span><br><span class="line">		<span class="comment">// 不设置会出现下载文件的中文名字乱码</span></span><br><span class="line">		fileDisplay = <span class="keyword">new</span> String(fileDisplay.getBytes(<span class="string">&quot;utf-8&quot;</span>),<span class="string">&quot;ISO-8859-1&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 设置响应头部信息(http协议中的固定设置方式)</span></span><br><span class="line">		response.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span>+fileDisplay);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 获取servlet中是输出流</span></span><br><span class="line">			ServletOutputStream out = response.getOutputStream();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 使用IO流读取需要下载的文件</span></span><br><span class="line">			File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">			in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 读取文件后再写回给浏览器</span></span><br><span class="line">			<span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">			<span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span> ((len = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">				out.write(b, <span class="number">0</span>, len);</span><br><span class="line">			&#125;</span><br><span class="line">            <span class="comment">// ImageIoUtil.copy(in,out); </span></span><br><span class="line">			in.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(in!=<span class="keyword">null</span>) &#123;</span><br><span class="line">				in.close();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//注意下载之后就不能使用request跳转了,因为response已经返回了</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看出，设置好响应头字段后，其他的就是使用IO流读取数据后再写回给浏览器</p>
</blockquote>
<blockquote>
<p>http header头要求其内容必须为iso-8859-1编码</p>
</blockquote>
<h2 id="7-三层架构"><a href="#7-三层架构" class="headerlink" title="7 三层架构"></a>7 三层架构</h2><p>在web项目的代码结构中，经常会使用到三层架构：</p>
<ul>
<li>web层  servlet/filter/listener</li>
<li>service层 </li>
<li>dao层</li>
</ul>
<p>web层中代码的主要任务：</p>
<ul>
<li>接收客户端传来的参数</li>
<li>把参数封装成对象   saveUser(user)</li>
<li>把封装好的对象/数据传给service</li>
<li>根据service层的处理结果决定把那个页面/数据返回给客户端</li>
</ul>
<p>service层中代码的主要任务：</p>
<ul>
<li>接收web层传过来的对象/数据(如果有的话)</li>
<li>根据这些信息进行业务逻辑处理</li>
</ul>
<p>例如，完成一个登录功能，web层接收到用户名和密码之后，把数据传给service层，service层就要根据这些信息来判断用户名是否存在、密码是否正确、用户是否有权限、用户状态当前是否可用、用户是否推送信息、是否给用户相关提示等，这些都属于登录的业务逻辑处理</p>
<p>dao层中代码的主要任务：</p>
<ul>
<li>接受service传的参数(如果有的话)</li>
<li>和数据库进行交互</li>
<li>把交互结果返回给service层</li>
</ul>
<p>==思考，项目的代码为何要分层编写，全部代码写到一个类中进行实现，是否可以？==</p>
]]></content>
      <tags>
        <tag>briup_java</tag>
      </tags>
  </entry>
  <entry>
    <title>out_cms</title>
    <url>/archives/project/out_cms.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>教案: 看点咨询系统</li>
<li>时间: 2021/12/12</li>
<li>整理人: vanse(刘聪)</li>
<li>授课对象: 宿州学院2019级</li>
<li>地点: 安徽宿州学院(钉钉授课)</li>
</ul>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p><strong>必装</strong></p>
<ul>
<li>jdk</li>
<li>idea</li>
<li>maven</li>
<li>mysql(sqlyog)</li>
</ul>
<p><strong>选装</strong></p>
<p>firefox浏览器以及RestClient插件</p>
<p>nginx</p>
<p>redis</p>
<p>node(vue-element-template)</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>maven</p>
<p>springboot</p>
<p>mysql</p>
<p>mybatis</p>
<h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>​    在日常生活中，内容管理系统占到所有系统的80%以上，比如个人博客，腾讯新闻，今日头条，搜狐新 闻等。 这些都是我们日常生活中经常使用到的系统，它的核心就是可以概括为内容（资讯），一篇文章就是一个资讯，大家越来越喜欢将生活中的所见所闻简述出来。</p>
<p>如图：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210317215643452.png" alt="image-20210317215643452"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210317215652686.png" alt="image-20210317215652686"></p>
<blockquote>
<p>可以看出，目前来讲对于资讯系统的需求量是非常大的</p>
</blockquote>
<p>​    通用的看点资讯管理系统，采用前后台分离开发的技术，将系统分为前台页面展示以及后台资讯管理系统。对于后台系统是基本上是通用的，而前台可根据不同客户的需求去修改定制。</p>
<p>  (不涉及页面  使用某些前端模板)</p>
<h2 id="2-简介"><a href="#2-简介" class="headerlink" title="2.简介"></a>2.简介</h2><p>看点资讯系统最核心的数据是内容，例如文章、新闻等，所以后台主要功能是实现这些内容的管理，例如栏目管理、评论管理、用户管理以及角色管理等，对于前台可以灵活得展示后台的数据。<br>例如，</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210317215829625.png" alt="image-20210317215829625"></p>
<h2 id="3-技术"><a href="#3-技术" class="headerlink" title="3.技术"></a>3.技术</h2><p>后台采用的技术：</p>
<ul>
<li>springboot</li>
<li>spring</li>
<li>springmvc</li>
<li>mybatis</li>
<li>jwt</li>
</ul>
<p>数据库：</p>
<ul>
<li>mysql    </li>
</ul>
<p>文档管理：</p>
<ul>
<li>swagger</li>
</ul>
<p>架构选取：</p>
<ul>
<li>三层架构<ul>
<li>controller   springmvc(servlet) 对外暴露api接口</li>
<li>service  处理业务逻辑  参数/返回/事务/日志/分页…</li>
<li>dao 数据访问层</li>
</ul>
</li>
</ul>
<h2 id="4-功能"><a href="#4-功能" class="headerlink" title="4.功能"></a>4.功能</h2><h3 id="4-1-用户模块"><a href="#4-1-用户模块" class="headerlink" title="4.1 用户模块"></a>4.1 用户模块</h3><blockquote>
<p>对应的实体类为User</p>
</blockquote>
<p>1、新增用户</p>
<ul>
<li>参数1：User</li>
</ul>
<p>2、编辑用户</p>
<ul>
<li>参数1：User</li>
</ul>
<p>3、查询用户（分页）</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<p>4、删除用户（批量，注销用户）</p>
<ul>
<li>参数1：List<Long> ids</li>
</ul>
<p>5、禁用或解封用户信息（更新用户状态）</p>
<ul>
<li>参数1：Integer id</li>
<li>参数2：Integer status</li>
</ul>
<p>6、根据用户名获取用户信息</p>
<ul>
<li>参数1：String username</li>
</ul>
<p>7、登录</p>
<ul>
<li>参数1：String username</li>
<li>参数2：String password</li>
</ul>
<h3 id="4-2-角色模块"><a href="#4-2-角色模块" class="headerlink" title="4.2 角色模块"></a>4.2 角色模块</h3><blockquote>
<p>对应的实体类为Role</p>
</blockquote>
<p>1、新增角色</p>
<ul>
<li>参数1：Role r</li>
</ul>
<p>2、编辑角色</p>
<ul>
<li>参数1：Role r</li>
</ul>
<p>3、查询角色（分页）</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<p>4、批量删除角色</p>
<ul>
<li>参数1：List<Long> ids</li>
</ul>
<h3 id="4-3-资讯模块"><a href="#4-3-资讯模块" class="headerlink" title="4.3 资讯模块"></a>4.3 资讯模块</h3><blockquote>
<p>资讯在这里主要指的的是文章，对应的实体类为Article</p>
</blockquote>
<p>1、新增资讯</p>
<ul>
<li>参数1：Article article</li>
</ul>
<p>2、编辑资讯</p>
<ul>
<li>参数1：Article article</li>
</ul>
<p>3、查询资讯（分页）</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<p>4、批量删除资讯</p>
<ul>
<li>参数1：List<Integer > ids</li>
</ul>
<p>5、审核资讯</p>
<ul>
<li>参数1：Integer id</li>
<li>参数2：Integer status</li>
</ul>
<p>6、根据类别ID查询，分页获取资讯信息，并且按照阅读量降序排</p>
<ul>
<li>参数1：Integer categoryId</li>
<li>参数2：Integer pageNum</li>
<li>参数3：Integer pageSize</li>
</ul>
<p>7、根据用户分页获取资讯信息</p>
<ul>
<li>参数1：Integer userId</li>
<li>参数2：Integer pageNum</li>
<li>参数3：Integer pageSize</li>
</ul>
<h3 id="4-4-类别模块"><a href="#4-4-类别模块" class="headerlink" title="4.4 类别模块"></a>4.4 类别模块</h3><blockquote>
<p>类别也就是栏目： Category</p>
</blockquote>
<p>1、新增类别</p>
<ul>
<li>参数1：Category category</li>
</ul>
<p>2、编辑类别</p>
<ul>
<li>参数1：Category category</li>
</ul>
<p>3、查询类别（分页）</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<p>4、批量删除类别</p>
<ul>
<li>参数1：List<Integer > ids</li>
</ul>
<p>5、更新类别序号</p>
<ul>
<li>参数1：Integer id</li>
<li>参数2：Integer no</li>
</ul>
<p>6、按照序号升序分页获取类别信息</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<h3 id="4-5-评论模块"><a href="#4-5-评论模块" class="headerlink" title="4.5 评论模块"></a>4.5 评论模块</h3><blockquote>
<p>对应的实体类为Comment</p>
</blockquote>
<p>1、新增评论</p>
<ul>
<li>参数1：Comment comment</li>
</ul>
<p>2、编辑评论</p>
<ul>
<li>参数1：Comment comment</li>
</ul>
<p>3、批量删除评论</p>
<ul>
<li>参数1：List<Integer > ids</li>
</ul>
<p>4、查询评论（分页）</p>
<ul>
<li>参数1：Integer num(页数)</li>
<li>参数2：Integer size（每页显示多少条数据）</li>
</ul>
<p>5、分页获取指定文章下所有的评论</p>
<ul>
<li>参数1：Integer articleId</li>
<li>参数2：Integer num</li>
<li>参数3：Integer size</li>
</ul>
<h2 id="5-字典"><a href="#5-字典" class="headerlink" title="5.字典"></a>5.字典</h2><p>1、用户表，cms_user</p>
<ul>
<li>一个用户有一个角色</li>
<li>一个角色有多个用户</li>
</ul>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210317221131577.png" alt="image-20210317221131577"></p>
<p>2、角色表，cms_role</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210317221149140.png" alt="image-20210317221149140"></p>
<p>3、文章类别表，cms_category</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210317221204520.png" alt="image-20210317221204520"></p>
<p>4、文章表，cms_article</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210317221220121.png" alt="image-20210317221220121"></p>
<p>5、评论表，cms_comment</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210317221235341.png" alt="image-20210317221235341"></p>
<p>快速原型  前端画出来  </p>
<h2 id="6-原型图"><a href="#6-原型图" class="headerlink" title="6.原型图"></a>6.原型图</h2><p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210317230950797.png" alt="image-20210317230950797"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210317231012612.png" alt="image-20210317231012612"></p>
<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建项目前确保环境</p>
<ul>
<li>maven正确配置</li>
<li>安装lombok插件(可选)  简化get/set/toString </li>
<li>mybatisx插件(可选)  简化Mybatis操作</li>
</ul>
<p>maven</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212125329906.png" alt="image-20211212125329906"></p>
<p>插件</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212125253757.png" alt="image-20211212125253757"></p>
<p><strong>打开idea,点击create new project</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212120353767.png" alt="image-20211212120353767"></p>
<p><strong>本次以Spring Initializer的方式创建springboot项目</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212120543562.png" alt="image-20211212120543562"></p>
<p><strong>选择项目配置</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212121736620.png" alt="image-20211212121736620"></p>
<p><strong>挑选依赖</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212122105673.png" alt="image-20211212122105673"></p>
<p><strong>自定义项目存放路径</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212122303953.png" alt="image-20211212122303953"></p>
<p><strong>创建成功后的页面</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212122743250.png" alt="image-20211212122743250"></p>
<h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.briup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>cms<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web集成了springmvc json等配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis集成--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--分页插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署 ctrl+F9--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--lombock 需要额外安装插件</span></span><br><span class="line"><span class="comment">				&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">			--&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--测试单元--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8989</span></span><br><span class="line"><span class="comment">#配置数据源</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/cms_jd2017?characterEncoding=utf8&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>



<h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmsApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CmsApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212123536298.png" alt="image-20211212123536298"></p>
<p>访问<a href="http://localhost:8989/">网址</a>  以下界面代表启动成功</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212124022919.png" alt="image-20211212124022919"></p>
<h2 id="逆向工程"><a href="#逆向工程" class="headerlink" title="逆向工程"></a>逆向工程</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="http://mybatis.org/generator/">Mybatis-Generator</a></p>
<p>MyBatis Generator (MBG) 是 MyBatis <a href="http://mybatis.org/">MyBatis</a>的代码生成器。它将为所有版本的 MyBatis 生成代码。它将内省一个数据库表（或多个表）并生成可用于访问表的工件。这减少了设置对象和配置文件以与数据库表交互的初始麻烦。MBG 试图对大量简单的 CRUD（创建、检索、更新、删除）的数据库操作产生重大影响。您仍然需要为连接查询或存储过程编写 SQL 和对象代码。</p>
<p>MBG 生成不同风格和不同语言的代码，这取决于它的配置方式。例如，MBG 可以生成 Java 或 Kotlin 代码。MBG 可以生成与 MyBatis3 兼容的 XML - 尽管现在被认为是 MBG 的遗留用途。生成代码的较新样式不需要 XML。</p>
<p>根据它的配置方式，MyBatis Generator 可能会生成：</p>
<ul>
<li><p>与表结构匹配的 Java 或 Kotlin 类。这可能包括：</p>
<ul>
<li>匹配表主键的类（如果有主键）</li>
<li>匹配表的非主键字段的类（BLOB 字段除外）</li>
<li>一个包含表的 BLOB 字段的类（如果表有 BLOB 字段）</li>
<li>启用动态选择、更新和删除的类</li>
</ul>
<p>这些类之间有适当的继承关系。请注意，生成器可以配置为生成不同类型的 POJO 层次结构 - 例如，如果您愿意，您可以选择为每个表生成单个域对象。</p>
</li>
<li><p>在某些情况下，MBG 会生成 MyBatis3 Compatible SQL Map XML Files。MBG 为配置中的每个表上的简单 CRUD 函数生成 SQL。生成的 SQL 语句包括：</p>
<ul>
<li>插入</li>
<li>按主键更新</li>
<li>示例更新（使用动态 where 子句）</li>
<li>按主键删除</li>
<li>删除示例（使用动态 where 子句）</li>
<li>按主键选择</li>
<li>按示例选择（使用动态 where 子句）</li>
<li>举例数</li>
</ul>
<p>根据表的结构，这些语句有不同的变体（例如，如果表没有主键，则 MBG 不会通过主键函数生成更新）。</p>
</li>
<li><p>适当使用上述对象的 Java 或 Kotlin 客户端类、接口和 Kotlin 扩展方法。客户端类的生成是可选的。MBG 将生成一个与 MyBatis 3.x 映射器基础设施配合使用的映射器接口</p>
</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><blockquote>
<p>pom.xml 引入逆向工程插件 </p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--逆向工程依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--逆向工程插件配置--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--逆向工程插件配置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--逆向工程的文件模板--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>准备逆向工程配置文件 src/main/resources/generatorConfig.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 防止xml追加 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 取消所有注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span></span></span><br><span class="line"><span class="tag">                <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/cms_jd2017?characterEncoding=utf8<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=GMT%2B8&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定生成的类型为java类型，避免数据库中number等类型字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对应的实体类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.briup.cms.entity&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;../cms/src/main/java&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--对应的XXXMapper.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;../cms/src/main/resources&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 对应的XXXMapper.java文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.briup.cms.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;../cms/src/main/java&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;cms_%&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">domainObjectRenamingRule</span> <span class="attr">searchString</span>=<span class="string">&quot;^Cms&quot;</span> <span class="attr">replaceString</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&lt;table tableName=&quot;logging&quot; domainObjectName=&quot;LoggingAccessInfo&quot; enableCountByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot;&gt;&lt;/table&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<blockquote>
<p>执行逆向工程插件</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212134345813.png" alt="image-20211212134345813"></p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212134504358.png" alt="image-20211212134504358"></p>
<h2 id="插入测试"><a href="#插入测试" class="headerlink" title="插入测试"></a>插入测试</h2><h3 id="main-1"><a href="#main-1" class="headerlink" title="main"></a>main</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.briup.cms.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmsApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(CmsApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="properties-1"><a href="#properties-1" class="headerlink" title="properties"></a>properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置mybatis映射文件路径</span></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>三层结构规范  </p>
</blockquote>
<ul>
<li>controller  api接口层 和页面交互</li>
<li>service 业务逻辑层</li>
<li>dao 数据访问层</li>
</ul>
<h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>接口  com.briup.cms.service.UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类  com.briup.cms.service.UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        userService.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>访问 <a href="http://localhost:8989/user/insert?username=jack&amp;status=0">http://localhost:8989/user/insert?username=jack&amp;status=0</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212155551100.png" alt="image-20211212155551100"></p>
<h2 id="查找测试"><a href="#查找测试" class="headerlink" title="查找测试"></a>查找测试</h2><h3 id="service-1"><a href="#service-1" class="headerlink" title="service"></a>service</h3><p>接口  com.briup.cms.service.UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">// 查找用户详情</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类  com.briup.cms.service.UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-1"><a href="#controller-1" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 将来前端传用户数据</span></span><br><span class="line">        userService.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找用户详情</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">info</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        User user = userService.findById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>访问 <a href="http://localhost:8989/user/info?id=4">http://localhost:8989/user/info?id=4</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;gender&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;image&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;phone&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;realName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;registerTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;roleId&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>问题</code></p>
<ul>
<li>参数都是通过?查询字符串进行拼接</li>
<li>都是@RequestMapping方式的请求</li>
</ul>
<h2 id="rest风格"><a href="#rest风格" class="headerlink" title="rest风格"></a>rest风格</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>对于前后端分离的项目，前后端之间的交互大多数是采用json的形式来传递数据，在这种情况下，数据的展现完全由前端负责，后端只需要把数据相关的接口暴露出来让前端去进行请求调用即可。</p>
</blockquote>
<p>在不考虑视图层的数据展现问题的情况下，后端可以创建出RSETFul风格的接口，供前端进行调用访问。</p>
<p>REST（Representational State Transfer），是2000年Roy Fielding博士在他的博士论文中所提出的一种软件架构模式。</p>
<p>REST就是一种设计API的模式。最常用的数据格式是JSON。由于JSON能直接被JavaScript读取，所以，以JSON格式编写的REST风格的API具有简单、易读、易用的特点。</p>
<p><strong>Rest架构的主要原则</strong></p>
<ol>
<li><p>系统中所有事物都被抽象为资源</p>
</li>
<li><p>每个资源有唯一的资源标识符</p>
</li>
<li><p>同一个资源具有多种表现形式(xml,json等)</p>
</li>
<li><p>对资源的各种操作不会改变资源标识符</p>
</li>
<li><p>所有的操作都是无状态的</p>
</li>
<li><p>符合REST原则的架构方式即可称为RESTful</p>
</li>
</ol>
<p><strong>RESTful的web服务是一种面向资源的架构设计，ROA(The Resource-Oriented Architecture)。</strong></p>
<p><strong>传统风格接口：</strong></p>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">http请求方法</th>
<th align="center">传统接口</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查询</td>
<td align="center">get</td>
<td align="center">/user/getinfo?id=1</td>
</tr>
<tr>
<td align="center">创建</td>
<td align="center">post</td>
<td align="center">/user/create</td>
</tr>
<tr>
<td align="center">修改</td>
<td align="center">post</td>
<td align="center">/user/update</td>
</tr>
<tr>
<td align="center">删除</td>
<td align="center">get</td>
<td align="center">/user/delete?id=1</td>
</tr>
</tbody></table>
<p><strong>RESTFul风格接口：</strong></p>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">http请求方法</th>
<th align="center">传统接口</th>
</tr>
</thead>
<tbody><tr>
<td align="center">查询</td>
<td align="center">get</td>
<td align="center">/user/1</td>
</tr>
<tr>
<td align="center">创建</td>
<td align="center">post</td>
<td align="center">/user</td>
</tr>
<tr>
<td align="center">修改</td>
<td align="center">put</td>
<td align="center">/user</td>
</tr>
<tr>
<td align="center">删除</td>
<td align="center">delete</td>
<td align="center">/user/1</td>
</tr>
</tbody></table>
<h3 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h3><blockquote>
<p>使用Rest风格改造UserController</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  插入用户</span></span><br><span class="line"><span class="comment">     *  使用rest风格传参</span></span><br><span class="line"><span class="comment">     *  前端向后端传递json格式数据,后端向前端返回json格式数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 将来前端传用户数据</span></span><br><span class="line">        userService.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找用户详情</span></span><br><span class="line"><span class="comment">     * 访问规则: http://localhost:8989/user/info/4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;info/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">info</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        User user = userService.findById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时注意测试方法</p>
</blockquote>
<p><strong>测试查询用户</strong></p>
<p><a href="http://localhost:8989/user/info/4">http://localhost:8989/user/info/4</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;gender&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;image&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;phone&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;realName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;registerTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;roleId&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试插入用户</strong></p>
<ul>
<li>post请求</li>
<li>参数为json</li>
<li>使用RestClient插件/postman</li>
</ul>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212162533779.png" alt="image-20211212162533779"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意 最有一个参数不要写,</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;gender&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;vanse&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;phone&quot;</span>: <span class="string">&quot;13500000000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;realName&quot;</span>: <span class="string">&quot;老刘&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;vanse&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>问题</code></p>
<ul>
<li>响应数据格式不规范<ul>
<li>添加没有返回数据</li>
<li>查询返回了用户数据</li>
</ul>
</li>
</ul>
<h2 id="统一响应"><a href="#统一响应" class="headerlink" title="统一响应"></a>统一响应</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>前后端分离规定了响应格式数据</p>
</blockquote>
<p>格式如下:</p>
<ul>
<li>code 状态码 200 401 403 415 </li>
<li>msg  提示消息 “操作成功” 删除成功  添加成功</li>
<li>data  数据  查询</li>
</ul>
<p><strong>导入工具类</strong></p>
<ul>
<li>Result  封装了统一响应结果<ul>
<li>code</li>
<li>msg</li>
<li>data</li>
</ul>
</li>
<li>ResultCode 一般来说 code和msg都是固定搭配 所以封装枚举类<ul>
<li>404 路径错误</li>
<li>401 未认证</li>
<li>403 无权限</li>
<li>500 服务器异常</li>
</ul>
</li>
</ul>
<p><strong>com.briup.cms.utils.ResultCode</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一并自定义返回状态码，如有需求可以另外增加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ResultCode</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 成功状态码 */</span></span><br><span class="line">	SUCCESS(<span class="number">1</span>, <span class="string">&quot;操作成功&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 参数错误：10001-19999 */</span></span><br><span class="line">	PARAM_IS_INVALID(<span class="number">10001</span>, <span class="string">&quot;参数无效&quot;</span>),</span><br><span class="line">	PARAM_IS_BLANK(<span class="number">10002</span>, <span class="string">&quot;参数为空&quot;</span>),</span><br><span class="line">	PARAM_TYPE_BIND_ERROR(<span class="number">10003</span>, <span class="string">&quot;参数类型错误&quot;</span>),</span><br><span class="line">	PARAM_NOT_COMPLETE(<span class="number">10004</span>, <span class="string">&quot;参数缺失&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 用户错误：20001-29999*/</span></span><br><span class="line">	USER_NOT_LOGIN(<span class="number">20001</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">	USER_LOGIN_ERROR(<span class="number">20002</span>, <span class="string">&quot;账号不存在或密码错误&quot;</span>),</span><br><span class="line">	USER_ACCOUNT_FORBIDDEN(<span class="number">20003</span>, <span class="string">&quot;账号已被禁用&quot;</span>),</span><br><span class="line">	USER_NOT_EXIST(<span class="number">20004</span>, <span class="string">&quot;用户不存在&quot;</span>),</span><br><span class="line">	USER_HAS_EXISTED(<span class="number">20005</span>, <span class="string">&quot;用户已存在&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 业务错误：30001-39999 */</span></span><br><span class="line">	SPECIFIED_QUESTIONED_USER_NOT_EXIST(<span class="number">30001</span>, <span class="string">&quot;业务逻辑出现问题&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 系统错误：40001-49999 */</span></span><br><span class="line">	SYSTEM_INNER_ERROR(<span class="number">40001</span>, <span class="string">&quot;系统内部错误，请稍后重试&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 数据错误：50001-599999 */</span></span><br><span class="line">	DATA_NONE(<span class="number">50001</span>, <span class="string">&quot;数据未找到&quot;</span>),</span><br><span class="line">	DATA_WRONG(<span class="number">50002</span>, <span class="string">&quot;数据错误&quot;</span>),</span><br><span class="line">	DATA_EXISTED(<span class="number">50003</span>, <span class="string">&quot;数据已存在&quot;</span>),</span><br><span class="line">	DATA_USEING(<span class="number">50004</span>,<span class="string">&quot;该数据正在被引用&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 接口错误：60001-69999 */</span></span><br><span class="line">	INTERFACE_INNER_INVOKE_ERROR(<span class="number">60001</span>, <span class="string">&quot;内部系统接口调用异常&quot;</span>),</span><br><span class="line">	INTERFACE_OUTTER_INVOKE_ERROR(<span class="number">60002</span>, <span class="string">&quot;外部系统接口调用异常&quot;</span>),</span><br><span class="line">	INTERFACE_FORBID_VISIT(<span class="number">60003</span>, <span class="string">&quot;该接口禁止访问&quot;</span>),</span><br><span class="line">	INTERFACE_ADDRESS_INVALID(<span class="number">60004</span>, <span class="string">&quot;接口地址无效&quot;</span>),</span><br><span class="line">	INTERFACE_REQUEST_TIMEOUT(<span class="number">60005</span>, <span class="string">&quot;接口请求超时&quot;</span>),</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/* 权限错误：70001-79999 */</span></span><br><span class="line">	PERMISSION_NO_ACCESS(<span class="number">70001</span>, <span class="string">&quot;无访问权限&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">	ResultCode(Integer code, String message) &#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code;</span><br><span class="line">		<span class="keyword">this</span>.message = message;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">code</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.code;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>com.briup.cms.utils.Result</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一Controller中RESTFul风格接口返回的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer code;</span><br><span class="line">	<span class="keyword">private</span> String msg;</span><br><span class="line">	<span class="keyword">private</span> Object data;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code;</span><br><span class="line">		<span class="keyword">this</span>.msg = msg;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setResultCode</span><span class="params">(ResultCode code)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.code = code.code();</span><br><span class="line">		<span class="keyword">this</span>.msg = code.message();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 操作失败，自定义code和msg</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">failure</span><span class="params">(Integer code, String msg)</span> </span>&#123;</span><br><span class="line">		Result result = <span class="keyword">new</span> Result(code,msg);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 操作成功，没有返回的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Result result = <span class="keyword">new</span> Result();</span><br><span class="line">		result.setResultCode(ResultCode.SUCCESS); <span class="comment">// 1 s</span></span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 操作成功，有返回的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">success</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">		Result result = <span class="keyword">new</span> Result();</span><br><span class="line">		result.setResultCode(ResultCode.SUCCESS);</span><br><span class="line">		result.setData(data);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 操作失败，没有返回的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">failure</span><span class="params">(ResultCode resultCode)</span> </span>&#123;</span><br><span class="line">		Result result = <span class="keyword">new</span> Result();</span><br><span class="line">		result.setResultCode(resultCode);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 操作失败，有返回的数据</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">failure</span><span class="params">(ResultCode resultCode, Object data)</span> </span>&#123;</span><br><span class="line">		Result result = <span class="keyword">new</span> Result();</span><br><span class="line">		result.setResultCode(resultCode);</span><br><span class="line">		result.setData(data);</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="改造-1"><a href="#改造-1" class="headerlink" title="改造"></a>改造</h3><blockquote>
<p>使用统一响应 改造UserController</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  插入用户</span></span><br><span class="line"><span class="comment">     *  使用rest风格传参</span></span><br><span class="line"><span class="comment">     *  前端向后端传递json格式数据,后端向前端返回json格式数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 将来前端传用户数据</span></span><br><span class="line">        userService.insert(user);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找用户详情</span></span><br><span class="line"><span class="comment">     * 访问规则: http://localhost:8989/user/info/4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;info/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">info</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        User user = userService.findById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>测试查询 <a href="http://localhost:8989/user/info/4">http://localhost:8989/user/info/4</a></strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">&quot;birthday&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;gender&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;image&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;phone&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;realName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;registerTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;roleId&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试插入</strong></p>
<ul>
<li><a href="http://localhost:8989/user/insert">http://localhost:8989/user/insert</a></li>
<li>post</li>
<li>Content-Type: application/json</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>:<span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>:<span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code> 问题</code></p>
<ul>
<li>如果出现了异常,统一响应格式将失效</li>
<li>并且页面出现堆砌错误数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(&quot;info/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">// 手动模拟异常 模板只能映射ids</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Result <span class="title">info</span><span class="params">(<span class="meta">@PathVariable(&quot;ids&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        User user = userService.findById(id);</span><br><span class="line">       <span class="keyword">return</span> Result.success(user);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212172552207.png" alt="image-20211212172552207"></p>
<h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a>全局异常处理</h2><blockquote>
<p>使用aop 将异常全局处理 并同样返回统一响应(响应错误数据)</p>
</blockquote>
<p><strong>com.briup.cms.exception.GlobelException</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobelExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">handlerException</span><span class="params">(Exception e)</span></span>&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span> Result.failure(<span class="number">500</span>,<span class="string">&quot;后台接口异常: &quot;</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>继续测试 <a href="http://localhost:8989/user/info/-1">http://localhost:8989/user/info/-1</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;后台接口异常&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>刚刚模拟的是系统异常,属于非可控情况,可以自定义异常,并返回友好提示</strong></p>
<p><strong>com.briup.cms.exception.CustomerException</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> ResultCode resultCode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomerException</span><span class="params">(ResultCode resultCode)</span> </span>&#123;</span><br><span class="line">        message = resultCode.message();</span><br><span class="line">        <span class="keyword">this</span>.resultCode = resultCode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>在UsreServiceImpl中抛出自定义异常</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(id &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.PARAM_IS_INVALID);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> userMapper.selectByPrimaryKey(id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<p>继续测试 <a href="http://localhost:8989/user/info/-1">http://localhost:8989/user/info/-1</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">10001</span>,</span><br><span class="line">  <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;参数无效&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212173448522.png" alt="image-20211212173448522"></p>
<p><code>问题</code></p>
<ul>
<li><p>后端测试较麻烦 尤其是post请求,json等格式</p>
</li>
<li><p>前后端分离的情况下 前端如何知道后台的接口路径去测试并对接页面呢?</p>
</li>
</ul>
<h2 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>项目采用前后台分离的架构进行开发，后台可以使用Swagger，生成在线API文档，方便前端人员对接使用</p>
</blockquote>
<p><code>Swagger </code>是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p>
<p><a href="https://swagger.io/">Swagger官网</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211110235217141.png" alt="image-20211110235217141"></p>
<p><a href="https://petstore.swagger.io/?_ga=2.236238660.419502645.1636559508-49422942.1636559508">配置生成的在线API文档样例：</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211110235430680.png" alt="image-20211110235430680"></p>
<p><code>springfox </code>，是一个开源的API Doc的框架， 它的前身是swagger-springmvc，可以将我们的Controller中<br>的方法以文档的形式展现。</p>
<p><a href="http://springfox.github.io/springfox/">springfox官网</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211110235736768.png" alt="image-20211110235736768"></p>
<p><code>springfox-swagger2 </code>，它是整合springmvc和swagger2的一个项目，项目中使用swagger时，要引入它<br>的<a href="https://mvnrepository.com/artifact/io.springfox/springfox-swagger2">依赖</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211110235947547.png" alt="image-20211110235947547"></p>
<h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p><strong>引入swagger依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger-ui依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>配置swagger</strong></p>
<p>com.briup.cms.config.Swagger2Config</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212174208946.png" alt="image-20211212174208946"></p>
<p><code>问题</code></p>
<ul>
<li>除UserController,还显示了默认接口</li>
<li>页面自定义信息</li>
</ul>
<p><strong>改造Swagger2Config</strong></p>
<p> 自定义扫描接口路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 配置swagger2类型 获取api构建器</span></span><br><span class="line">        <span class="comment">// 扫描的包 包下的路径</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.briup.cms.controller&quot;</span>)) <span class="comment">// 那些包需要扫描</span></span><br><span class="line">                .paths(PathSelectors.any())  <span class="comment">// 包下的那些路径需要扫描</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>此时页面只会扫描controller接口</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212205921161.png" alt="image-20211212205921161"></p>
<p>页面显示自定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 配置swagger2类型 获取api构建器</span></span><br><span class="line">        <span class="comment">// 扫描的包 包下的路径</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo()) <span class="comment">// 引用自定义方法apiInfo()</span></span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.briup.cms.controller&quot;</span>)) <span class="comment">// 那些包需要扫描</span></span><br><span class="line">                .paths(PathSelectors.any())  <span class="comment">// 包下的那些路径需要扫描</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// public static final ApiInfo DEFAULT = new ApiInfo(&quot;Api Documentation&quot;, &quot;Api Documentation&quot;, &quot;1.0&quot;, &quot;urn:tos&quot;,</span></span><br><span class="line"><span class="comment">//          DEFAULT_CONTACT, &quot;Apache 2.0&quot;, &quot;http://www.apache.org/licenses/LICENSE-2.0&quot;, new ArrayList&lt;VendorExtension&gt;());</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;cms&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;看点咨询系统(宿州学院)&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;briup&quot;</span>,<span class="string">&quot;http://www.briup.com&quot;</span>,<span class="string">&quot;wangsidandan@gmail.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212210135861.png" alt="image-20211212210135861"></p>
<p><code>问题</code></p>
<p>前端能否看懂swagger的配置以及如何传参</p>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p><code>@Api</code> ，用来指定当前API模块的名称<br><code>@ApiOperation </code>，用来设置API方法的简介说明<br><code>@ApiImplicitParams</code> ，用来设置API方法的参数，可以有多个参数<br><code>@ApiImplicitParam </code>，用来设置一个参数的详细信息</p>
<ul>
<li>name，参数的名称</li>
<li>value，参数的介绍</li>
<li>dataType，参数的数据类型，例如String</li>
<li>required，是否为必须参数</li>
<li>defaultValue，默认填入输入框的值</li>
<li>paramType，参数的类型：<ul>
<li>path    /user/{id} </li>
<li>query /user?id=</li>
<li>body 正文</li>
<li>header 请求头</li>
<li>form 请求表单</li>
</ul>
</li>
</ul>
<p><code>@ApiModel</code></p>
<ul>
<li>放在Bean上</li>
<li>该注解要配合post请求,@RequestBody才能生效</li>
<li>作用为给model解释</li>
<li>搭配 @ApiModelProperty一起使用</li>
</ul>
<p><code>ApiModelProperty</code></p>
<ul>
<li>放在属性上</li>
</ul>
<h3 id="改造-2"><a href="#改造-2" class="headerlink" title="改造"></a>改造</h3><p><strong>UserController</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户模块&quot;)</span> <span class="comment">//区分模块</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  插入用户</span></span><br><span class="line"><span class="comment">     *  使用rest风格传参</span></span><br><span class="line"><span class="comment">     *  前端向后端传递json格式数据,后端向前端返回json格式数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;添加用户&quot;,notes = &quot;json传参&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">insert</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 将来前端传用户数据</span></span><br><span class="line">        userService.insert(user);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找用户详情</span></span><br><span class="line"><span class="comment">     * 访问规则: http://localhost:8989/user/info/4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;查看用户详情&quot;,notes = &quot;rest传参 用户id&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;id&quot;,value = &quot;用户id&quot;,required = true,dataType = &quot;int&quot;,paramType = &quot;path&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;info/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">info</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        User user = userService.findById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>User</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;用户模型&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;id&quot;,value = &quot;用户id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="meta">@ApiModelProperty(name = &quot;birthday&quot;,value = &quot;用户生日&quot;,example = &quot;2000-01-01 00:00:00&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;gender&quot;,value = &quot;用户性别&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;image&quot;,value = &quot;用户头像&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;password&quot;,value = &quot;用户密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;phone&quot;,value = &quot;用户电话&quot;,example = &quot;13500000000&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;realName&quot;,value = &quot;真实姓名&quot;,example = &quot;tom&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;registerTime&quot;,value = &quot;用户id&quot;,hidden = true)</span></span><br><span class="line">    <span class="keyword">private</span> Date registerTime;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;status&quot;,value = &quot;用户状态 有默认值&quot;,example = &quot;0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;username&quot;,value = &quot;用户姓名&quot;,example = &quot;追风少年&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;roleId&quot;,value = &quot;角色id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer roleId;</span><br><span class="line">     <span class="comment">//,,, 省略get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注册时有些数据不能让用户填写,如用户状态(默认可用),注册时间等</p>
</blockquote>
<p><strong>改造UserServiceImpl</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">       user.setStatus(<span class="number">0</span>);</span><br><span class="line">       user.setRegisterTime(<span class="keyword">new</span> Date());</span><br><span class="line">       userMapper.insert(user);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212212819571.png" alt="image-20211212212819571"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212212849088.png" alt="image-20211212212849088"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;2000-01-01 08:00:00&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gender&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;phone&quot;</span>: <span class="number">13500000000</span>,</span><br><span class="line">  <span class="attr">&quot;realName&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;追风少年&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>至此,架构搭建完成  可以专注自己的业务模块 从controller 到 service 到dao</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211212213127484.png" alt="image-20211212213127484"></p>
<h1 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h1><h2 id="接口"><a href="#接口" class="headerlink" title="==接口=="></a>==接口==</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">// 查找用户详情(回显数据)</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//分页获取所有用户信息</span></span><br><span class="line">    <span class="function">PageUtil&lt;User&gt; <span class="title">getAll</span><span class="params">(PageUtil&lt;User&gt; page)</span></span>;</span><br><span class="line">    <span class="comment">//更新学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">// 删除单个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">//批量删除用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteUserInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line">    <span class="comment">//修改用户的状态</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateUserStatus</span><span class="params">(Integer id,Integer status)</span></span>;</span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    <span class="function">User <span class="title">login</span><span class="params">(String username,String password)</span></span>;</span><br><span class="line">    <span class="comment">//根据用户名获取用户信息</span></span><br><span class="line">    <span class="function">User <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><p><a href="#%E6%8F%92%E5%85%A5%E6%B5%8B%E8%AF%95">插入测试</a>已完成 补充插入的细节</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用户名和密码不能为空</span></span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasText(user.getUsername()) || !StringUtils.hasText(user.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.PARAM_IS_BLANK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用户名不能重复</span></span><br><span class="line">        User userFromDB = findUserByUsername(user.getUsername());</span><br><span class="line">        <span class="keyword">if</span>(userFromDB != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_EXISTED);</span><br><span class="line">        &#125;</span><br><span class="line">        user.setStatus(<span class="number">0</span>);</span><br><span class="line">        user.setRegisterTime(<span class="keyword">new</span> Date());</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userExtendMapper.findUserByUsername(username);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p><strong>com.briup.cms.mapper.extend.UserExtendMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserExtendMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>src/mapper/extend/UserExtendMapper.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.cms.mapper.extend.UserExtendMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserByUsername&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.briup.cms.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.UserMapper.Base_Column_List&quot;</span>/&gt;</span> from cms_user</span><br><span class="line">        where username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;2000-01-01 00:00:00&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gender&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;phone&quot;</span>: <span class="number">13500000000</span>,</span><br><span class="line">  <span class="attr">&quot;realName&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;追风少年8&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h3><p>com.briup.cms.utils.PageUtil</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;分页模型&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageUtil</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;pageNumber&quot;,value = &quot;当前页&quot;,example = &quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNumber;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;pageSize&quot;,value = &quot;每页数量&quot;,example = &quot;5&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 总条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(hidden = true)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(hidden = true)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; list;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 搜索条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;params&quot;,value = &quot;查询条件&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><p>com.briup.cms.mapper.extend.UserExtendMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserExtendMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findUserByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">    <span class="function">Page&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>; <span class="comment">// 返回PageHelper带的分页Page</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>src/mapper/extend/UserExtendMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;com.briup.cms.mapper.UserMapper.BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.UserMapper.Base_Column_List&quot;</span>/&gt;</span> from cms_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="service-2"><a href="#service-2" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageUtil&lt;User&gt; <span class="title">getAll</span><span class="params">(PageUtil&lt;User&gt; pageUtil)</span> </span>&#123;</span><br><span class="line">        PageHelper.startPage(pageUtil.getPageNumber(),pageUtil.getPageSize());</span><br><span class="line">        Page all = userExtendMapper.getAll();</span><br><span class="line">        pageUtil.setList(all.getResult());</span><br><span class="line">        pageUtil.setTotal(all.getTotal());</span><br><span class="line">        <span class="keyword">return</span> pageUtil;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-2"><a href="#controller-2" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;分页查找用户&quot;, notes = &quot;提供分页条件&quot;)</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;findByPage&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Result <span class="title">findByPage</span><span class="params">(<span class="meta">@RequestBody</span> PageUtil&lt;User&gt; pageUtil)</span> </span>&#123;</span><br><span class="line">       pageUtil= userService.getAll(pageUtil);</span><br><span class="line">       <span class="keyword">return</span> Result.success(pageUtil);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3><p><strong>请求</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;pageNumber&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;pageSize&quot;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;params&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>PageHelpler从第1页开始分页</code></p>
<p><strong>结果</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pageNumber&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;pageSize&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">9</span>,</span><br><span class="line">        <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;2000-01-01T00:00:00.000+00:00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gender&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;phone&quot;</span>: <span class="string">&quot;13500000000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;realName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;registerTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;追风少年&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;roleId&quot;</span>: <span class="literal">null</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;2000-01-01T00:00:00.000+00:00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gender&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;phone&quot;</span>: <span class="string">&quot;13500000000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;realName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;registerTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;追风少年2&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;roleId&quot;</span>: <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>时间格式有问题</code></p>
<p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.jackson.date-format</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="meta">spring.jackson.time-zone</span>=<span class="string">GMT+8</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">       <span class="attr">&quot;id&quot;</span>: <span class="number">12</span>,</span><br><span class="line">       <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;2000-01-01 08:00:00&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;gender&quot;</span>: <span class="number">0</span>,</span><br><span class="line">       <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;phone&quot;</span>: <span class="string">&quot;13500000000&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;realName&quot;</span>: <span class="string">&quot;tom&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;registerTime&quot;</span>: <span class="string">&quot;2021-12-13 12:18:55&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">       <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;追风少年3&quot;</span>,</span><br><span class="line">       <span class="attr">&quot;roleId&quot;</span>: <span class="literal">null</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>



<h2 id="回显"><a href="#回显" class="headerlink" title="回显"></a>回显</h2><p><a href="#%E6%9F%A5%E6%89%BE%E6%B5%8B%E8%AF%95">查找测试</a>已完成 将来可级联所属角色</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="service-3"><a href="#service-3" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 约定名字不可以修改 页面直接禁用组件即可,否则会出现和数据库同名</span></span><br><span class="line">        <span class="comment">// 或者做数据匹配判断</span></span><br><span class="line">        userMapper.updateByPrimaryKeySelective(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-3"><a href="#controller-3" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;修改用户&quot;, notes = &quot;json传参&quot;)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将来前端传用户数据</span></span><br><span class="line">        userService.update(user);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;2000-01-01 00:00:00&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gender&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;id&quot;</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;phone&quot;</span>: <span class="number">13500000000</span>,</span><br><span class="line">  <span class="attr">&quot;realName&quot;</span>: <span class="string">&quot;老刘&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;status&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="更新用户状态"><a href="#更新用户状态" class="headerlink" title="更新用户状态"></a>更新用户状态</h2><h3 id="service-4"><a href="#service-4" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUserStatus</span><span class="params">(Integer id, Integer status)</span> </span>&#123;</span><br><span class="line">        User temp = <span class="keyword">new</span> User();</span><br><span class="line">        temp.setId(id);</span><br><span class="line">        temp.setStatus(status);</span><br><span class="line">        userMapper.updateByPrimaryKeySelective(temp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-4"><a href="#controller-4" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;将用户禁用&quot;, notes = &quot;rest传参&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户id&quot;, required = true, dataType = &quot;int&quot;, paramType = &quot;path&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;status&quot;, value = &quot;用户状态&quot;, required = true, dataType = &quot;int&quot;, paramType = &quot;path&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;updateStatus/&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">updateStatus</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id,<span class="meta">@PathVariable(&quot;status&quot;)</span> <span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将来前端传用户数据</span></span><br><span class="line">        userService.updateUserStatus(id,status);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211213151028757.png" alt="image-20211213151028757"></p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="service-5"><a href="#service-5" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       userMapper.deleteByPrimaryKey(id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-5"><a href="#controller-5" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;删除单个用户&quot;,notes = &quot;rest风格&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户id&quot;, required = true, dataType = &quot;int&quot;, paramType = &quot;path&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">deleteBatch</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        userService.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><h3 id="mapper-1"><a href="#mapper-1" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserInBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        delete from cms_user</span><br><span class="line">        where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> &gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="service-6"><a href="#service-6" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 循环调用sql</span></span><br><span class="line">        <span class="comment">//ids.forEach(id -&gt; userMapper.deleteByPrimaryKey(id));</span></span><br><span class="line">        <span class="comment">// 批量调用sql</span></span><br><span class="line">       userExtendMapper.deleteUserInBatch(ids);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-6"><a href="#controller-6" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;批量删除&quot;,notes = &quot;需要传递多个id&quot;)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/deleteBatch&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">deleteBatch</span><span class="params">(<span class="meta">@ApiParam(value = &quot;批量id&quot;)</span><span class="meta">@RequestBody</span> List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// @ApiParam 默认是json格式</span></span><br><span class="line">        userService.deleteUserInBatch(ids);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="number">18</span>,<span class="number">19</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="vo"><a href="#vo" class="headerlink" title="vo"></a>vo</h3><p>com.briup.cms.vo.UserVo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;username&quot;,value = &quot;用户名&quot;,example = &quot;vanse&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty(name = &quot;password&quot;,value = &quot;密码&quot;,example = &quot;vanse&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="service-7"><a href="#service-7" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        User userFromDB = findUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span>(userFromDB == <span class="keyword">null</span> || !password.equals(userFromDB.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.USER_LOGIN_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userFromDB;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-7"><a href="#controller-7" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;认证模块&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;登录&quot;,notes = &quot;传json&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> UserVo userVo)</span></span>&#123;</span><br><span class="line">       User user = userService.login(userVo.getUsername(),userVo.getPassword());</span><br><span class="line">       <span class="keyword">return</span> Result.success();  </span><br><span class="line"><span class="comment">//       String token = UUID.randomUUID().toString() + &quot;-&quot; + user.getId();</span></span><br><span class="line"><span class="comment">//       return Result.success(token);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;vanse&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;vanse&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>思考: 登录成功后是否需要将用户存session</code></p>
<h2 id="当前用户信息"><a href="#当前用户信息" class="headerlink" title="当前用户信息"></a>当前用户信息</h2><blockquote>
<p>暂时不用 将来对接前台使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/resource/info&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Result <span class="title">info</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">       String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">       <span class="comment">// 取出token中的信息</span></span><br><span class="line">       Map&lt;String, Object&gt; map = JwtUtil.getInfo(token);</span><br><span class="line">       <span class="keyword">return</span> Result.success(map);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">@PostMapping(&quot;/resource/logout&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;去除token&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> Result.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h1 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>传统的Web应用中，使用session来存在用户的信息，每次用户认证通过以后，服务器需要创建一条记录<br>保存用户信息，通常是在内存中。</p>
<ul>
<li>随着认证通过的用户越来越多，服务器的在这里的开销就会越来越大,</li>
<li>由于Session是在内存中的，这就带来一些扩展性的问题<ul>
<li>servlet依赖于web容器    </li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210318005044861.png" alt="image-20210318005044861"></p>
<blockquote>
<p>JSON Web Token (JWT,token的一种)，是一个开放标准(RFC 7519)，它定义了一种紧凑的、自包含的方式，用于作为JSON对象在各方之间安全地传输信息。该信息可以被验证和信任，因为它是数字签名的。</p>
</blockquote>
<ul>
<li>JWT存放在客户端（前端），每次请求的请求头中，携带此JWT发送给服务器，服务器端负责接收<br>和验证</li>
<li>服务器端可以不用存储JWT，这样可以降低服务器的内存的开销</li>
<li>JWT和语言无关，扩展起来非常方便，无论是PC端还是移动端，都可以很容易的使用</li>
<li>不受cookie的限制</li>
</ul>
<p>如图：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210318005232445.png" alt="image-20210318005232445"></p>
<blockquote>
<p>注意，session和JWT的主要区别就是保存的位置，session是保存在服务端的，而JWT是保存在客户<br>端的</p>
</blockquote>
<blockquote>
<p>注意，JWT就是一个固定格式的字符串</p>
</blockquote>
<p><a href="https://jwt.io/">JWT官网</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210318005358285.png" alt="image-20210318005358285"></p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>JWT固定各种的字符串，由三部分组成：</p>
<ul>
<li>Header，头部</li>
<li>Payload，载荷</li>
<li>Signature，签名</li>
</ul>
<blockquote>
<p>注意，把这三部分使用点（.）连接起来，就是一个JWT字符串</p>
</blockquote>
<p>如图：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210319084618060.png" alt="image-20210319084618060"></p>
<h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><blockquote>
<p>header一般的由两部分组成：token的类型（“JWT”）和算法名称（比如：HMAC SHA256或者RSA等等）。</p>
</blockquote>
<p>JWT里验证和签名使用的算法列表如下：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210319084933149.png" alt="image-20210319084933149"></p>
<p>例如，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="载荷"><a href="#载荷" class="headerlink" title="载荷"></a>载荷</h3><blockquote>
<p>payload主要用来包含声明（claims ），这个声明一般是关于实体(通常是用户)和其他数据的声明。</p>
</blockquote>
<p>声明有三种类型:</p>
<ul>
<li>registered</li>
<li>public</li>
<li>private</li>
</ul>
<p>具体如下：</p>
<p>Registered claims : 这里有一组预定义的声明，它们不是强制的，但是推荐。</p>
<ul>
<li>iss: jwt签发者</li>
<li>sub: jwt所面向的用户</li>
<li>aud: 接收jwt的一方</li>
<li>exp: jwt的过期时间，这个过期时间必须要大于签发时间 </li>
<li>nbf: 定义在什么时间之前，该jwt都是不可用的</li>
<li>iat: jwt的签发时间</li>
<li>jti: jwt的唯一身份标识，主要用来作为一次性token，从而回避重放攻击</li>
</ul>
<p>Public claims : 可以随意定义</p>
<ul>
<li>自定义数据:存放在token中存放的key-value值</li>
</ul>
<p>Private claims : 用于在同意使用它们的各方之间共享信息，并且不是注册的或公开的声明</p>
<p>例如，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;iss&quot;</span>: <span class="string">&quot;briup&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;iat&quot;</span>: <span class="number">1446593502</span>,</span><br><span class="line">    <span class="attr">&quot;exp&quot;</span>: <span class="number">1446594722</span>,</span><br><span class="line">    <span class="attr">&quot;aud&quot;</span>: <span class="string">&quot;www.briup.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;briup@briup.com&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;tom&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，不要在JWT的payload或header中放置敏感信息，除非它们是加密的</p>
</blockquote>
<p>把头部和载荷分别进行Base64编码之后得到两个字符串，然后再将这两个编码后的字符串用英文句号.<br>连接在一起（头部在前），形成新的字符串：</p>
<p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2MmI2OWNlZC02YWNlLTRmYzAtOTk5MS00YWUwMjIxODQ0OTciLCJleHAiOjE2MDYwNTQzNjl9</code></p>
<p><a href="http://tool.chinaz.com/tools/base64.aspx">测试编码</a></p>
<p>###签名</p>
<p>最后，将上面拼接完的字符串用HS256算法进行加密，在加密的时候，还需要提供一个密钥（secret）。加密后的内容也是一个字符串，这个字符串就是签名。</p>
<p>把这个签名拼接在刚才的字符串后面就能得到完整的JWT字符串。<br>header部分和payload部分如果被篡改，由于篡改者不知道密钥是什么，也无法生成新的signature部分，<br>服务端也就无法通过。</p>
<blockquote>
<p>在JWT中，消息体是透明的，使用签名可以保证消息不被篡改。</p>
</blockquote>
<blockquote>
<p>确保密钥不会泄露,否则会被篡改</p>
</blockquote>
<p>例如，使用HMACSHA256加密算法，配合秘钥，将前俩部进行加密，生成签名</p>
<p><code>HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload), secret)</code></p>
<p>例如，将Header、Payload、Signature三部分使用点（.）连接起来</p>
<p><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2MmI2OWNlZC02YWNlLTRmYzAtOTk5MS00Y WUwMjIxODQ0OTciLCJleHAiOjE2MDYwNTQzNjl9.DNVhr36j66JpQBfcYoo64IRp84dKiQeaq7axHTBcP9 E</code></p>
<p>例如，使用官网提供的工具，可以对该JWT进行验证和解析（不要放敏感信息）</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210319085334765.png" alt="image-20210319085334765"></p>
<blockquote>
<p>注意，在代码中，我们使用JWT封装的工具类，也可以完成此操作 sso</p>
</blockquote>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTDecodeException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.JWTVerificationException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间5分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE_TIME = <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * jwt 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">&quot;jwt_secret&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成签名，五分钟后过期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> info，Map的value只能存放的值的类型为：Map, List, Boolean, Integer, Long, Double, String and Date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String userId,Map&lt;String,Object&gt; info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Date date = <span class="keyword">new</span> Date(System.currentTimeMillis() + EXPIRE_TIME);</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(SECRET);</span><br><span class="line">            <span class="keyword">return</span> JWT.create()</span><br><span class="line">                    <span class="comment">// 将 user id 保存到 token 里面</span></span><br><span class="line">                    .withAudience(userId)</span><br><span class="line">                    <span class="comment">// 存放自定义数据</span></span><br><span class="line">                    .withClaim(<span class="string">&quot;info&quot;</span>, info)</span><br><span class="line">                    <span class="comment">// 五分钟后token过期</span></span><br><span class="line">                    .withExpiresAt(date)</span><br><span class="line">                    <span class="comment">// token 的密钥</span></span><br><span class="line">                    .sign(algorithm);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        	e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUserId</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String userId = JWT.decode(token).getAudience().get(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> userId;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取自定义数据info</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,Object&gt; <span class="title">getInfo</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> JWT.decode(token).getClaim(<span class="string">&quot;info&quot;</span>).asMap();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTDecodeException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkSign</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Algorithm algorithm = Algorithm.HMAC256(SECRET);</span><br><span class="line">            JWTVerifier verifier = JWT.require(algorithm)</span><br><span class="line">                    <span class="comment">// .withClaim(&quot;username&quot;, username)</span></span><br><span class="line">                    .build();</span><br><span class="line">            verifier.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JWTVerificationException exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;token 无效，请重新获取&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="改造登录"><a href="#改造登录" class="headerlink" title="改造登录"></a>改造登录</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;认证模块&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;登录&quot;,notes = &quot;传json&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> UserVo userVo)</span></span>&#123;</span><br><span class="line">       User user = userService.login(userVo.getUsername(),userVo.getPassword());</span><br><span class="line">       Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;username&quot;</span>,user.getUsername());</span><br><span class="line">       map.put(<span class="string">&quot;image&quot;</span>,user.getImage());</span><br><span class="line">       String token = JwtUtil.sign(String.valueOf(user.getId()), map);</span><br><span class="line">       <span class="keyword">return</span> Result.success(token);</span><br><span class="line"><span class="comment">//       String token = UUID.randomUUID().toString() + &quot;-&quot; + user.getId();</span></span><br><span class="line"><span class="comment">//       return Result.success(token);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>com.briup.cms.interceptors.JwtInteceptors</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拦截认证资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtInteceptors</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       		 <span class="comment">// 可以放行预检请求</span></span><br><span class="line">		<span class="keyword">if</span>(!(handler <span class="keyword">instanceof</span> HandlerMethod))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 从请求头中获取token</span></span><br><span class="line">		String token = request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">		<span class="comment">// 判断token是否为空 空直接抛异常 </span></span><br><span class="line">		<span class="keyword">if</span>(token == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;无token,请登录&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 校验token</span></span><br><span class="line">		JwtUtil.checkSign(token);</span><br><span class="line">		<span class="comment">// 取出token中的信息</span></span><br><span class="line">		String userId = JwtUtil.getUserId(token);</span><br><span class="line">		System.out.println(userId);</span><br><span class="line">		Map&lt;String, Object&gt; info = JwtUtil.getInfo(token);</span><br><span class="line">		info.forEach((k,v)-&gt;&#123;</span><br><span class="line">			System.out.println(k+<span class="string">&quot;=&quot;</span>+v);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">// 放行</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="mvc配置"><a href="#mvc配置" class="headerlink" title="mvc配置"></a>mvc配置</h3><p>com.briup.cms.config.MvcConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">		registry.addInterceptor(<span class="keyword">new</span> JwtInteceptors())</span><br><span class="line">		.addPathPatterns(<span class="string">&quot;/resource/**&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;resource&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;测试模块&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@GetMapping(&quot;hello&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><strong>直接访问</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211112093343903.png" alt="image-20211112093343903"></p>
<p><strong>获取token</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211112093718429.png" alt="image-20211112093718429"></p>
<p><strong>携带请求头</strong></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211112093811250.png" alt="image-20211112093811250"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">gender=0</span><br><span class="line">username=wangsidandan</span><br></pre></td></tr></table></figure>



<p><strong>修改token，故意写错后，再访问测试</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;code&quot;</span>:<span class="number">500</span>,<span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;服务器异常: token 无效，请重新获取&quot;</span>,<span class="attr">&quot;data&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>获取新的token测试通过后，等待5分钟后，再次访问</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;code&quot;</span>:<span class="number">500</span>,<span class="attr">&quot;msg&quot;</span>:<span class="string">&quot;服务器异常: token 无效，请重新获取&quot;</span>,<span class="attr">&quot;data&quot;</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure>



<h3 id="swagger-1"><a href="#swagger-1" class="headerlink" title="swagger"></a>swagger</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/auth&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;测试模块&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;测试&quot;,notes = &quot;token放请求头&quot;)</span></span><br><span class="line">	<span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">		@ApiImplicitParam(name = &quot;token&quot;,value = &quot;token值&quot;,dataType = &quot;string&quot;,paramType = &quot;header&quot;,required = true)</span></span><br><span class="line"><span class="meta">	&#125;)</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>问题</code></p>
<p>每个需要拦截的资源都要手动配置token</p>
<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><blockquote>
<p>很多请求中，会携带token到服务器端进行认证，token有效时才可以进行本次访问，调用相应的接口</p>
</blockquote>
<p>使用swagger进行接口测试后，可以给swagger中测试的接口，添加全局的参数，让每一个接口都含义指定的参数，这样就不需要每一个接上添加swagger的注解了。</p>
<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicate;</span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicates;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.AuthorizationScope;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.SecurityReference;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: vanse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/12/12-12-12-17:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>：com.briup.cms.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>：1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 配置swagger2类型 获取api构建器</span></span><br><span class="line">        <span class="comment">// 扫描的包 包下的路径</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo()) <span class="comment">// 引用自定义方法apiInfo()</span></span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.briup.cms.controller&quot;</span>)) <span class="comment">// 那些包需要扫描</span></span><br><span class="line">                .paths(PathSelectors.any())  <span class="comment">// 包下的那些路径需要扫描</span></span><br><span class="line">                .build()</span><br><span class="line">                .securitySchemes(security()).securityContexts(securityContexts())</span><br><span class="line">                .ignoredParameterTypes(HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// public static final ApiInfo DEFAULT = new ApiInfo(&quot;Api Documentation&quot;, &quot;Api Documentation&quot;, &quot;1.0&quot;, &quot;urn:tos&quot;,</span></span><br><span class="line"><span class="comment">//          DEFAULT_CONTACT, &quot;Apache 2.0&quot;, &quot;http://www.apache.org/licenses/LICENSE-2.0&quot;, new ArrayList&lt;VendorExtension&gt;());</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;cms&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;看点咨询系统(宿州学院)&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;briup&quot;</span>,<span class="string">&quot;http://www.briup.com&quot;</span>,<span class="string">&quot;wangsidandan@gmail.com&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置认证中显示的显示的基本信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ApiKey&gt; <span class="title">security</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(<span class="keyword">new</span> ApiKey(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;token&quot;</span>, <span class="string">&quot;header&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置认证规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityContext&gt; <span class="title">securityContexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; antPaths = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        antPaths.add(<span class="string">&quot;/resource/**&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(SecurityContext.builder().securityReferences(defaultAuth())</span><br><span class="line">                .forPaths(antPathsCondition(antPaths)).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回认证路径的条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Predicate&lt;String&gt; <span class="title">antPathsCondition</span><span class="params">(List&lt;String&gt; antPaths)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Predicate&lt;String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        antPaths.forEach(path -&gt; list.add(PathSelectors.ant(path)));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Predicates.or(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置认证的范围，以及认证的类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(<span class="keyword">new</span> SecurityReference(<span class="string">&quot;Authorization&quot;</span>, authorizationScopes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里比之前新增的代码如下：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321171405316.png" alt="image-20210321171405316"></p>
<blockquote>
<p>注意，新增代码如图所示，以及下面新增的几个方法</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321171428922.png" alt="image-20210321171428922"></p>
<blockquote>
<p>注意，这里会显示一个“锁”的图标，表示这里有些接口是需要认证的</p>
</blockquote>
<p>展开模块后，访问路径符合要求接口，也会显示“锁”的图标</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321171450952.png" alt="image-20210321171450952"></p>
<p>点击锁的图标，添加请求头中的统一认证信息（token）：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321171509563.png" alt="image-20210321171509563"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321171519876.png" alt="image-20210321171519876"></p>
<p>点击认证按钮后，进行访问测试：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321171537958.png" alt="image-20210321171537958"></p>
<p>注意，这时候，有“锁”图标的接口，在访问的时候，都会携带刚刚设置的请求头中的认证信息token值</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321171609118.png" alt="image-20210321171609118"></p>
<p>注意，这时候，无“锁”图标的接口，在访问的时候，默认是不会携带设置的请求头信息的</p>
<h1 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h1><h2 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h2><p>跨域访问，是指从一个域名的网页去请求另一个域名的资源。比如从<a href="http://www.baidu.com/">www.baidu.com</a> 页面去请求 <a href="http://www.google.com/">www.google.com</a> 的资源。但是一般情况下不能这么做跨域访问，因为有浏览器的“<strong>同源策略</strong>”存在，这是浏览器对JavaScript施加的安全限制。</p>
<blockquote>
<p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321224558036.png" alt="image-20210321224558036"></p>
<p><strong>“同源策略”</strong>简单的说，就是A网站页面访问B网站的资源受限（跨域访问），除非A和B是“同源”。<br><strong>“同源”</strong>是指三个相同，协议相同、域名相同、端口相同，只有有任何一个地方不同，就认为是跨域。</p>
<p>例如，<br>网页A的地址为， <a href="http://www.example.com/dir/page.html">http://www.example.com/dir/page.html</a><br>假设，网页A要访问的网页B地址为：</p>
<ul>
<li><a href="http://www.example.com/dir2/other.html">http://www.example.com/dir2/other.html</a> ： 同源（正常访问）</li>
<li><a href="https://www.example.com/dir/other.html">https://www.example.com/dir/other.html</a> ：不同源（协议不同，跨域）</li>
<li><a href="http://vip.www.example.com/dir/other.html">http://vip.www.example.com/dir/other.html</a> ：不同源（域名不同，跨域）</li>
<li><a href="http://www.example.com:81/dir/other.html">http://www.example.com:81/dir/other.html</a> ：不同源（端口不同，跨域）</li>
</ul>
<p>随着互联网的发展，“同源政策”越来越严格，目前，如果非同源（跨域），共有三种行为受到限制：</p>
<ul>
<li>Cookie 、LocalStorage、IndexDB 无法访问</li>
<li>DOM 无法获取</li>
<li>AJAX请求不能发送</li>
</ul>
<p>浏览器的用“同源策略”来限制跨域访问的目的是为了安全，例如，假设没有跨域访问的限制</p>
<ul>
<li><p>用户访问<a href="http://www.mybank.com/">www.mybank.com</a> ，登陆并进行网银操作，这时cookie、token等数据信息存放在浏览器中</p>
</li>
<li><p>用户访问<a href="http://www.abc.com/">www.abc.com</a></p>
</li>
<li><p>这时<a href="http://www.abc.com/">www.abc.com</a> 网站就可以在拿到银行的cookie或token等，然后发起对<a href="http://www.mybank.com/">www.mybank.com</a> 的操作</p>
</li>
</ul>
<p>我们在项目中，需要设置对跨域访问的支持，是因为项目的架构需要，例如</p>
<ul>
<li>公司内部有多个不同的子系统，例如A和B，分别部署在不同的服务器上，其域名也不相同</li>
<li>由于公司内部的数据需要，现在A系统中，跨域访问B系统，从而获取内部的一些信息资源</li>
</ul>
<blockquote>
<p>注意，在前后端分离的项目中，前端页面部署在一个服务器上，后端项目部署在另一个服务器上，从前端页面上发送ajax请求到后端系统中，这种情况，就属于跨域访问</p>
</blockquote>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>1、新建项目，springboot-html</p>
<img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321230538847.png" alt="image-20210321230538847" style="zoom:50%;" />



<p>2、页面代码：ajax.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;script src=&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不需要写static--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;.btn1&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(msg);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3、pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>4、配置文件application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9999</span></span><br></pre></td></tr></table></figure>

<p>5、Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/ajax&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;ajax&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>6、运行访问</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321231102544.png" alt="image-20210321231102544"></p>
<p><strong>再构建提供接口访问的后端项目</strong></p>
<p>1、新建项目，springboot-cors</p>
<img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321231146093.png" alt="image-20210321231146093" style="zoom:67%;" />

<p>2、pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3、配置文件，application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8989</span></span><br></pre></td></tr></table></figure>

<p>4、Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、启动，访问</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321231321782.png" alt="image-20210321231321782"></p>
<p>最后，访问springboot-html项目中的ajax.html页面，点击页面中的按钮，发送ajax请求，访问springbootcors<br>项目中的接口：</p>
<p>当前页面的访问地址： <a href="http://localhost:9999/ajax">http://localhost:9999/ajax</a><br>点击按钮后请求地址： <a href="http://localhost:8989/hi">http://localhost:8989/hi</a><br>可以看出，此时这俩个地址，属于“非同源”，本次访问属于跨域访问。</p>
<p>点击后，控制台上输出的错误信息：<br>已拦截跨源请求：同源策略禁止读取位于 <a href="http://localhost:8989/hi">http://localhost:8989/hi</a> 的远程资源。<br>（原因：CORS 头缺少 ‘Access-Control-Allow-Origin’）。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321232022681.png" alt="image-20210321232022681"></p>
<p>点开网络模块，查看具体的请求信息：<br>请求头中，自动添加了信息 Origin: <a href="http://localhost:9999/">http://localhost:9999</a> ，通知服务器本次是跨域访问</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321232136576.png" alt="image-20210321232136576"></p>
<p>从本次响应的内容中，可以看到，其实响应的内容已经成功返回了，但是由于浏览器的同源政策，把这些结果都给舍弃了。并且执行了Ajax中的回调函数error</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210321232221184.png" alt="image-20210321232221184"></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>避开同源政策给跨域访问带来的限制，方式有很多：</p>
<ol>
<li>nginx</li>
<li>CORS（主要）</li>
<li>JSONP</li>
<li>WebSocket</li>
<li>Node.js</li>
<li>document.domain+iframe</li>
<li>other</li>
</ol>
<p>这里主要说下nginx反向代理和CORS跨域资源共享，这俩种跨域解决方案</p>
<h3 id="3-1-nginx"><a href="#3-1-nginx" class="headerlink" title="3.1 nginx"></a>3.1 nginx</h3><p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322064446018.png" alt="image-20210322064446018"></p>
<p>Nginx是一款开源的、高性能的HTTP和反向代理服务器</p>
<ul>
<li>也是一个IMAP/POP3/SMTP代理服务器</li>
<li>由C语言编写，其系统开销、CPU使用效率都很优秀</li>
<li>性能稳定、功能丰富、配置简洁</li>
<li>服务器中没有web容器</li>
</ul>
<p>正向代理，一般需要自己手动进行配置：(<strong>已知代理服务器</strong>)<br>代理服务器和客户端在同一个网络中。</p>
<p>例如，我们访问不了某个网站B，但是能访问某个代理服务器P，这个代理服务器P却可以访问到网络B，<br>那么我就先自己手动配置连上代理服务器P，然后让代理服务器P帮我访问网站B，并把结果返回。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211005101017166.png" alt="image-20211005101017166"></p>
<p>反向代理，一般是指以代理服务器来接收网络上的请求，然后将请求再转发给内部网络上的其他服务<br>器：<br>代理服务器和Web服务器在同一个网络中。一般不需要用户自己设置服务器，用户甚至感受不到自己访问的是反向代理服务器。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322064703065.png" alt="image-20210322064703065"></p>
<p>例如，Nginx的反向代理功能，解决访问跨域问题，或者实现多个服务器负载均衡的效果。</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322064734300.png" alt="image-20210322064734300"></p>
<p>1、修改nginx的配置文件nginx.conf</p>
<p>修改前的配置文件为：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322064805891.png" alt="image-20210322064805891"></p>
<p>修改后的配置文件为：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322064827250.png" alt="image-20210322064827250"></p>
<blockquote>
<p>特别注意，nginx启动的时候，一定不要存放在有中文的路径中，如果启动失败，查看错误的日志记录</p>
</blockquote>
<p>conf.config</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /html &#123;</span><br><span class="line">    rewrite ^/html/(.*)$ /$1 break;</span><br><span class="line">    proxy_pass http://localhost:9999/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当访问指定地址 <a href="http://localhost/html">http://localhost/html</a> 的时候，会先重写URI地址</li>
<li>URI符合正则表达式^/api/(.*)$ 的地址会被重写为 /$1</li>
<li>$1表示正则表达式中第一个()中的字符串</li>
<li>最后把重写后的新地址，转发给<a href="http://localhost:9999/">http://localhost:9999/</a></li>
</ul>
<p>例如，<br>浏览器中访问<a href="http://localhost/html/ajax">http://localhost/html/ajax</a><br>nginx代理后，先重写地址，将/html/ajax，重写为/ajax<br>然后转发给<a href="http://localhost:9999/">http://localhost:9999/</a> ，最终访问的是<a href="http://localhost:9999/ajax">http://localhost:9999/ajax</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api &#123;</span><br><span class="line">    rewrite ^/api/(.*)$ /$1 break;</span><br><span class="line">    proxy_pass http://localhost:8989/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，和上面的描述的含义相同</p>
</blockquote>
<p>2、ajax页面中，新增按钮和ajax请求</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  $(&quot;.btn2&quot;).on(&quot;click&quot;,function()&#123;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    type: &quot;GET&quot;,</span><br><span class="line">                    url : &quot;/api/hi&quot;,</span><br><span class="line">                    success: function(msg)&#123;</span><br><span class="line">                        console.log(msg);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: function()&#123;</span><br><span class="line">                        alert(&#x27;error&#x27;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>3、启动nginx服务器，访问地址</p>
<p><a href="http://localhost/html/ajax">http://localhost/html/ajax</a></p>
<blockquote>
<p>注意，此时访问springboot-html项目中的页面地址，和之前是不一样的</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322074942961.png" alt="image-20210322074942961"></p>
<p>没有使用nginx之前，访问springboot-html中页面的地址： <a href="http://localhost:9999/ajax">http://localhost:9999/ajax</a></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322070308045.png" alt="image-20210322070308045"></p>
<p>使用nginx之后，访问springboot-html中页面的地址： <a href="http://localhost/html/ajax">http://localhost/html/ajax</a></p>
<p>4、点击按钮2，发送ajax请求</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322075035934.png" alt="image-20210322075035934"></p>
<blockquote>
<p>可以看出，此时ajax请求已经成功了</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322075121167.png" alt="image-20210322075121167"></p>
<blockquote>
<p>注意，此时ajax请求的地址为： <a href="http://localhost/api/hi">http://localhost/api/hi</a></p>
</blockquote>
<blockquote>
<p>可以看出，已完成跨域访问，但其实是使用nginx代理服务器来“欺骗”浏览器，让浏览器认为是 “同源访问”</p>
</blockquote>
<p>如图：</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322070521188.png" alt="image-20210322070521188"></p>
<blockquote>
<p>浏览器中，从始至终都是访问<a href="http://localhost/">http://localhost/</a> 下面的资源，所以浏览器认为一直是“同源访问”</p>
</blockquote>
<blockquote>
<p>浏览器不知道的是，它访问的服务器是一个nginx代理服务器，它会接收浏览器请求，重写URI地址<br>后，转发给真正的服务器。</p>
</blockquote>
<h3 id="3-2-cors"><a href="#3-2-cors" class="headerlink" title="3.2 cors"></a>3.2 cors</h3><h4 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h4><p>CORS(Cross-origin resource sharing)，是一个W3C标准，全称是”跨域资源共享”。</p>
<ul>
<li>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。</li>
<li>对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。</li>
<li>浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息。（Origin）</li>
<li>有时还会多出一次附加的请求，但用户不会有感觉。（options方式的请求）</li>
</ul>
<h4 id="2、分类"><a href="#2、分类" class="headerlink" title="2、分类"></a>2、分类</h4><p>浏览器将CORS请求分成两类：</p>
<ul>
<li>简单请求（simple request）</li>
<li>非简单请求（not-so-simple request）</li>
</ul>
<p>只要同时满足以下两大条件，就属于简单请求：</p>
<p>请求方法是以下三种方法之一<br>    GET<br>    POST<br>    HEAD<br>HTTP的头信息不超出以下几种字段<br>    Accept<br>    Accept-Language</p>
<p>​    Content-Language<br>​    Last-Event-ID<br>​    Content-Type，该字段的值只能是以下三种</p>
<p>​        application/x-www-form-urlencoded</p>
<p>​        multipart/form-data<br>​        text/plain</p>
<blockquote>
<p>注意，只要不能同时满足上面两个条件，就属于非简单请求。</p>
</blockquote>
<h4 id="3、简单请求"><a href="#3、简单请求" class="headerlink" title="3、简单请求"></a>3、简单请求</h4><p>对于简单请求，浏览器直接发出CORS请求，同时在请求头中增加一个Origin字段。<br>该字段表示，本次请求来自哪个源（协议 + 域名 + 端口），服务器根据这个值，决定是否同意这次请<br>求。</p>
<p>Origin指定的源，即使不在服务器许可范围内，服务器还是会返回一个正常的HTTP响应，但是响应头中<br>不含指定Access-Control-Allow-Origin字段，浏览器这时候就知道本次跨域访问失败。<br>但是这个时候，响应状态可能是200，同时在一些工具中还能看到正确的返回值。<br>例如，</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322070848847.png" alt="image-20210322070848847"></p>
<p>其中，</p>
<ol>
<li>浏览器在请求头中自动添加了Origin 字段</li>
<li>服务器在响应中没有添加Access-Control-Allow-Origin 字段（说明服务器不支持此请求跨域访<br>问）</li>
<li>响应的状态码是200，并且从响应内容中可以看到正确的返回内容</li>
<li>同时，浏览器会抛出一个错误，被ajax的核心对象XMLHttpRequest的onerror 回调函数捕获</li>
</ol>
<p>如果Origin指定的域名在服务器的许可范围内，服务器返回的响应，会多出几个头信息字段：</p>
<ol>
<li><p>Access-Control-Allow-Origin<br>该字段是必须的。<br>它的值要么是请求时Origin字段的值，要么是一个*，表示接受任意域名的跨域请求。</p>
</li>
<li><p>Access-Control-Allow-Credentials</p>
<p>该字段可选<br>表示是否允许发送Cookie。<br>设为true，即表示服务器已经允许了，跨域请求中可以携带Cookie。<br>但是这需要AJAX中设置withCredentials=true进行配合。<br>如果服务器不要浏览器发送Cookie，删除该字段即可。</p>
</li>
</ol>
<p><code>3. Access-Control-Expose-Headers</code></p>
<p>​    该字段可选<br>​    列出了哪些首部可以作为响应的一部分暴露给外部。<br>​    默认情况下，只有七种可以暴露给外部<br>​    Cache-Control<br>​    Content-Language<br>​    Content-Length<br>​    Content-Type<br>​    Expires<br>​    Last-Modified<br>​    Pragma</p>
<p>​    如果想要让客户端可以访问到其他的首部信息，可以将它们在Access-Control-Expose-Headers里面指定</p>
<h4 id="4、非简单请求"><a href="#4、非简单请求" class="headerlink" title="4、非简单请求"></a>4、非简单请求</h4><p>非简单请求是那种对服务器有特殊要求的请求，比如请求方法是PUT或DELETE，或者Content-Type字段的类型是application/json。<br>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。<br>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些HTTP动词<br>和头信息字段。只有得到肯定答复，浏览器才会发出正式的XMLHttpRequest请求，否则就报错。</p>
<p>例如，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.btn1&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，在请求头中，指定contentType为application/json</p>
</blockquote>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322071208502.png" alt="image-20210322071208502"></p>
<blockquote>
<p>可以看出，请求头中有Content-Type:application/json 字段，属于非简单请求，浏览器会提前发送一个option方式的“预检请求”(预检请求会缓存)</p>
</blockquote>
<p>在这个“预检请求”的响应中，服务器会返回一些数据来通知浏览器，服务器对跨域请求的要求</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20210322071259213.png" alt="image-20210322071259213"></p>
<p>如果浏览器否定了“预检”请求，也会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。<br>这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest对象的onerror<br>回调函数捕获。</p>
<blockquote>
<p>测试简单请求和非简单请求</p>
</blockquote>
<p>==“预检”成功的常见响应头部字段有：==</p>
<ul>
<li>Access-Control-Allow-Origin 配置ip</li>
<li>Access-Control-Allow-Methods 配置请求方式</li>
<li>Access-Control-Allow-Headers 配置请求头</li>
<li>Access-Control-Allow-Credentials 配置是否信任cookie<br>标签允许客户端携带验证信息，例如 cookie<pre><code>Access-Control-Max-Age
表示预检请求的返回结果（即Access-Control-Allow-Methods 和Access-Control-Allow-Headers提供的信息） 可以被缓存多久。
</code></pre>
</li>
</ul>
<p>注意，ajax跨域访问的时候，如果需要在请求中携带cookie，需要有以下设置</p>
<ol>
<li><p>前端ajax请求中，指定withCredentials属性为ture</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">    <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span><br><span class="line">    <span class="attr">xhrFields</span>:&#123;</span><br><span class="line">   		 <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>后端响应头中，设置Access-Control-Allow-Credentials属性为true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//允许跨域携带cookie</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="3">
<li>后端响应头中，设置Access-Control-Allow-Origin属性为具体的值，而不是能通配符*</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://127.0.0.1:9999&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 允许cookie的情况下 前端配置 后台配置</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:9999&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">   <span class="comment">// 不允许cookie的情况下</span></span><br><span class="line">   <span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">		response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>前端访问 <a href="http://localhost:9999/ajax">http://localhost:9999/ajax</a> 后台就配 localhost</p>
<p>此时无法处理预检查请求</p>
</blockquote>
<h4 id="5、使用"><a href="#5、使用" class="headerlink" title="5、使用"></a>5、使用</h4><p>springboot-html项目中的ajax.html页面：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;script src=&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;.btn1&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(msg);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;.btn2&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span> : <span class="string">&quot;/api/hi&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(msg);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;.btn3&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(msg);</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">&#x27;error&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>test3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里主要测试的是test3按钮</p>
</blockquote>
<p>springboot-cors项目中的Controller：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>springboot-cors项目中的配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)<span class="comment">//映射所有路径</span></span><br><span class="line">        .allowedOrigins(<span class="string">&quot;*&quot;</span>)<span class="comment">//运行所有客户端访问</span></span><br><span class="line">        .allowCredentials(<span class="keyword">false</span>)<span class="comment">//不允许携带cookie</span></span><br><span class="line">        .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)<span class="comment">//</span></span><br><span class="line">        支持的方法</span><br><span class="line">        .allowedHeaders(<span class="string">&quot;*&quot;</span>)<span class="comment">//运行所有请求头字段</span></span><br><span class="line">        .maxAge(<span class="number">3600</span>);<span class="comment">//允许客户端缓存“预检请求”中获取的信息，3600秒</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里主要配置了跨域访问的属性</p>
</blockquote>
<p>启动俩个项目，访问页面，点击按钮，测试ajax跨域访问：</p>
<blockquote>
<p>可以看出，此时ajax请求进行跨域访问，已经成功</p>
</blockquote>
<blockquote>
<p>注意，此时可以尝试在ajax请求中，设置contentType: application/json ,观察是否会发出“预检”请求</p>
</blockquote>
<p>同时，也可以修改ajax请求，让其写的cookie和指定字段的头部：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;.btn3&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">url</span> : <span class="string">&quot;http://localhost:8989/hi&quot;</span>,</span><br><span class="line">        <span class="attr">xhrFields</span>:&#123;</span><br><span class="line">        <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">headers</span>:&#123;</span><br><span class="line">        <span class="attr">token</span>:<span class="string">&quot;aaa.bbb.ccc&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">contentType</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(msg);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>此时，对应的后端跨域设置为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">        .allowedOrigins(<span class="string">&quot;http://localhost:9999&quot;</span>)</span><br><span class="line">        .allowCredentials(<span class="keyword">true</span>)</span><br><span class="line">        .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">        .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">        .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6、其他"><a href="#6、其他" class="headerlink" title="6、其他"></a>6、其他</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addMapping(<span class="string">&quot;/**&quot;</span>)<span class="comment">//映射所有路径</span></span><br><span class="line">    .allowedOrigins(<span class="string">&quot;*&quot;</span>)<span class="comment">//运行所有客户端访问</span></span><br><span class="line">    .allowCredentials(<span class="keyword">false</span>)<span class="comment">//不允许携带cookie</span></span><br><span class="line">    .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)<span class="comment">//支持的方法</span></span><br><span class="line">    .allowedHeaders(<span class="string">&quot;*&quot;</span>)<span class="comment">//运行所有请求头字段</span></span><br><span class="line">    .maxAge(<span class="number">3600</span>);<span class="comment">//允许客户端缓存“预检请求”中获取的信息，3600秒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在此配置中，如果设置allowCredentials(true) ，那么allowedOrigins(“*”) 这里就不能使用通<br>配符了，必须要写一个或者多个（可变参数）客户端的地址<br>例如， allowedOrigins(“<a href="http://127.0.0.1:9999&quot;">http://127.0.0.1:9999&quot;</a>)</p>
<p>另外，如果只是想让Controller中的某一个方法或者几个方法被跨域访问，那么可以在方法上使用<br>@CrossOrigin 注解，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CrossOrigin(origins = &#123;&quot;http://127.0.0.1:9999&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，此时就不需要在配置类中做其他配置了，直接一个注解就可以让该方法被跨域访问了</p>
</blockquote>
<h1 id="角色模块"><a href="#角色模块" class="headerlink" title="角色模块"></a>角色模块</h1><h2 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有角色信息</span></span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//新增角色信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Role role)</span></span>;</span><br><span class="line">    <span class="comment">// 删除角色信息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><h3 id="mapper-2"><a href="#mapper-2" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.briup.cms.entity.Role&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.RoleMapper.Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">    from cms_role</span><br><span class="line">    where name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="service-8"><a href="#service-8" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">       String name = role.getName();</span><br><span class="line">       <span class="keyword">if</span> (!StringUtils.hasText(name)) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.PARAM_IS_BLANK);</span><br><span class="line">       &#125;</span><br><span class="line">	Role roleFromDB = roleExtendMapper.findByName(name);</span><br><span class="line">       <span class="keyword">if</span>(roleFromDB != <span class="keyword">null</span>)&#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_EXISTED);</span><br><span class="line">	&#125;</span><br><span class="line">       roleMapper.insertSelective(role);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-8"><a href="#controller-8" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;添加角色&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Role role)</span> </span>&#123;</span><br><span class="line">		roleService.save(role);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="mapper-3"><a href="#mapper-3" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.briup.cms.entity.Role&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.RoleMapper.Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        from cms_role</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service-9"><a href="#service-9" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> roleExtendMapper.findAll();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-9"><a href="#controller-9" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;findAll&quot;)</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;查询所有&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Result.success(roleService.findAll());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><h3 id="service-10"><a href="#service-10" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        roleMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-10"><a href="#controller-10" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;delete/&#123;id&#125;&quot;)</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;删除角色&quot;)</span></span><br><span class="line">	<span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">			@ApiImplicitParam(name = &quot;id&quot;, value = &quot;角色id&quot;, required = true, dataType = &quot;int&quot;, paramType = &quot;path&quot;)</span></span><br><span class="line"><span class="meta">	&#125;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class="line">		roleService.delete(id);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;	</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除看上去没有任何问题 此时有角色了,回头来看用户模块</p>
</blockquote>
<h2 id="用户新增"><a href="#用户新增" class="headerlink" title="==用户新增=="></a>==用户新增==</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;2000-01-01 00:00:00&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gender&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;briup&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;phone&quot;</span>: <span class="number">13500000000</span>,</span><br><span class="line">  <span class="attr">&quot;realName&quot;</span>: <span class="string">&quot;briup&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;roleId&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;briup&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="用户查询"><a href="#用户查询" class="headerlink" title="==用户查询=="></a>==用户查询==</h2><h3 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserExtend</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="mapper-4"><a href="#mapper-4" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userWithRole&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">extends</span>=<span class="string">&quot;com.briup.cms.mapper.UserMapper.BaseResultMap&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;com.briup.cms.entity.extend.UserExtend&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;role&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.briup.cms.entity.Role&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">select</span>=<span class="string">&quot;com.briup.cms.mapper.RoleMapper.selectByPrimaryKey&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userWithRole&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.UserMapper.Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        from cms_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service-11"><a href="#service-11" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PageUtil&lt;UserExtend&gt; <span class="title">getAll</span><span class="params">(PageUtil&lt;UserExtend&gt; pageUtil)</span> </span>&#123;</span><br><span class="line">       PageHelper.startPage(pageUtil.getPageNumber(),pageUtil.getPageSize());</span><br><span class="line">       Map&lt;String, Object&gt; params = pageUtil.getParams();</span><br><span class="line">       <span class="comment">//params.put(&quot;gender&quot;,0);</span></span><br><span class="line">       Page all = userExtendMapper.getAll(params);</span><br><span class="line">       pageUtil.setList(all.getResult());</span><br><span class="line">       pageUtil.setTotal(all.getTotal());</span><br><span class="line">       <span class="keyword">return</span> pageUtil;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>重新测试</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;code&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;操作成功&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pageNumber&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;pageSize&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;list&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;id&quot;</span>: <span class="number">21</span>,</span><br><span class="line">        <span class="attr">&quot;birthday&quot;</span>: <span class="string">&quot;2000-01-01 00:00:00&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;gender&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;image&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;briup&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;phone&quot;</span>: <span class="string">&quot;13500000000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;realName&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;registerTime&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;status&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;username&quot;</span>: <span class="string">&quot;briup&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;roleId&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">&quot;role&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;管理员&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="级联删除"><a href="#级联删除" class="headerlink" title="==级联删除=="></a>==级联删除==</h2><blockquote>
<p>如果用户有角色外键关联的情况下,角色无法删除  (外键约束)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Cannot delete or update a parent row: a foreign key constraint fails (`cms_jd2017`.`cms_user`, CONSTRAINT `FKpgvo8dl2imh6ags819okkslx9` FOREIGN KEY (`role_id`) REFERENCES `cms_role` (`id`))</span><br><span class="line">	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class="line">	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class="line">	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br></pre></td></tr></table></figure>



<ul>
<li>级联删除用户(慎用)</li>
<li>删除外键置空 (将来可以给用户重新分配角色)</li>
</ul>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211213223030967.png" alt="image-20211213223030967"></p>
<h1 id="分类模块"><a href="#分类模块" class="headerlink" title="分类模块"></a>分类模块</h1><h2 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.cms.entity.Category;</span><br><span class="line"><span class="keyword">import</span> com.briup.cms.utils.PageUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//分页获取所有分类 并按序号升序</span></span><br><span class="line">	<span class="function">PageUtil&lt;Category&gt; <span class="title">findAll</span><span class="params">(PageUtil&lt;Category&gt; pageUtil)</span></span>;</span><br><span class="line">	<span class="comment">//新增分类或者更新分类</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveCategory</span><span class="params">(Category category)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateCategory</span><span class="params">(Category category)</span></span>;</span><br><span class="line">	<span class="comment">//批量删除分类</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteCategoryInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line">	<span class="comment">//更新分类序号</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateCategoryNo</span><span class="params">(Integer id, Integer no)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h2><blockquote>
<p>含排序 分页 所在父目录</p>
</blockquote>
<h3 id="mapper-5"><a href="#mapper-5" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.cms.mapper.extend.CategoryExtendMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;categoryWithParent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.briup.cms.entity.extend.CategoryExtend&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">extends</span>=<span class="string">&quot;com.briup.cms.mapper.CategoryMapper.BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;category&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">javaType</span>=<span class="string">&quot;com.briup.cms.entity.Category&quot;</span> <span class="attr">column</span>=<span class="string">&quot;parent_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.briup.cms.mapper.CategoryMapper.selectByPrimaryKey&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;categoryWithParent&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.CategoryMapper.Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        from cms_category</span><br><span class="line">        order by no desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service-12"><a href="#service-12" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> PageUtil&lt;Category&gt; <span class="title">findAll</span><span class="params">(PageUtil&lt;Category&gt; pageUtil)</span> </span>&#123;</span><br><span class="line">		PageHelper.startPage(pageUtil.getPageNumber(),pageUtil.getPageSize());</span><br><span class="line">		Page&lt;Category&gt; all = categoryExtendMapper.findAll(pageUtil.getParams());</span><br><span class="line">		pageUtil.setList(all.getResult());</span><br><span class="line">		pageUtil.setTotal(all.getTotal());</span><br><span class="line">		<span class="keyword">return</span> pageUtil;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-11"><a href="#controller-11" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;查询目录&quot;,notes = &quot;分页并且顺序查询&quot; )</span></span><br><span class="line">	<span class="meta">@PostMapping(&quot;/findAll&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findAllSortbyno</span><span class="params">(<span class="meta">@RequestBody</span> PageUtil&lt;Category&gt; pageUtil)</span> </span>&#123;</span><br><span class="line">		PageUtil&lt;Category&gt; page = categoryService.findAll(pageUtil);</span><br><span class="line">		<span class="keyword">return</span> Result.success(page);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询父目录"><a href="#查询父目录" class="headerlink" title="查询父目录"></a>查询父目录</h2><blockquote>
<p>补充: 添加分类之前要查询一级目录提供选择</p>
</blockquote>
<h3 id="mapper-6"><a href="#mapper-6" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;parentCategory&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;com.briup.cms.mapper.CategoryMapper.BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">       select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.CategoryMapper.Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">       from cms_category</span><br><span class="line">       where parent_id = 0</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service-13"><a href="#service-13" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">findParentCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> categoryExtendMapper.parentCategory();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-12"><a href="#controller-12" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;查询父目录&quot;)</span></span><br><span class="line">	<span class="meta">@GetMapping(&quot;/findParentCategory&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findParentCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		List&lt;Category&gt; parentCategory= categoryService.findParentCategory();</span><br><span class="line">		<span class="keyword">return</span> Result.success(parentCategory);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="新增目录"><a href="#新增目录" class="headerlink" title="新增目录"></a>新增目录</h2><h3 id="mapper-7"><a href="#mapper-7" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.briup.cms.entity.Category&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.CategoryMapper.Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        from cms_category</span><br><span class="line">        where name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="service-14"><a href="#service-14" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveCategory</span><span class="params">(Category category)</span> </span>&#123;</span><br><span class="line">		String name = category.getName();</span><br><span class="line">		<span class="keyword">if</span>(!StringUtils.hasText(name))&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.PARAM_IS_BLANK);</span><br><span class="line">		&#125;</span><br><span class="line">		Category categoryFromDB = categoryExtendMapper.findByName(name);</span><br><span class="line">		<span class="keyword">if</span>(categoryFromDB != <span class="keyword">null</span>)&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_EXISTED);</span><br><span class="line">		&#125;</span><br><span class="line">		category.setNo(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">if</span>(category.getParentId() == <span class="keyword">null</span>)&#123;</span><br><span class="line">			category.setParentId(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		categoryMapper.insertSelective(category);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-13"><a href="#controller-13" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;新增&quot;,notes = &quot;json格式&quot;)</span></span><br><span class="line">	<span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">saveCategory</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> </span>&#123;</span><br><span class="line">		categoryService.saveCategory(category);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<h2 id="更新目录"><a href="#更新目录" class="headerlink" title="更新目录"></a>更新目录</h2><h3 id="service-15"><a href="#service-15" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCategory</span><span class="params">(Category category)</span> </span>&#123;</span><br><span class="line">		categoryMapper.updateByPrimaryKeySelective(category);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-14"><a href="#controller-14" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;更新&quot;,notes = &quot;json格式&quot;)</span></span><br><span class="line">	<span class="meta">@PutMapping(&quot;/update&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">updateCategory</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span> </span>&#123;</span><br><span class="line">		categoryService.updateCategory(category);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="更新分类排序"><a href="#更新分类排序" class="headerlink" title="更新分类排序"></a>更新分类排序</h2><h3 id="service-16"><a href="#service-16" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateCategoryNo</span><span class="params">(Integer id, Integer no)</span> </span>&#123;</span><br><span class="line">		Category category = <span class="keyword">new</span> Category();</span><br><span class="line">		category.setId(id);</span><br><span class="line">		category.setNo(no);</span><br><span class="line">		categoryMapper.updateByPrimaryKeySelective(category);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-15"><a href="#controller-15" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;更新分类排序&quot;,notes = &quot;改变排序字段&quot;)</span></span><br><span class="line">	<span class="meta">@PutMapping(&quot;/update/&#123;id&#125;/&#123;no&#125;&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">updateCategoryNo</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;id&quot;,value = &quot;分类id&quot;,required = true)</span> <span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id,</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(name = &quot;no&quot;,value = &quot;排序字段&quot;,required = true)</span>  <span class="meta">@PathVariable(&quot;no&quot;)</span> <span class="keyword">int</span> no)</span> </span>&#123;</span><br><span class="line">		categoryService.updateCategoryNo(id, no);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h2><h3 id="mapper-8"><a href="#mapper-8" class="headerlink" title="mapper"></a>mapper</h3><p>CategoryExtendMapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByParentId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.briup.cms.entity.Category&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.CategoryMapper.Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        from cms_category</span><br><span class="line">        where parent_id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>ArticleExtendMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.briup.cms.mapper.extend.ArticleExtendMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;findByCategoryId&quot;</span> resultType=<span class="string">&quot;com.briup.cms.entity.Article&quot;</span>&gt;</span><br><span class="line">        select &lt;include refid=<span class="string">&quot;com.briup.cms.mapper.ArticleMapper.Base_Column_List&quot;</span>/&gt;</span><br><span class="line">        from cms_article</span><br><span class="line">        where category_id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>



<h3 id="service-17"><a href="#service-17" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCategoryInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (Integer id : ids)&#123;</span><br><span class="line">			<span class="comment">// 看该目录是否被引用</span></span><br><span class="line">				<span class="comment">// select * from cms_category where parent_id = id</span></span><br><span class="line">			<span class="comment">// 是不是父目录</span></span><br><span class="line">			List&lt;Category&gt; categoryChildren = categoryExtendMapper.findByParentId(id);</span><br><span class="line">			<span class="keyword">if</span>(!CollectionUtils.isEmpty(categoryChildren))&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_USEING);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 目录下是不是有文章</span></span><br><span class="line">			List&lt;Article&gt; articleList = articleExtendMapper.findByCategoryId(id);</span><br><span class="line">			<span class="keyword">if</span>(!CollectionUtils.isEmpty(articleList))&#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_USEING);</span><br><span class="line">			&#125;</span><br><span class="line">			categoryMapper.deleteByPrimaryKey(id);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-16"><a href="#controller-16" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;删除目录&quot;,notes = &quot;提供多个id,批量删除&quot;)</span></span><br><span class="line">	<span class="meta">@DeleteMapping(&quot;/deleteBatch&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">deleteCategoryInBatch</span><span class="params">(<span class="meta">@ApiParam(&quot;id列表&quot;)</span><span class="meta">@RequestBody</span> List&lt;Integer&gt;ids)</span> </span>&#123;</span><br><span class="line">		categoryService.deleteCategoryInBatch(ids);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<h1 id="文章模块"><a href="#文章模块" class="headerlink" title="文章模块"></a>文章模块</h1><h2 id="接口-3"><a href="#接口-3" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ArticleService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//发布资讯或者编辑资讯</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveOrUpdateArticle</span><span class="params">(Article article)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//分页获取所有资讯</span></span><br><span class="line">	<span class="comment">//pageNum:页码，pageSize：一页显示多少条数据</span></span><br><span class="line">	<span class="function">Page&lt;Article&gt; <span class="title">findAll</span><span class="params">(Integer pageNum,Integer pageSize)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//批量删除资讯</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteArticleInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	<span class="comment">//管理员审核资讯</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">updateArticleStatus</span><span class="params">(Integer id,String status)</span><span class="keyword">throws</span> ServiceException</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 查询分类下的文章</span></span><br><span class="line">	<span class="function">List&lt;Article&gt; <span class="title">findByCategoryId</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加文章"><a href="#添加文章" class="headerlink" title="添加文章"></a>添加文章</h2><h3 id="mapper-9"><a href="#mapper-9" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.cms.mapper.extend.ArticleExtendMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByTitle&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.briup.cms.entity.Article&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.ArticleMapper.Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        from cms_article</span><br><span class="line">        where title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="service-18"><a href="#service-18" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">       String title = article.getTitle();</span><br><span class="line">       <span class="keyword">if</span> (!StringUtils.hasText(title)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.PARAM_IS_BLANK);</span><br><span class="line">       &#125;</span><br><span class="line">       Article articleFromDB = articleExtendMapper.findByTitle(title);</span><br><span class="line">       <span class="keyword">if</span> (articleFromDB != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.DATA_USEING);</span><br><span class="line">       &#125;</span><br><span class="line">       article.setPublishTime(<span class="keyword">new</span> Date());</span><br><span class="line">       article.setReadTimes(<span class="number">0</span>);</span><br><span class="line">       article.setThumbDown(<span class="number">0</span>);</span><br><span class="line">       article.setThumbUp(<span class="number">0</span>);</span><br><span class="line">       article.setStatus(<span class="number">0</span>);</span><br><span class="line">       articleMapper.insertSelective(article);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-17"><a href="#controller-17" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;新增文章&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Article article)</span> </span>&#123;</span><br><span class="line">	articleService.save(article);</span><br><span class="line">	<span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="修改文章"><a href="#修改文章" class="headerlink" title="修改文章"></a>修改文章</h2><h3 id="service-19"><a href="#service-19" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Article article)</span> </span>&#123;</span><br><span class="line">       articleMapper.updateByPrimaryKeySelective(article);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-18"><a href="#controller-18" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;修改文章&quot;)</span></span><br><span class="line">	<span class="meta">@PutMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Article article)</span> </span>&#123;</span><br><span class="line">		articleService.update(article);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分页查询-1"><a href="#分页查询-1" class="headerlink" title="分页查询"></a>分页查询</h2><h3 id="mapper-10"><a href="#mapper-10" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;resultWithCascade&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;com.briup.cms.mapper.ArticleMapper.BaseResultMap&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;com.briup.cms.entity.extend.ArticleExtend&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.briup.cms.entity.User&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.briup.cms.mapper.UserMapper.selectByPrimaryKey&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;category&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.briup.cms.entity.Category&quot;</span> <span class="attr">column</span>=<span class="string">&quot;category_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.briup.cms.mapper.CategoryMapper.selectByPrimaryKey&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultWithCascade&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.ArticleMapper.Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        from cms_article</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="service-20"><a href="#service-20" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PageUtil&lt;Article&gt; <span class="title">findAll</span><span class="params">(PageUtil pageUtil)</span> </span>&#123;</span><br><span class="line">       PageHelper.startPage(pageUtil.getPageNumber(), pageUtil.getPageSize());</span><br><span class="line">       Page all = articleExtendMapper.findAll(pageUtil.getParams());</span><br><span class="line">       pageUtil.setList(all.getResult());</span><br><span class="line">       pageUtil.setTotal(all.getTotal());</span><br><span class="line">       <span class="keyword">return</span> pageUtil;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-19"><a href="#controller-19" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;分页查询文章&quot;)</span></span><br><span class="line">	<span class="meta">@PostMapping(&quot;findAll&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">(<span class="meta">@RequestBody</span> PageUtil pageUtil)</span> </span>&#123;</span><br><span class="line">		PageUtil&lt;Article&gt; page = articleService.findAll(pageUtil);</span><br><span class="line">		<span class="keyword">return</span> Result.success(page);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="审核咨询"><a href="#审核咨询" class="headerlink" title="审核咨询"></a>审核咨询</h2><h3 id="service-21"><a href="#service-21" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateArticleStatus</span><span class="params">(Integer id, Integer status)</span> </span>&#123;</span><br><span class="line">	Article article = <span class="keyword">new</span> Article();</span><br><span class="line">	article.setId(id);</span><br><span class="line">	article.setStatus(status);</span><br><span class="line">	articleMapper.updateByPrimaryKeySelective(article);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-20"><a href="#controller-20" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;修改文章状态&quot;, notes = &quot;提供id和status&quot;)</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;&#123;id&#125;/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">updateArticleStatus</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;id&quot;,value = &quot;文章id&quot;,required = true)</span>	<span class="meta">@PathVariable(&quot;id&quot;)</span>Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">		<span class="meta">@ApiParam(name = &quot;status&quot;,value = &quot;审核状态&quot;,required = true)</span> <span class="meta">@PathVariable(&quot;status&quot;)</span> Integer status)</span> </span>&#123;</span><br><span class="line">	articleService.updateArticleStatus(id, status);</span><br><span class="line">	<span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h2><h3 id="service-22"><a href="#service-22" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        articleMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-21"><a href="#controller-21" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;delete/&#123;id&#125;&quot;)</span></span><br><span class="line">	<span class="meta">@ApiOperation(value = &quot;删除文章&quot;)</span></span><br><span class="line">	<span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">			@ApiImplicitParam(name = &quot;id&quot;, value = &quot;文章id&quot;, required = true, dataType = &quot;int&quot;, paramType = &quot;path&quot;)</span></span><br><span class="line"><span class="meta">	&#125;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">deleteBatch</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>&#123;</span><br><span class="line">		articleService.deleteById(id);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="批量删除-1"><a href="#批量删除-1" class="headerlink" title="批量删除"></a>批量删除</h2><h3 id="service-23"><a href="#service-23" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteArticleInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (Integer id : ids) &#123;</span><br><span class="line">           deleteById(id);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller-22"><a href="#controller-22" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;批量删除文章&quot;, notes = &quot;提供id集合&quot;)</span></span><br><span class="line">	<span class="meta">@DeleteMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">deleteBatch</span><span class="params">(<span class="meta">@ApiParam(value = &quot;文章id&quot;)</span> <span class="meta">@RequestBody</span> List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">		articleService.deleteArticleInBatch(ids);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h1><h2 id="接口-4"><a href="#接口-4" class="headerlink" title="接口"></a>接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.cms.utils.PageUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.cms.entity.Comment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CommentService</span> </span>&#123;</span><br><span class="line">	<span class="comment">//分页获取所有评论</span></span><br><span class="line">	<span class="function">PageUtil&lt;Comment&gt; <span class="title">findAll</span><span class="params">(PageUtil pageUtil)</span></span>;</span><br><span class="line">	<span class="comment">//新增评论或者更新评论</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">saveComment</span><span class="params">(Comment comment)</span></span>;</span><br><span class="line">	<span class="comment">//批量删除评论</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">deleteCommentInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="新增-1"><a href="#新增-1" class="headerlink" title="新增"></a>新增</h2><h3 id="service-24"><a href="#service-24" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveComment</span><span class="params">(Comment comment)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!StringUtils.hasText(comment.getContent()))&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> CustomerException(ResultCode.PARAM_IS_BLANK);</span><br><span class="line">		&#125;</span><br><span class="line">		comment.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">		commentMapper.insertSelective(comment);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-23"><a href="#controller-23" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation(value = &quot;添加评论&quot;,notes = &quot;参数为json格式&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Comment comment)</span> </span>&#123;</span><br><span class="line">	commentService.saveComment(comment);</span><br><span class="line">	<span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><h3 id="mapper-11"><a href="#mapper-11" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.cms.mapper.extend.CommentExtendMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;resultWithCascade&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.briup.cms.entity.extend.CommentExtend&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;com.briup.cms.mapper.CommentMapper.BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;comment&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.briup.cms.entity.Comment&quot;</span> <span class="attr">column</span>=<span class="string">&quot;comment_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.briup.cms.mapper.CommentMapper.selectByPrimaryKey&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;article&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.briup.cms.entity.Article&quot;</span> <span class="attr">column</span>=<span class="string">&quot;article_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.briup.cms.mapper.ArticleMapper.selectByPrimaryKey&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.briup.cms.entity.User&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.briup.cms.mapper.UserMapper.selectByPrimaryKey&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;resultWithCascade&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;com.briup.cms.mapper.CommentMapper.Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        from cms_comment</span><br><span class="line">         <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;articleId != null&quot;</span>&gt;</span></span><br><span class="line">                article_id = #&#123;articleId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="service-25"><a href="#service-25" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> PageUtil&lt;Comment&gt; <span class="title">findAll</span><span class="params">(PageUtil pageUtil)</span> </span>&#123;</span><br><span class="line">		PageHelper.startPage(pageUtil.getPageNumber(),pageUtil.getPageSize());</span><br><span class="line">		Page&lt;Comment&gt; page = commentExtendMapper.findAll(pageUtil.getParams());</span><br><span class="line">		pageUtil.setTotal(page.getTotal());</span><br><span class="line">		pageUtil.setList(page.getResult());</span><br><span class="line">		<span class="keyword">return</span> pageUtil;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-24"><a href="#controller-24" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;分页查询评论&quot;, notes = &quot;提供当前页码和每页显示条数&quot;)</span></span><br><span class="line">	<span class="meta">@PostMapping(&quot;findAll&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">findAll</span><span class="params">(<span class="meta">@RequestBody</span> PageUtil pageUtil)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Result.success(commentService.findAll(pageUtil));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h2 id="删除-2"><a href="#删除-2" class="headerlink" title="删除"></a>删除</h2><h3 id="service-26"><a href="#service-26" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCommentInBatch</span><span class="params">(List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Integer id : ids)&#123;</span><br><span class="line">			commentMapper.deleteByPrimaryKey(id);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



<h3 id="controller-25"><a href="#controller-25" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(value = &quot;批量删除评论&quot;, notes = &quot;提供id集合&quot;)</span></span><br><span class="line">	<span class="meta">@DeleteMapping</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Result <span class="title">deleteBatch</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="meta">@ApiParam(&quot;ids&quot;)</span><span class="meta">@RequestBody</span> List&lt;Integer&gt; ids)</span> </span>&#123;</span><br><span class="line">		commentService.deleteCommentInBatch(ids);</span><br><span class="line">		<span class="keyword">return</span> Result.success();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><h2 id="软件安装-1"><a href="#软件安装-1" class="headerlink" title="软件安装"></a>软件安装</h2><ul>
<li>node14</li>
<li>vscode</li>
</ul>
<blockquote>
<p>npm使用</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看npm版本</span></span><br><span class="line">npm -v</span><br><span class="line"><span class="meta">#</span><span class="bash">经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org </span><br><span class="line"><span class="meta">#</span><span class="bash">查看npm配置信息</span></span><br><span class="line">npm config list</span><br><span class="line">npm install #根据package.json中的配置下载依赖，初始化项目</span><br><span class="line">npm uninstall 包名</span><br></pre></td></tr></table></figure>





<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装模板"><a href="#安装模板" class="headerlink" title="安装模板"></a>安装模板</h3><blockquote>
<p>vueAdmin-template是基于vue-element-admin的一套后台管理系统基础模板（最少精简版），可作为模板进行二次开发。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压压缩包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入目录</span></span><br><span class="line">cd vue-admin-template-master</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动。执行后，浏览器自动弹出并访问http://localhost:9528/</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211214160805909.png" alt="image-20211214160805909"></p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211214155752274.png" alt="image-20211214155752274"></p>
<h3 id="改造模板"><a href="#改造模板" class="headerlink" title="改造模板"></a>改造模板</h3><blockquote>
<p>登录页面修改 src/views/login/index.vue</p>
</blockquote>
<p>第6行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h3 class=&quot;title&quot;&gt;看点咨询系统&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

<p>第44行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button :loading=&quot;loading&quot; type=&quot;primary&quot; style=&quot;width:100%;margin-bottom:30px;&quot; @click.native.prevent=&quot;handleLogin&quot;&gt;登录&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>

<p>第46-49</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- &lt;div class=&quot;tips&quot;&gt;</span><br><span class="line">        &lt;span style=&quot;margin-right:20px;&quot;&gt;username: admin&lt;/span&gt;</span><br><span class="line">        &lt;span&gt; password: any&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt; --&gt;</span><br></pre></td></tr></table></figure>

<p>第68-74</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> validatePassword = <span class="function">(<span class="params">rule, value, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value.length === <span class="number">0</span>) &#123;</span><br><span class="line">        callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Please enter the correct user password&#x27;</span>))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第144行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;../../../bg.jpg&quot;</span>) fixed;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211214163034847.png" alt="image-20211214163034847"></p>
<blockquote>
<p>导航栏 src/layout/components/navbar.vue</p>
</blockquote>
<p>第13行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-dropdown-menu slot=&quot;dropdown&quot; class=&quot;user-dropdown&quot;&gt;</span><br><span class="line">          &lt;router-link to=&quot;/&quot;&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;</span><br><span class="line">             首页</span><br><span class="line">            &lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;/router-link&gt;</span><br><span class="line">          &lt;!-- &lt;a target=&quot;_blank&quot; href=&quot;https://github.com/PanJiaChen/vue-admin-template/&quot;&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;Github&lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">          &lt;a target=&quot;_blank&quot; href=&quot;https://panjiachen.github.io/vue-element-admin-site/#/&quot;&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;Docs&lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;/a&gt; --&gt;</span><br><span class="line">          &lt;el-dropdown-item divided @click.native=&quot;logout&quot;&gt;</span><br><span class="line">            &lt;span style=&quot;display:block;&quot;&gt;退出&lt;/span&gt;</span><br><span class="line">          &lt;/el-dropdown-item&gt;</span><br><span class="line">        &lt;/el-dropdown-menu&gt;</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211214165713821.png" alt="image-20211214165713821" style="zoom:33%;" />

<blockquote>
<p>侧边栏 </p>
</blockquote>
<p>src/componentsBreadcrumb/index.vue 第35-37 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">this</span>.isDashboard(first)) &#123;</span><br><span class="line">        matched = [&#123; <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>, <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;&#x27;</span> &#125;&#125;].concat(matched)</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>src/router/index.js 第46-56</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>: Layout,</span><br><span class="line">   <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">   <span class="attr">children</span>: [&#123;</span><br><span class="line">     <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">     <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">     <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span> &#125;</span><br><span class="line">   &#125;]</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211214170002256.png" alt="image-20211214170002256"></p>
<blockquote>
<p>页面标题 src/settings.js</p>
</blockquote>
<p>第3行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">title: <span class="string">&#x27;看点咨询系统&#x27;</span>,</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211214170538978.png" alt="image-20211214170538978"></p>
<blockquote>
<p>国际化使用中文 src/main.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> locale <span class="keyword">from</span> <span class="string">&#x27;element-ui/lib/locale/lang/zh-CN&#x27;</span> <span class="comment">// lang i18n</span></span><br></pre></td></tr></table></figure>



<h2 id="登录-1"><a href="#登录-1" class="headerlink" title="登录"></a>登录</h2><blockquote>
<p>去除mock环境</p>
</blockquote>
<p>vue.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">第<span class="number">39</span>行</span><br><span class="line"><span class="comment">//before: require(&#x27;./mock/mock-server.js&#x27;)</span></span><br></pre></td></tr></table></figure>

<p>.env.development</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">VUE_APP_BASE_API = &#x27;http://localhost:8989&#x27;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>修改登录相关api路径 src/api/user.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/auth/login&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/resource/info&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/resource/logout&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>修改store中的user.js   src/store/modules/user.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; login, logout, getInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken, setToken, removeToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; resetRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getDefaultState = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">token</span>: getToken(),</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">avatar</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = getDefaultState()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="attr">RESET_STATE</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.assign(state, getDefaultState())</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_TOKEN</span>: <span class="function">(<span class="params">state, token</span>) =&gt;</span> &#123;</span><br><span class="line">    state.token = token</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_NAME</span>: <span class="function">(<span class="params">state, name</span>) =&gt;</span> &#123;</span><br><span class="line">    state.name = name</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">SET_AVATAR</span>: <span class="function">(<span class="params">state, avatar</span>) =&gt;</span> &#123;</span><br><span class="line">    state.avatar = avatar</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="comment">// user login</span></span><br><span class="line">  <span class="function"><span class="title">login</span>(<span class="params">&#123; commit &#125;, userInfo</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = userInfo</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      login(&#123; <span class="attr">username</span>: username.trim(), <span class="attr">password</span>: password &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; data &#125; = response</span><br><span class="line">        commit(<span class="string">&#x27;SET_TOKEN&#x27;</span>, data.token)</span><br><span class="line">        setToken(data.token)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// get user info</span></span><br><span class="line">  <span class="function"><span class="title">getInfo</span>(<span class="params">&#123; commit, state &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      getInfo(state.token).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data  = response.data;</span><br><span class="line">        <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">          <span class="keyword">return</span> reject(<span class="string">&#x27;Verification failed, please Login again.&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> &#123; username, image &#125; = data</span><br><span class="line"></span><br><span class="line">        commit(<span class="string">&#x27;SET_NAME&#x27;</span>, username)</span><br><span class="line">        commit(<span class="string">&#x27;SET_AVATAR&#x27;</span>, image)</span><br><span class="line">        resolve(data)</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// user logout</span></span><br><span class="line">  <span class="function"><span class="title">logout</span>(<span class="params">&#123; commit, state &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      logout(state.token).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        removeToken() <span class="comment">// must remove  token  first</span></span><br><span class="line">        resetRouter()</span><br><span class="line">        commit(<span class="string">&#x27;RESET_STATE&#x27;</span>)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove token</span></span><br><span class="line">  <span class="function"><span class="title">resetToken</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      removeToken() <span class="comment">// must remove  token  first</span></span><br><span class="line">      commit(<span class="string">&#x27;RESET_STATE&#x27;</span>)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>修改请求拦截器 src/utils/request.js</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; MessageBox, Message &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create an axios instance</span></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: process.env.VUE_APP_BASE_API, <span class="comment">// url = base url + request url</span></span><br><span class="line">  <span class="comment">// withCredentials: true, // send cookies when cross-domain requests</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span> <span class="comment">// request timeout</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request interceptor</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something before request is sent</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (store.getters.token) &#123;</span><br><span class="line">      <span class="comment">// let each request carry token</span></span><br><span class="line">      <span class="comment">// [&#x27;X-Token&#x27;] is a custom headers key</span></span><br><span class="line">      <span class="comment">// please modify it according to the actual situation</span></span><br><span class="line">      config.headers[<span class="string">&#x27;token&#x27;</span>] = getToken()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something with request error</span></span><br><span class="line">    <span class="built_in">console</span>.log(error) <span class="comment">// for debug</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response interceptor</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If you want to get http information such as headers or status</span></span><br><span class="line"><span class="comment">   * Please return  response =&gt; response</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Determine the request status by custom code</span></span><br><span class="line"><span class="comment">   * Here is just an example</span></span><br><span class="line"><span class="comment">   * You can also judge the status by HTTP Status Code</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if the custom code is not 20000, it is judged as an error.</span></span><br><span class="line">    <span class="keyword">if</span> (res.code !== <span class="number">1</span>) &#123;</span><br><span class="line">      Message(&#123;</span><br><span class="line">        <span class="attr">message</span>: res.message || <span class="string">&#x27;Error&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;</span></span><br><span class="line">      <span class="comment">// if (res.code === 50008 || res.code === 50012 || res.code === 50014) &#123;</span></span><br><span class="line">      <span class="comment">//   // to re-login</span></span><br><span class="line">      <span class="comment">//   MessageBox.confirm(&#x27;You have been logged out, you can cancel to stay on this page, or log in again&#x27;, &#x27;Confirm logout&#x27;, &#123;</span></span><br><span class="line">      <span class="comment">//     confirmButtonText: &#x27;Re-Login&#x27;,</span></span><br><span class="line">      <span class="comment">//     cancelButtonText: &#x27;Cancel&#x27;,</span></span><br><span class="line">      <span class="comment">//     type: &#x27;warning&#x27;</span></span><br><span class="line">      <span class="comment">//   &#125;).then(() =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//     store.dispatch(&#x27;user/resetToken&#x27;).then(() =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//       location.reload()</span></span><br><span class="line">      <span class="comment">//     &#125;)</span></span><br><span class="line">      <span class="comment">//   &#125;)</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(res.message || <span class="string">&#x27;Error&#x27;</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span> + error) <span class="comment">// for debug</span></span><br><span class="line">    Message(&#123;</span><br><span class="line">      <span class="attr">message</span>: error.message,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>登录成功后显示</p>
<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211214222946130.png" alt="image-20211214222946130"></p>
<blockquote>
<p>修改登录首页配置 </p>
</blockquote>
<p><strong>显示用户信息 src/layout/components/Navbar.vue</strong></p>
<p>第9-11行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;avatar-wrapper&quot;&gt;</span><br><span class="line">          &lt;div class=&quot;avatar-name&quot;&gt;欢迎您：&#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line">          &lt;img :src=&quot;avatar+&#x27;?imageView2/1/w/80/h/80&#x27;&quot; class=&quot;user-avatar&quot;&gt;</span><br><span class="line">          &lt;i class=&quot;el-icon-caret-bottom&quot; /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>第122行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 文字布局</span><br><span class="line">       <span class="selector-class">.avatar-name</span> &#123;</span><br><span class="line">         <span class="attribute">display</span>: inline-block;</span><br><span class="line">         <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">         <span class="attribute">position</span>: relative;</span><br><span class="line">         <span class="attribute">top</span>: -<span class="number">15px</span>;</span><br><span class="line">         <span class="attribute">right</span>: <span class="number">10px</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211214223958085.png" alt="image-20211214223958085"></p>
<p><strong>首页轮播图</strong>  src/views/dashboard/index.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dashboard-container&quot;&gt;</span><br><span class="line">    &lt;el-carousel</span><br><span class="line">      class=&quot;carou&quot;</span><br><span class="line">      autoplay</span><br><span class="line">      height=&quot;400px&quot;</span><br><span class="line">      :interval=&quot;5000&quot;</span><br><span class="line">      arrow=&quot;always&quot;</span><br><span class="line">      type=&quot;card&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-carousel-item v-for=&quot;item in images&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;el-image</span><br><span class="line">          style=&quot;width: 80%; height: 100%; border-radius: 50px&quot;</span><br><span class="line">          :src=&quot;item.url&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;/el-carousel-item&gt;</span><br><span class="line">    &lt;/el-carousel&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Dashboard&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      images: [</span><br><span class="line">        &#123; id: 1, url: &quot;http://r3tsx6mgn.hn-bkt.clouddn.com/2.jpg&quot; &#125;,</span><br><span class="line">        &#123; id: 2, url: &quot;http://r3tsx6mgn.hn-bkt.clouddn.com/3.jpg&quot; &#125;,</span><br><span class="line">        &#123; id: 4, url: &quot;http://r3tsx6mgn.hn-bkt.clouddn.com/4.jpg&quot; &#125;,</span><br><span class="line">        &#123;id: 5,url: &quot;http://r3tsx6mgn.hn-bkt.clouddn.com/20210924_212052_06.jpg&quot;&#125;,</span><br><span class="line">        // 本地图片</span><br><span class="line">        &#123;id: 6,url: require(&#x27;./images/1.jpg&#x27;)&#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">/* .dashboard &#123;</span><br><span class="line">  &amp;-container &#123;</span><br><span class="line">    margin: 30px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; */</span><br><span class="line"></span><br><span class="line">.images-parent &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: flex-start;</span><br><span class="line">  margin-top: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.images &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  &amp; img &#123;</span><br><span class="line">    width: 90%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-carousel__item &#123;</span><br><span class="line">  border-radius: 50px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211214230306767.png" alt="image-20211214230306767"></p>
<h2 id="角色模块-1"><a href="#角色模块-1" class="headerlink" title="角色模块"></a>角色模块</h2><h3 id="查询所有-1"><a href="#查询所有-1" class="headerlink" title="查询所有"></a>查询所有</h3><p>页面编写 src/views/cms/role/list.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;hello&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<p>页面路由 src/router/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/role&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;角色管理&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/role/list&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;角色管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;角色列表&#x27;</span>,</span><br><span class="line">      <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/cms/role/list&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;角色列表&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>



<p>axios封装接口  src/api/role.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> group_name = <span class="string">&#x27;/role&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">findAll</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/findAll`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">save</span>(<span class="params">role</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/save`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: role</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">deleteById</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/delete/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 src/views/cms/role/list.vue 调用接口 渲染数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 需要放到div块中 --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot;&gt;添加&lt;/el-button&gt;</span><br><span class="line">    &lt;!-- 数据表格 start --&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      :data=&quot;tableData&quot;</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      :row-class-name=&quot;tableRowClassName&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;description&quot; label=&quot;描述&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            size=&quot;mini&quot;</span><br><span class="line">            type=&quot;danger&quot;</span><br><span class="line">            @click=&quot;handleDelete(scope.row.id)&quot;</span><br><span class="line">            &gt;删除&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;!-- 数据表格 end --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">import roleApi from &quot;@/api/role.js&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.findAll();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    findAll() &#123;</span><br><span class="line">      roleApi</span><br><span class="line">        .findAll()</span><br><span class="line">        .then((resp) =&gt; &#123;</span><br><span class="line">          this.tableData = resp.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    save() &#123;&#125;,</span><br><span class="line">    handleDelete(id) &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">.el-table .warning-row &#123;</span><br><span class="line">  background: oldlace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.el-table .success-row &#123;</span><br><span class="line">  background: #f0f9eb;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<p>调整边距 src/layout/index.vue 第5行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;main-container&quot;&gt;</span><br><span class="line">     &lt;div :class=&quot;&#123;&#x27;fixed-header&#x27;:fixedHeader&#125;&quot;&gt;</span><br><span class="line">       &lt;navbar /&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     &lt;!-- 边距调整 --&gt;</span><br><span class="line">     &lt;div style=&quot;padding:2em&quot;&gt;</span><br><span class="line">         &lt;app-main /&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">     </span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211215161229752.png" alt="image-20211215161229752"></p>
<h3 id="删除-3"><a href="#删除-3" class="headerlink" title="删除"></a>删除</h3><p>修改 src/views/cms/role/list.vue 调用接口 渲染数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">handleDelete</span>(<span class="params">id</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$confirm(<span class="string">&quot;此操作将永久删除该文件, 是否继续?&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 删除</span></span><br><span class="line">          roleApi.deleteById(id).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.findAll();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;已取消删除&quot;</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211215212530385.png" alt="image-20211215212530385"></p>
<h3 id="添加-1"><a href="#添加-1" class="headerlink" title="添加"></a>添加</h3><p>修改 src/views/cms/role/list.vue 调用接口 渲染数据</p>
<blockquote>
<p>主要新增了 添加按钮  和添加的对话框 以及添加的相应方法</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 需要放到div块中 --&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;toSave&quot;&gt;添加&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 表格数据 start --&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      :data=&quot;tableData&quot;</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      :row-class-name=&quot;tableRowClassName&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; width=&quot;180&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;description&quot; label=&quot;描述&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; width=&quot;100&quot;&gt; </span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            size=&quot;mini&quot;</span><br><span class="line">            type=&quot;danger&quot;</span><br><span class="line">            @click=&quot;handleDelete(scope.row.id)&quot;</span><br><span class="line">            &gt;删除&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">       &lt;!-- 表格数据 end --&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 添加对话框 start--&gt;</span><br><span class="line">    &lt;el-dialog title=&quot;添加角色&quot; :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">      &lt;el-form :model=&quot;role&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;角色名称&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;role.name&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;角色描述&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;role.description&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;saveRole&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">    &lt;!-- 添加对话框 end --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;script&gt;</span><br><span class="line">import roleApi from &quot;@/api/role.js&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      tableData: [],</span><br><span class="line">      dialogFormVisible: false,</span><br><span class="line">      role:&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.findAll();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    tableRowClassName(&#123; row, rowIndex &#125;) &#123;</span><br><span class="line">      if (rowIndex === 1) &#123;</span><br><span class="line">        return &quot;warning-row&quot;;</span><br><span class="line">      &#125; else if (rowIndex === 3) &#123;</span><br><span class="line">        return &quot;success-row&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">      return &quot;&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">    toSave() &#123;</span><br><span class="line">      this.dialogFormVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">   saveRole()&#123;</span><br><span class="line">      roleApi</span><br><span class="line">        .save(this.role)</span><br><span class="line">        .then(res=&gt;&#123;</span><br><span class="line">            this.$message.success(res.msg);</span><br><span class="line">            this.dialogFormVisible=false;</span><br><span class="line">            this.findAll();</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error=&gt;&#123;</span><br><span class="line">            console.log(error);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211215212743608.png" alt="image-20211215212743608"></p>
<p><code>问题</code></p>
<p>继续添加对话框,上一次的数据还在</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$message.success(res.msg);</span><br><span class="line"><span class="built_in">this</span>.dialogFormVisible=<span class="literal">false</span>;</span><br><span class="line"><span class="built_in">this</span>.findAll();</span><br><span class="line"><span class="comment">// 清空表单数据 否则会自动绑定数据回显</span></span><br><span class="line"><span class="built_in">this</span>.role = &#123;&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="用户模块-1"><a href="#用户模块-1" class="headerlink" title="用户模块"></a>用户模块</h2><h3 id="api"><a href="#api" class="headerlink" title="api"></a>api</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页查询</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">findByPage</span>(<span class="params">page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/findByPage&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: page</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/insert&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: user</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/update&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: user</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/user/info/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteById</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/user/delete/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteBatch</span>(<span class="params">ids</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/deleteBatch&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: ids</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateStatus</span>(<span class="params">id,status</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/user/updateStatus/<span class="subst">$&#123;id&#125;</span>/<span class="subst">$&#123;status&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;用户管理&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;用户管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;用户列表&#x27;</span>,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/cms/user/list&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;用户列表&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<h3 id="分页用户"><a href="#分页用户" class="headerlink" title="分页用户"></a>分页用户</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 表格数据 start --&gt;</span><br><span class="line">    &lt;el-table :data=&quot;dataPage.list&quot; stripe style=&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;id&quot; label=&quot;编号&quot; width=&quot;100&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;username&quot; label=&quot;姓名&quot; width=&quot;100&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;realName&quot; label=&quot;昵称&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;gender&quot; label=&quot;性别&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &#123;&#123; scope.row.gender === 0 ? &quot;男&quot; : &quot;女&quot; &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;birthday&quot; label=&quot;生日&quot; width=&quot;150&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;registerTime&quot; label=&quot;注册时间&quot; width=&quot;150&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;status&quot; label=&quot;状态&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &#123;&#123; scope.row.status === 0 ? &quot;正常&quot; : &quot;禁用&quot; &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;image&quot; label=&quot;头像&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;scope.row.image&quot; alt=&quot;&quot; width=&quot;40px&quot; height=&quot;40px&quot; /&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;role.name&quot; label=&quot;角色&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 start --&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; width=&quot;150&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; @click=&quot;toUpdate(scope.row.id)&quot;</span><br><span class="line">            &gt;编辑&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;danger&quot; @click=&quot;deleteById(scope.row.id)&quot;</span><br><span class="line">            &gt;删除&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 end --&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;!-- 表格数据 end--&gt;</span><br><span class="line">    &lt;!-- 分页 start --&gt;</span><br><span class="line">       &lt;el-pagination</span><br><span class="line">        @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">        @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">        :current-page.sync=&quot;paramsPage.pageNumber&quot;</span><br><span class="line">        :page-sizes=&quot;[5, 10, 15, 25]&quot;</span><br><span class="line">        :page-size=&quot;paramsPage.pageSize&quot;</span><br><span class="line">        layout=&quot;sizes, prev, pager, next&quot;</span><br><span class="line">        :total=&quot;dataPage.total&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;/el-pagination&gt;</span><br><span class="line">         &lt;!-- 分页 end --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注意 user.js导出的都是单个函数</span><br><span class="line">import &#123; findByPage &#125; from &quot;@/api/user.js&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userList: [],</span><br><span class="line">      paramsPage: &#123;</span><br><span class="line">        // 查询传参page对象</span><br><span class="line">        pageNumber: 1,</span><br><span class="line">        pageSize: 5,</span><br><span class="line">        params: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      dataPage:&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    findAll() &#123;</span><br><span class="line">      console.log(&quot;分页查询&quot;);</span><br><span class="line">      findByPage(this.paramsPage)</span><br><span class="line">        .then((res) =&gt; &#123;</span><br><span class="line">         this.dataPage = res.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSizeChange(val) &#123;</span><br><span class="line">      this.paramsPage.pageSize = val;</span><br><span class="line">      this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      this.paramsPage.pageNumber = val;</span><br><span class="line">      this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    toSave()&#123;</span><br><span class="line">        this.dialogFormVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    saveUser()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.findAll();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><blockquote>
<p>添加用户需要选择角色 </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">findRole</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        roleApi</span><br><span class="line">        .findAll()</span><br><span class="line">        .then(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//this.$store.commit(&#x27;setRoleList&#x27;,resp.data);</span></span><br><span class="line">          <span class="built_in">this</span>.roleList = resp.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.findRole();</span><br><span class="line">    <span class="built_in">this</span>.findAll();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>添加用户</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;toSave&quot;&gt;添加&lt;/el-button&gt;</span><br><span class="line">      &lt;!-- 表格数据 start --&gt;</span><br><span class="line">    &lt;el-table :data=&quot;dataPage.list&quot; stripe style=&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;id&quot; label=&quot;编号&quot; width=&quot;100&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;username&quot; label=&quot;姓名&quot; width=&quot;100&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;realName&quot; label=&quot;昵称&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;gender&quot; label=&quot;性别&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &#123;&#123; scope.row.gender === 0 ? &quot;男&quot; : &quot;女&quot; &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;birthday&quot; label=&quot;生日&quot; width=&quot;150&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;registerTime&quot; label=&quot;注册时间&quot; width=&quot;150&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;status&quot; label=&quot;状态&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &#123;&#123; scope.row.status === 0 ? &quot;正常&quot; : &quot;禁用&quot; &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;image&quot; label=&quot;头像&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;scope.row.image&quot; alt=&quot;&quot; width=&quot;40px&quot; height=&quot;40px&quot; /&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;role.name&quot; label=&quot;角色&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 start --&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; width=&quot;150&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; @click=&quot;toUpdate(scope.row.id)&quot;</span><br><span class="line">            &gt;编辑&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;danger&quot; @click=&quot;deleteById(scope.row.id)&quot;</span><br><span class="line">            &gt;删除&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 end --&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;!-- 表格数据 end--&gt;</span><br><span class="line">    &lt;!-- 分页 start --&gt;</span><br><span class="line">        &lt;el-pagination</span><br><span class="line">        @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">        @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">        :current-page.sync=&quot;paramsPage.pageNumber&quot;</span><br><span class="line">        :page-sizes=&quot;[5, 10, 15, 25]&quot;</span><br><span class="line">        :page-size=&quot;paramsPage.pageSize&quot;</span><br><span class="line">        layout=&quot;sizes, prev, pager, next&quot;</span><br><span class="line">        :total=&quot;dataPage.total&quot;</span><br><span class="line">        &gt;</span><br><span class="line">        &lt;/el-pagination&gt;</span><br><span class="line">         &lt;!-- 分页 end --&gt;</span><br><span class="line">    &lt;!-- 添加对话框 start--&gt;</span><br><span class="line">    &lt;el-dialog title=&quot;添加用户&quot; :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">      &lt;el-form :model=&quot;user&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;昵称&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.username&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">         &lt;el-form-item label=&quot;真实姓名&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.realName&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户密码&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.password&quot; autocomplete=&quot;off&quot; show-password&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">         &lt;el-form-item label=&quot;电话&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.phone&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;生日&quot;&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model=&quot;user.birthday&quot;</span><br><span class="line">            type=&quot;datetime&quot;</span><br><span class="line">            placeholder=&quot;选择日期时间&quot;</span><br><span class="line">            value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;/el-date-picker&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户性别&quot;&gt;</span><br><span class="line">          &lt;el-radio v-model=&quot;user.gender&quot; :label=&quot;0&quot;&gt;男&lt;/el-radio&gt;</span><br><span class="line">          &lt;el-radio v-model=&quot;user.gender&quot; :label=&quot;1&quot;&gt;女&lt;/el-radio&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;角色&quot;&gt;</span><br><span class="line">          &lt;el-select style=&quot;width: 100%&quot; v-model=&quot;user.roleId&quot; clearable placeholder=&quot;请选择&quot;&gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in roleList&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">              :label=&quot;item.name&quot;</span><br><span class="line">              :value=&quot;item.id&quot;</span><br><span class="line">            &gt;&lt;/el-option&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;saveUser&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">    &lt;!-- 添加对话框 end --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注意 user.js导出的都是单个函数</span><br><span class="line">// import &#123; save, update, deleteById, query, updateStatus &#125; from &quot;@/api/user&quot;;</span><br><span class="line">import &#123; findByPage,insert &#125; from &quot;@/api/user.js&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line"> </span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userList: [],</span><br><span class="line">      paramsPage: &#123;</span><br><span class="line">        // 查询传参page对象</span><br><span class="line">        pageNumber: 1,</span><br><span class="line">        pageSize: 5,</span><br><span class="line">        params: &#123;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      dataPage:&#123;&#125;,</span><br><span class="line">      dialogFormVisible: false,</span><br><span class="line">      user:&#123;&#125;,</span><br><span class="line">      roleList: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">     findRole()&#123;</span><br><span class="line">        roleApi</span><br><span class="line">        .findAll()</span><br><span class="line">        .then((resp) =&gt; &#123;</span><br><span class="line">          //this.$store.commit(&#x27;setRoleList&#x27;,resp.data);</span><br><span class="line">          this.roleList = resp.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    findAll() &#123;</span><br><span class="line">      findByPage(this.paramsPage)</span><br><span class="line">        .then((res) =&gt; &#123;</span><br><span class="line">         this.dataPage = res.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSizeChange(val) &#123;</span><br><span class="line">      this.paramsPage.pageSize = val;</span><br><span class="line">      this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      this.paramsPage.pageNumber = val;</span><br><span class="line">      this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    toSave()&#123;</span><br><span class="line">        this.dialogFormVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    saveUser()&#123;</span><br><span class="line">        insert(this.user)</span><br><span class="line">            .then(res =&gt; &#123;</span><br><span class="line">                this.$message.success(res.msg);</span><br><span class="line">                this.dialogFormVisible = false;</span><br><span class="line">                // 清空值</span><br><span class="line">                this.user = &#123;&#125;;</span><br><span class="line">                this.findAll();</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(error=&gt;&#123;</span><br><span class="line">                console.log(error);</span><br><span class="line">            &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.findRole();</span><br><span class="line">    this.findAll();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211216013916031.png" alt="image-20211216013916031"></p>
<h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><blockquote>
<p>约定 名字不可修改</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;toSave&quot;&gt;添加&lt;/el-button&gt;</span><br><span class="line">    &lt;!-- 表格数据 start --&gt;</span><br><span class="line">    &lt;el-table :data=&quot;dataPage.list&quot; stripe style=&quot;width: 100%&quot;&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;id&quot; label=&quot;编号&quot; width=&quot;100&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;username&quot; label=&quot;姓名&quot; width=&quot;100&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;realName&quot; label=&quot;昵称&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;gender&quot; label=&quot;性别&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &#123;&#123; scope.row.gender === 0 ? &quot;男&quot; : &quot;女&quot; &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;birthday&quot; label=&quot;生日&quot; width=&quot;150&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;registerTime&quot; label=&quot;注册时间&quot; width=&quot;150&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;status&quot; label=&quot;状态&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &#123;&#123; scope.row.status === 0 ? &quot;正常&quot; : &quot;禁用&quot; &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;image&quot; label=&quot;头像&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;scope.row.image&quot; alt=&quot;&quot; width=&quot;40px&quot; height=&quot;40px&quot; /&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;role.name&quot; label=&quot;角色&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 start --&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; width=&quot;150&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot; @click=&quot;toUpdate(scope.row)&quot;</span><br><span class="line">            &gt;编辑&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;danger&quot; @click=&quot;deleteById(scope.row.id)&quot;</span><br><span class="line">            &gt;删除&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 end --&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;!-- 表格数据 end--&gt;</span><br><span class="line">    &lt;!-- 分页 start --&gt;</span><br><span class="line">    &lt;el-pagination</span><br><span class="line">      @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">      @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">      :current-page.sync=&quot;paramsPage.pageNumber&quot;</span><br><span class="line">      :page-sizes=&quot;[5, 10, 15, 25]&quot;</span><br><span class="line">      :page-size=&quot;paramsPage.pageSize&quot;</span><br><span class="line">      layout=&quot;sizes, prev, pager, next&quot;</span><br><span class="line">      :total=&quot;dataPage.total&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/el-pagination&gt;</span><br><span class="line">    &lt;!-- 分页 end --&gt;</span><br><span class="line">    &lt;!-- 添加对话框 start--&gt;</span><br><span class="line">    &lt;el-dialog title=&quot;添加用户&quot; :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">      &lt;el-form :model=&quot;user&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;昵称&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.username&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;真实姓名&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.realName&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户密码&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;user.password&quot;</span><br><span class="line">            autocomplete=&quot;off&quot;</span><br><span class="line">            show-password</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;电话&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.phone&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;生日&quot;&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model=&quot;user.birthday&quot;</span><br><span class="line">            type=&quot;datetime&quot;</span><br><span class="line">            placeholder=&quot;选择日期时间&quot;</span><br><span class="line">            value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;/el-date-picker&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户性别&quot;&gt;</span><br><span class="line">          &lt;el-radio v-model=&quot;user.gender&quot; :label=&quot;0&quot;&gt;男&lt;/el-radio&gt;</span><br><span class="line">          &lt;el-radio v-model=&quot;user.gender&quot; :label=&quot;1&quot;&gt;女&lt;/el-radio&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;角色&quot;&gt;</span><br><span class="line">          &lt;el-select</span><br><span class="line">            style=&quot;width: 100%&quot;</span><br><span class="line">            v-model=&quot;user.roleId&quot;</span><br><span class="line">            clearable</span><br><span class="line">            placeholder=&quot;请选择&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in roleList&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">              :label=&quot;item.name&quot;</span><br><span class="line">              :value=&quot;item.id&quot;</span><br><span class="line">            &gt;&lt;/el-option&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;saveUser&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">    &lt;!-- 添加对话框 end --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 修改抽屉 start --&gt;</span><br><span class="line">    &lt;el-drawer title=&quot;修改用户&quot; :visible.sync=&quot;drawer&quot; :direction=&quot;direction&quot;&gt;</span><br><span class="line">      &lt;!-- 复制对话框用户表单数据即可 --&gt;</span><br><span class="line">      &lt;el-form :model=&quot;user&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;昵称&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.username&quot; autocomplete=&quot;off&quot; readonly&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;真实姓名&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.realName&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户密码&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;user.password&quot;</span><br><span class="line">            autocomplete=&quot;off&quot;</span><br><span class="line">            show-password</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;电话&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.phone&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;生日&quot;&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model=&quot;user.birthday&quot;</span><br><span class="line">            type=&quot;datetime&quot;</span><br><span class="line">            placeholder=&quot;选择日期时间&quot;</span><br><span class="line">            value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;/el-date-picker&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户性别&quot;&gt;</span><br><span class="line">          &lt;el-radio v-model=&quot;user.gender&quot; :label=&quot;0&quot;&gt;男&lt;/el-radio&gt;</span><br><span class="line">          &lt;el-radio v-model=&quot;user.gender&quot; :label=&quot;1&quot;&gt;女&lt;/el-radio&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;角色&quot;&gt;</span><br><span class="line">          &lt;el-select</span><br><span class="line">            style=&quot;width: 100%&quot;</span><br><span class="line">            v-model=&quot;user.roleId&quot;</span><br><span class="line">            clearable</span><br><span class="line">            placeholder=&quot;请选择&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in roleList&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">              :label=&quot;item.name&quot;</span><br><span class="line">              :value=&quot;item.id&quot;</span><br><span class="line">            &gt;&lt;/el-option&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">        &lt;el-button @click=&quot;drawer = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;updateUser&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-drawer&gt;</span><br><span class="line">    &lt;!-- 修改抽屉 end --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注意 user.js导出的都是单个函数</span><br><span class="line">// import &#123; save, update, deleteById, query, updateStatus &#125; from &quot;@/api/user&quot;;</span><br><span class="line">import &#123; findByPage, insert,update &#125; from &quot;@/api/user.js&quot;;</span><br><span class="line">import roleApi from &quot;@/api/role.js&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userList: [],</span><br><span class="line">      paramsPage: &#123;</span><br><span class="line">        // 查询传参page对象</span><br><span class="line">        pageNumber: 1,</span><br><span class="line">        pageSize: 5,</span><br><span class="line">        params: &#123;&#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      dataPage: &#123;&#125;,</span><br><span class="line">      dialogFormVisible: false,</span><br><span class="line">      user: &#123;&#125;,</span><br><span class="line">      roleList: &#123;&#125;,</span><br><span class="line">      drawer: false, // 是否开启抽屉</span><br><span class="line">      direction: &quot;rtl&quot;// 抽屉打开方向</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  // watch必须放在data后面</span><br><span class="line">  // watch: &#123;</span><br><span class="line">  //   &quot;$store.getters.roleList&quot;: function (newVal, oldVal) &#123;</span><br><span class="line">  //     console.log(&#x27;new Val&#x27;);</span><br><span class="line">  //     console.log(newVal);</span><br><span class="line">  //     this.roleList = newVal;</span><br><span class="line">  //   &#125;,</span><br><span class="line">  // &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    findRole()&#123;</span><br><span class="line">        roleApi</span><br><span class="line">        .findAll()</span><br><span class="line">        .then((resp) =&gt; &#123;</span><br><span class="line">          //this.$store.commit(&#x27;setRoleList&#x27;,resp.data);</span><br><span class="line">          this.roleList = resp.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    findAll() &#123;</span><br><span class="line">      findByPage(this.paramsPage)</span><br><span class="line">        .then((res) =&gt; &#123;</span><br><span class="line">          this.dataPage = res.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSizeChange(val) &#123;</span><br><span class="line">      this.paramsPage.pageSize = val;</span><br><span class="line">      this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      this.paramsPage.pageNumber = val;</span><br><span class="line">      this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    toSave() &#123;</span><br><span class="line">      this.dialogFormVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    saveUser() &#123;</span><br><span class="line">      insert(this.user)</span><br><span class="line">        .then((res) =&gt; &#123;</span><br><span class="line">          this.$message.success(res.msg);</span><br><span class="line">          this.dialogFormVisible = false;</span><br><span class="line">          // 清空值</span><br><span class="line">          this.user = &#123;&#125;;</span><br><span class="line">          this.findAll();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    toUpdate(row) &#123;</span><br><span class="line">      this.user = row; // 回显数据</span><br><span class="line">      this.drawer = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    updateUser()&#123;</span><br><span class="line">      update(this.user)</span><br><span class="line">        .then(res =&gt; &#123;</span><br><span class="line">          this.$message.success(res.msg);</span><br><span class="line">          this.drawer = false;</span><br><span class="line">          this.user = &#123;&#125;;</span><br><span class="line">          this.findAll();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.findRole();</span><br><span class="line">    this.findAll();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">deleteById</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//deleteById(id)</span></span><br><span class="line">        <span class="built_in">this</span>.$confirm(<span class="string">&quot;此操作将永久删除该文件, 是否继续?&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 删除</span></span><br><span class="line">            deleteById(id).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.findAll();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;已取消删除&quot;</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="批量删除-2"><a href="#批量删除-2" class="headerlink" title="批量删除"></a>批量删除</h3><blockquote>
<p>需要提供批量选择框</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;el-button type=<span class="string">&quot;danger&quot;</span> @click=<span class="string">&quot;deleteBatch&quot;</span>&gt;批量删除&lt;/el-button&gt;</span><br><span class="line">    &lt;!-- @selection-change绑定多选事件 --&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;dataPage.list&quot;</span> <span class="attr">stripe</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>  @<span class="attr">selection-change</span>=<span class="string">&quot;handleSelectionChange&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!-- 批量选择框 --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取批量操作的值</span></span><br><span class="line">    <span class="function"><span class="title">handleSelectionChange</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 默认val是批量的值的集合  此处只需要批量id 需要映射处理</span></span><br><span class="line">      <span class="built_in">this</span>.ids = val.map(<span class="function"><span class="params">item</span> =&gt;</span> item.id);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">deleteBatch</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">this</span>.$confirm(<span class="string">&quot;此操作将永久删除该文件, 是否继续?&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">        <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 批量删除</span></span><br><span class="line">            deleteBatch(<span class="built_in">this</span>.ids).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.findAll();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&quot;已取消删除&quot;</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211216110254387.png" alt="image-20211216110254387"></p>
<h3 id="禁用用户"><a href="#禁用用户" class="headerlink" title="禁用用户"></a>禁用用户</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;!-- 用户操作按钮 start --&gt;</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toUpdate(scope.row)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteById(scope.row.id)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">            &gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-if</span>=<span class="string">&quot;scope.row.status== &#x27;0&#x27;&quot;</span>  <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">&quot;updateStatus(scope.row.id,1)&quot;</span>&gt;</span>禁用<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-if</span>=<span class="string">&quot;scope.row.status== &#x27;1&#x27;&quot;</span>  <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">plain</span> @<span class="attr">click</span>=<span class="string">&quot;updateStatus(scope.row.id,0)&quot;</span>&gt;</span>启用<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line">      &lt;!-- 用户操作按钮 end --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改用户状态</span></span><br><span class="line">    <span class="function"><span class="title">updateStatus</span>(<span class="params">id,status</span>)</span>&#123;</span><br><span class="line">        updateStatus(id,status)</span><br><span class="line">          .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(res.msg);</span><br><span class="line">            <span class="built_in">this</span>.findAll();</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error);</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/vanse/images/raw/master/cms_mybatis/image-20211216111901944.png" alt="image-20211216111901944"></p>
<blockquote>
<p>页面格子太满 先将生日 注册时间等详情隐藏  将来需要查看详情提供接口即可</p>
</blockquote>
<h2 id="分类模块-1"><a href="#分类模块-1" class="headerlink" title="分类模块"></a>分类模块</h2><h3 id="api-1"><a href="#api-1" class="headerlink" title="api"></a>api</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> group_name = <span class="string">&#x27;/category&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">findAll</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/findAll`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">findParentCategory</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/findParentCategory`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>           </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">save</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/save`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">update</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/update`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">deleteBatch</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/deleteBatch`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">updateNo</span>(<span class="params">id,no</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/updateNo/<span class="subst">$&#123;id&#125;</span>/<span class="subst">$&#123;no&#125;</span>`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="router-1"><a href="#router-1" class="headerlink" title="router"></a>router</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">path</span>: <span class="string">&#x27;/category&#x27;</span>,</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;分类管理&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>: Layout,</span><br><span class="line">   <span class="attr">redirect</span>: <span class="string">&#x27;/category/list&#x27;</span>,</span><br><span class="line">   <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;分类管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;,</span><br><span class="line">   <span class="attr">children</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;分类列表&#x27;</span>,</span><br><span class="line">       <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/cms/category/list&#x27;</span>),</span><br><span class="line">       <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;分类列表&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   ]</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<h3 id="list-vue"><a href="#list-vue" class="headerlink" title="list.vue"></a>list.vue</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;toSave&quot;&gt;添加&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;danger&quot; @click=&quot;deleteBatch&quot;&gt;批量删除&lt;/el-button&gt;</span><br><span class="line">    &lt;!-- 表格数据 start --&gt;</span><br><span class="line">    &lt;!-- @selection-change绑定多选事件 --&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      :data=&quot;dataPage.list&quot;</span><br><span class="line">      stripe</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      @selection-change=&quot;handleSelectionChange&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 批量选择框 --&gt;</span><br><span class="line">      &lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;id&quot; label=&quot;编号&quot; width=&quot;50&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;name&quot; label=&quot;名称&quot; width=&quot;100&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;description&quot; label=&quot;描述&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;no&quot; label=&quot;序号&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-table-column prop=&quot;category.name&quot; label=&quot;父目录&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 start --&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; width=&quot;300&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot; @click=&quot;toUpdate(scope.row)&quot;</span><br><span class="line">            &gt;编辑&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;!-- &lt;el-button size=&quot;mini&quot; type=&quot;danger&quot;&gt;更新序号&lt;/el-button&gt; --&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 end --&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;!-- 表格数据 end--&gt;</span><br><span class="line">    &lt;!-- 分页 start --&gt;</span><br><span class="line">    &lt;el-pagination</span><br><span class="line">      @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">      @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">      :current-page.sync=&quot;paramsPage.pageNumber&quot;</span><br><span class="line">      :page-sizes=&quot;[5, 10, 15, 25]&quot;</span><br><span class="line">      :page-size=&quot;paramsPage.pageSize&quot;</span><br><span class="line">      layout=&quot;sizes, prev, pager, next&quot;</span><br><span class="line">      :total=&quot;dataPage.total&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/el-pagination&gt;</span><br><span class="line">    &lt;!-- 分页 end --&gt;</span><br><span class="line">    &lt;!-- 添加对话框 start--&gt;</span><br><span class="line">    &lt;el-dialog title=&quot;添加分类&quot; :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">      &lt;el-form :model=&quot;category&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;分类名称&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;category.name&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;分类描述&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;category.description&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">         &lt;el-form-item label=&quot;父目录&quot;&gt;</span><br><span class="line">          &lt;el-select</span><br><span class="line">            style=&quot;width: 100%&quot;</span><br><span class="line">            v-model=&quot;category.parentId&quot;</span><br><span class="line">            clearable</span><br><span class="line">            placeholder=&quot;请选择&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in parentCategory&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">              :label=&quot;item.name&quot;</span><br><span class="line">              :value=&quot;item.id&quot;</span><br><span class="line">            &gt;&lt;/el-option&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">    &lt;!-- 添加对话框 end --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 修改抽屉 start --&gt;</span><br><span class="line">    &lt;!-- 复制对话框用户表单数据即可 --&gt;</span><br><span class="line">    &lt;el-drawer title=&quot;修改用户&quot; :visible.sync=&quot;drawer&quot; :direction=&quot;direction&quot;&gt;</span><br><span class="line">      &lt;el-form :model=&quot;category&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;名称&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;category.name&quot; autocomplete=&quot;off&quot; readonly&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;描述&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;category.description&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">         &lt;el-form-item label=&quot;分类序号&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;category.no&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;父目录&quot;&gt;</span><br><span class="line">          &lt;el-select</span><br><span class="line">            style=&quot;width: 100%&quot;</span><br><span class="line">            v-model=&quot;category.parentId&quot;</span><br><span class="line">            clearable</span><br><span class="line">            placeholder=&quot;请选择&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in parentCategory&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">              :label=&quot;item.name&quot;</span><br><span class="line">              :value=&quot;item.id&quot;</span><br><span class="line">            &gt;&lt;/el-option&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">        &lt;el-button @click=&quot;drawer = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;update&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-drawer&gt;</span><br><span class="line">    &lt;!-- 修改抽屉 end --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import categoryApi from &#x27;@/api/category&#x27;</span><br><span class="line">import category from &#x27;@/api/category&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      paramsPage: &#123;</span><br><span class="line">        // 分页传参数据</span><br><span class="line">        // 查询传参page对象</span><br><span class="line">        pageNumber: 1,</span><br><span class="line">        pageSize: 5,</span><br><span class="line">        params: &#123;&#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      dataPage: &#123;&#125;,</span><br><span class="line">      dialogFormVisible: false,</span><br><span class="line">      category: &#123;&#125;,</span><br><span class="line">      drawer: false,  // 抽屉</span><br><span class="line">      direction: &quot;rtl&quot;,// 抽屉打开方向</span><br><span class="line">      ids: [],  // 批量删除id数组</span><br><span class="line">      parentCategory: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    findAll() &#123;</span><br><span class="line">        categoryApi.findAll(this.paramsPage)</span><br><span class="line">          .then(res =&gt; &#123;</span><br><span class="line">            this.dataPage = res.data;</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSelectionChange(val)&#123;</span><br><span class="line">        this.ids = val.map(item =&gt; item.id);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSizeChange(val)&#123;</span><br><span class="line">        this.paramsPage.pageSize = val;</span><br><span class="line">        this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCurrentChange(val)&#123;</span><br><span class="line">        this.paramsPage.pageNumber = val;</span><br><span class="line">        this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    toSave() &#123;</span><br><span class="line">      this.findParentCategory();</span><br><span class="line">      this.dialogFormVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    findParentCategory()&#123;</span><br><span class="line">      categoryApi.findParentCategory()</span><br><span class="line">        .then(res=&gt;&#123;</span><br><span class="line">          this.parentCategory = res.data;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    save() &#123;</span><br><span class="line">      categoryApi.save(this.category)</span><br><span class="line">        .then(res=&gt;&#123;</span><br><span class="line">          this.$message.success(res.msg);</span><br><span class="line">          this.findAll();</span><br><span class="line">          this.dialogFormVisible = false;</span><br><span class="line">          this.category=&#123;&#125;;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    toUpdate(row)&#123;</span><br><span class="line">      categoryApi.findParentCategory()</span><br><span class="line">      this.category = row;</span><br><span class="line">      this.drawer = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    update() &#123;</span><br><span class="line">      category.update(this.category)</span><br><span class="line">        .then(res=&gt;&#123;</span><br><span class="line">          this.$message.success(res.msg);</span><br><span class="line">          this.drawer = false;</span><br><span class="line">          this.findAll();</span><br><span class="line">          this.category = &#123;&#125;;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    updateNo() &#123;</span><br><span class="line">      categoryApi.updateNo(id,no)</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteBatch() &#123;</span><br><span class="line">      categoryApi.deleteBatch(this.ids)</span><br><span class="line">        .then(res=&gt;&#123;</span><br><span class="line">          this.$message.success(res.msg);</span><br><span class="line">          this.findAll();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.findParentCategory(); // 必须加 否则更新无法使用父目录</span><br><span class="line">    this.findAll();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="image/image-20211219183505648.png" alt="image-20211219183505648"></p>
<h2 id="文章模块-1"><a href="#文章模块-1" class="headerlink" title="文章模块"></a>文章模块</h2><blockquote>
<p>对于管理系统来说 文章只有查询 审核 删除 (新增 修改是门户网站的功能)</p>
</blockquote>
<h3 id="api-2"><a href="#api-2" class="headerlink" title="api"></a>api</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> group_name = <span class="string">&#x27;/article&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// 分页查询文章 也可查询某分类下的文章</span></span><br><span class="line">    <span class="function"><span class="title">findAll</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/findAll`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">deleteById</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/delete/<span class="subst">$&#123;data&#125;</span>`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">deleteBatch</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/deleteBatch`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">updateStatus</span>(<span class="params">id,status</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/updateStatus/<span class="subst">$&#123;id&#125;</span>/<span class="subst">$&#123;status&#125;</span>`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="router-2"><a href="#router-2" class="headerlink" title="router"></a>router</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/article&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;文章管理&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: Layout,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/article/list&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;文章管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;文章列表&#x27;</span>,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/cms/article/list&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;文章列表&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>



<h3 id="list-vue-1"><a href="#list-vue-1" class="headerlink" title="list.vue"></a>list.vue</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button size=&quot;mini&quot; type=&quot;danger&quot; @click=&quot;deleteBatch&quot;</span><br><span class="line">      &gt;批量删除&lt;/el-button</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;!-- 表格数据 start --&gt;</span><br><span class="line">    &lt;!-- @selection-change绑定多选事件 --&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      :data=&quot;dataPage.list&quot;</span><br><span class="line">      stripe</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      @selection-change=&quot;handleSelectionChange&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 批量选择框 --&gt;</span><br><span class="line">      &lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;id&quot; label=&quot;编号&quot; width=&quot;50&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;title&quot; label=&quot;标题&quot; width=&quot;100&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;readTimes&quot; label=&quot;阅读量&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;thumbUp&quot; label=&quot;赞数&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;thumbDown&quot; label=&quot;踩数&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;publishTime&quot; label=&quot;发布时间&quot; width=&quot;150&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;status&quot; label=&quot;状态&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;span v-if=&quot;scope.row.status == 0&quot;&gt;未审核&lt;/span&gt;</span><br><span class="line">          &lt;span v-if=&quot;scope.row.status == 1&quot;&gt;通过&lt;/span&gt;</span><br><span class="line">          &lt;span v-if=&quot;scope.row.status == 2&quot;&gt;驳回&lt;/span&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;category.name&quot; label=&quot;分类&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;user.username&quot; label=&quot;作者&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 start --&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; width=&quot;300&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;danger&quot; @click=&quot;deleteById(scope.row.id)&quot;</span><br><span class="line">            &gt;删除&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            size=&quot;mini&quot;</span><br><span class="line">            type=&quot;primary&quot;</span><br><span class="line">            @click=&quot;toUpdateStatus(scope.row)&quot;</span><br><span class="line">            &gt;审核&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 end --&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;!-- 表格数据 end--&gt;</span><br><span class="line">    &lt;!-- 分页 start --&gt;</span><br><span class="line">    &lt;el-pagination</span><br><span class="line">      @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">      @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">      :current-page.sync=&quot;paramsPage.pageNumber&quot;</span><br><span class="line">      :page-sizes=&quot;[5, 10, 15, 25]&quot;</span><br><span class="line">      :page-size=&quot;paramsPage.pageSize&quot;</span><br><span class="line">      layout=&quot;sizes, prev, pager, next&quot;</span><br><span class="line">      :total=&quot;dataPage.total&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/el-pagination&gt;</span><br><span class="line">    &lt;!-- 分页 end --&gt;</span><br><span class="line">    &lt;!-- 添加对话框 start--&gt;</span><br><span class="line">    &lt;el-dialog title=&quot;审核&quot; :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">      &lt;el-form :model=&quot;article&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;内容&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            type=&quot;textarea&quot;</span><br><span class="line">            :rows=&quot;20&quot;</span><br><span class="line">            v-model=&quot;article.content&quot;</span><br><span class="line">            autocomplete=&quot;off&quot;</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;pass(article.id,1)&quot;&gt;通过&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;warning&quot; @click=&quot;nopass(article.id,2)&quot;&gt;驳回&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">    &lt;!-- 添加对话框 end --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import articleApi from &quot;@/api/article&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      paramsPage: &#123;</span><br><span class="line">        pageNumber: 1,</span><br><span class="line">        pageSize: 5,</span><br><span class="line">        params: &#123;&#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      dataPage: &#123;&#125;,</span><br><span class="line">      ids: [],</span><br><span class="line">      dialogFormVisible: false,</span><br><span class="line">      article: &#123;&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    findAll() &#123;</span><br><span class="line">      articleApi.findAll(this.paramsPage).then((res) =&gt; &#123;</span><br><span class="line">        this.dataPage = res.data;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSizeChange(val) &#123;</span><br><span class="line">      this.paramsPage.pageSize = val;</span><br><span class="line">      this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      this.paramsPage.pageNumber = val;</span><br><span class="line">      this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    toUpdateStatus(row) &#123;</span><br><span class="line">      this.dialogFormVisible = true;</span><br><span class="line">      this.article = row;</span><br><span class="line">    &#125;,</span><br><span class="line">    pass(id,status) &#123;</span><br><span class="line">      articleApi.updateStatus(id,status)</span><br><span class="line">        .then(res=&gt;&#123;</span><br><span class="line">            this.$message.success(res.msg);</span><br><span class="line">            this.findAll();</span><br><span class="line">        &#125;)</span><br><span class="line">      this.dialogFormVisible = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    nopass(id,status) &#123;</span><br><span class="line">       articleApi.updateStatus(id,status)</span><br><span class="line">        .then(res=&gt;&#123;</span><br><span class="line">            this.$message.success(res.msg);</span><br><span class="line">            this.findAll();</span><br><span class="line">        &#125;)</span><br><span class="line">      this.dialogFormVisible = false;</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteById(id) &#123;</span><br><span class="line">      articleApi.deleteById(id).then((res) =&gt; &#123;</span><br><span class="line">        this.$message.success(res.msg);</span><br><span class="line">        this.findAll();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSelectionChange(val) &#123;</span><br><span class="line">      this.ids = val.map((item) =&gt; item.id);</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteBatch() &#123;</span><br><span class="line">      articleApi.deleteBatch(this.ids).then((res) =&gt; &#123;</span><br><span class="line">        this.$message.success(res.msg);</span><br><span class="line">        this.findAll();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.findAll();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img src="image/image-20211219233636832.png" alt="image-20211219233636832"></p>
<p><img src="image/image-20211219233646916.png" alt="image-20211219233646916"></p>
<h2 id="评论模块"><a href="#评论模块" class="headerlink" title="评论模块"></a>评论模块</h2><blockquote>
<p>添加评论是门户网站的功能</p>
</blockquote>
<h3 id="api-3"><a href="#api-3" class="headerlink" title="api"></a>api</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> group_name = <span class="string">&#x27;/comment&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">findAll</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/findAll`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">deleteBatch</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">`<span class="subst">$&#123;group_name&#125;</span>/deleteBatch`</span>,</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">            data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="router-3"><a href="#router-3" class="headerlink" title="router"></a>router</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">path</span>: <span class="string">&#x27;/comment&#x27;</span>,</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;评论管理&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>: Layout,</span><br><span class="line">   <span class="attr">redirect</span>: <span class="string">&#x27;/comment/list&#x27;</span>,</span><br><span class="line">   <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;评论管理&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;,</span><br><span class="line">   <span class="attr">children</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&#x27;评论列表&#x27;</span>,</span><br><span class="line">       <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/cms/comment/list&#x27;</span>),</span><br><span class="line">       <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;评论列表&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;table&#x27;</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   ]</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;deleteBatch&quot;</span>&gt;</span>批量删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 表格数据 start --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- @selection-change绑定多选事件 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-table</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:data</span>=<span class="string">&quot;dataPage.list&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">stripe</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">selection-change</span>=<span class="string">&quot;handleSelectionChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!-- 批量选择框 --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;selection&quot;</span> <span class="attr">width</span>=<span class="string">&quot;55&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;编号&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;content&quot;</span> <span class="attr">label</span>=<span class="string">&quot;内容&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;time&quot;</span> <span class="attr">label</span>=<span class="string">&quot;发布时间&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;comment.content&quot;</span> <span class="attr">label</span>=<span class="string">&quot;父评论&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;article.title&quot;</span> <span class="attr">label</span>=<span class="string">&quot;文章&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;user.username&quot;</span> <span class="attr">label</span>=<span class="string">&quot;作者&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 表格数据 end--&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="comment">&lt;!-- 分页 start --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:current-page.sync</span>=<span class="string">&quot;paramsPage.pageNumber&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:page-sizes</span>=<span class="string">&quot;[5, 10, 15, 25]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:page-size</span>=<span class="string">&quot;paramsPage.pageSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">layout</span>=<span class="string">&quot;sizes, prev, pager, next&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">:total</span>=<span class="string">&quot;dataPage.total&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 分页 end --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> commentApi <span class="keyword">from</span> <span class="string">&#x27;@/api/comment&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">paramsPage</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 分页传参数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// 查询传参page对象</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">pageNumber</span>: <span class="number">1</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">pageSize</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">params</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">dataPage</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">ids</span>: [], <span class="comment">// 批量删除id数组</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">findAll</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        commentApi.findAll(<span class="built_in">this</span>.paramsPage)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.dataPage = res.data;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">     <span class="function"><span class="title">handleSizeChange</span>(<span class="params">val</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.paramsPage.pageSize = val;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.findAll();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">handleCurrentChange</span>(<span class="params">val</span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.paramsPage.pageNumber = val;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.findAll();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">handleSelectionChange</span>(<span class="params">val</span>)</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.ids = val.map(<span class="function"><span class="params">item</span>=&gt;</span>item.id);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">deleteBatch</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        commentApi.deleteBatch(<span class="built_in">this</span>.ids)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">             .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.$message.success(res.msg);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                <span class="built_in">this</span>.findAll();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.findAll();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>





<h1 id="头像上传"><a href="#头像上传" class="headerlink" title="头像上传"></a>头像上传</h1><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p><strong>QiniuUtil</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.cms.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.common.QiniuException;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.common.Zone;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.BucketManager;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.UploadManager;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.model.DefaultPutRet;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.util.Auth;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> okhttp3.OkHttpClient;</span><br><span class="line"><span class="keyword">import</span> okhttp3.Request;</span><br><span class="line"><span class="keyword">import</span> okhttp3.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 七牛云工具类</span></span><br><span class="line"><span class="comment"> * http://r3tsx6mgn.hn-bkt.clouddn.com/ 域名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKey = <span class="string">&quot;M1J6WgMIOisq7Bg8vyCii3SKe9GMGNOgtmUhVWWT&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String secretKey = <span class="string">&quot;gOCD2k-nsqnTqU3u-s-WmTd8YXXZGvRlnpaVt_iC&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String bucket = <span class="string">&quot;cms-briup1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">&quot;http://r4el9vwrh.hd-bkt.clouddn.com/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String upToken;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UploadManager uploadManager;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BucketManager bucketManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 构造一个带指定Zone对象的配置类  东区</span></span><br><span class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Zone.zone0());</span><br><span class="line">        <span class="comment">// 获取上传管理器</span></span><br><span class="line">        uploadManager = <span class="keyword">new</span> UploadManager(cfg);</span><br><span class="line">        <span class="comment">// 默认不指定key的情况下，以文件内容的hash值作为文件名</span></span><br><span class="line">        Auth auth = Auth.create(accessKey, secretKey);</span><br><span class="line">        <span class="comment">// 获取空间（bucket）管理器</span></span><br><span class="line">        bucketManager = <span class="keyword">new</span> BucketManager(auth, cfg);</span><br><span class="line">        <span class="comment">// 获取上传token</span></span><br><span class="line">        upToken = auth.uploadToken(bucket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Description 上传文件到七牛云</span></span><br><span class="line"><span class="comment">     * @Date 2021/6/1 9:21</span></span><br><span class="line"><span class="comment">     * @Param [filePath: 需要上传文件的位置, fileName: 指定存在七牛云的标识,不传有默认值]</span></span><br><span class="line"><span class="comment">     * @return void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">upload2Qiniu</span><span class="params">(String filePath, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Response response = uploadManager.put(filePath, fileName, upToken);</span><br><span class="line">            <span class="comment">//解析上传成功的结果</span></span><br><span class="line">            DefaultPutRet putRet = <span class="keyword">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;上传七牛云图片失败 &#123;&#125;&quot;</span>,ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Description 上传文件到七牛云</span></span><br><span class="line"><span class="comment">     * @Date 2021/6/1 9:21</span></span><br><span class="line"><span class="comment">     * @Param [filePath: 需要上传文件的字节数组: 指定存在七牛云的标识,不传有默认值]</span></span><br><span class="line"><span class="comment">     * @return String  返回七牛云的标识  后续通过拼接域名+标识即可访问到图片</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upload2Qiniu</span><span class="params">(<span class="keyword">byte</span>[] bytes, String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Response response = uploadManager.put(bytes, fileName, upToken);</span><br><span class="line">            <span class="comment">//解析上传成功的结果</span></span><br><span class="line">            DefaultPutRet putRet = <span class="keyword">new</span> Gson().fromJson(response.bodyString(), DefaultPutRet.class);</span><br><span class="line">            <span class="keyword">return</span> putRet.key;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;上传七牛云图片失败 &#123;&#125;&quot;</span>,ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载方法: 上传到七牛云 不传唯一标识</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">upload2Qiniu</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> upload2Qiniu(bytes,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @Description `删除七牛云的文件</span></span><br><span class="line"><span class="comment">     * @Date 2021/6/1 9:22</span></span><br><span class="line"><span class="comment">     * @Param [fileName] 七牛云的唯一标识</span></span><br><span class="line"><span class="comment">     * @return void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteFileFromQiniu</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bucketManager.delete(bucket, fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</span><br><span class="line">            <span class="comment">//如果遇到异常，说明删除失败</span></span><br><span class="line">            log.error(<span class="string">&quot;删除七牛云图片失败 &#123;&#125; &#123;&#125;&quot;</span>,ex.code(),ex.response.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteFileFromQiniu</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.forEach(QiniuUtil::deleteFileFromQiniu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * @Description 通过http get下载图片资源</span></span><br><span class="line"><span class="comment">    * @Date 2021/6/1 9:24</span></span><br><span class="line"><span class="comment">    * @Param [url: 七牛云地址, filepath: 下载位置, picKey: 将来拼接filepath+picKye拼接本地下载路径]</span></span><br><span class="line"><span class="comment">    * @return void</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String filepath, String picKey)</span> </span>&#123;</span><br><span class="line">        String url = BASE_URL + picKey;</span><br><span class="line">        OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">        Request req = <span class="keyword">new</span> Request.Builder().url(url).build();</span><br><span class="line">        okhttp3.Response resp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resp = client.newCall(req).execute();</span><br><span class="line">            <span class="keyword">if</span> (resp.isSuccessful()) &#123;</span><br><span class="line">                ResponseBody body = resp.body();</span><br><span class="line">                InputStream is = body.byteStream();</span><br><span class="line">                <span class="keyword">byte</span>[] data = readInputStream(is);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断文件夹是否存在，不存在则创建</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(filepath);</span><br><span class="line">                <span class="keyword">if</span> (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</span><br><span class="line">                    file.mkdirs();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(!filepath.endsWith(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                    filepath = filepath+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                File imgFile = <span class="keyword">new</span> File(filepath + picKey + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">                FileOutputStream fops = <span class="keyword">new</span> FileOutputStream(imgFile);</span><br><span class="line">                fops.write(data);</span><br><span class="line">                fops.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;下载七牛云图片失败&#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取字节输入流内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] readInputStream(InputStream is) &#123;</span><br><span class="line">        ByteArrayOutputStream writer = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                writer.write(buff, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> writer.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//FileInputStream file = new FileInputStream();</span></span><br><span class="line">        upload2Qiniu(<span class="string">&quot;C:\\Users\\vanse\\Pictures\\bg.jpg&quot;</span>,<span class="string">&quot;bg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;文件上传&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/image&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">uploadImage</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       String image = QiniuUtil.upload2Qiniu(file.getBytes(), file.getOriginalFilename());</span><br><span class="line">        <span class="keyword">return</span> Result.success( QiniuUtil.BASE_URL+image);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>user.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;toSave&quot;&gt;添加&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;danger&quot; @click=&quot;deleteBatch&quot;&gt;批量删除&lt;/el-button&gt;</span><br><span class="line">    &lt;!-- 表格数据 start --&gt;</span><br><span class="line">    &lt;!-- @selection-change绑定多选事件 --&gt;</span><br><span class="line">    &lt;el-table</span><br><span class="line">      :data=&quot;dataPage.list&quot;</span><br><span class="line">      stripe</span><br><span class="line">      style=&quot;width: 100%&quot;</span><br><span class="line">      @selection-change=&quot;handleSelectionChange&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 批量选择框 --&gt;</span><br><span class="line">      &lt;el-table-column type=&quot;selection&quot; width=&quot;55&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;id&quot; label=&quot;编号&quot; width=&quot;50&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;username&quot; label=&quot;姓名&quot; width=&quot;100&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;phone&quot; label=&quot;手机&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;realName&quot; label=&quot;昵称&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;gender&quot; label=&quot;性别&quot; width=&quot;50&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &#123;&#123; scope.row.gender === 0 ? &quot;男&quot; : &quot;女&quot; &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- &lt;el-table-column prop=&quot;birthday&quot; label=&quot;生日&quot; width=&quot;150&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;registerTime&quot; label=&quot;注册时间&quot; width=&quot;150&quot;&gt;</span><br><span class="line">      &lt;/el-table-column&gt; --&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;status&quot; label=&quot;状态&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &#123;&#123; scope.row.status === 0 ? &quot;正常&quot; : &quot;禁用&quot; &#125;&#125;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;image&quot; label=&quot;头像&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;scope.row.image&quot; alt=&quot;&quot; width=&quot;40px&quot; height=&quot;40px&quot; /&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;el-table-column prop=&quot;role.name&quot; label=&quot;角色&quot;&gt; &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 start --&gt;</span><br><span class="line">      &lt;el-table-column label=&quot;操作&quot; width=&quot;300&quot;&gt;</span><br><span class="line">        &lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;primary&quot; @click=&quot;toUpdate(scope.row)&quot;</span><br><span class="line">            &gt;编辑&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;el-button size=&quot;mini&quot; type=&quot;danger&quot; @click=&quot;deleteById(scope.row.id)&quot;</span><br><span class="line">            &gt;删除&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            v-if=&quot;scope.row.status == &#x27;0&#x27;&quot;</span><br><span class="line">            size=&quot;mini&quot;</span><br><span class="line">            type=&quot;danger&quot;</span><br><span class="line">            plain</span><br><span class="line">            @click=&quot;updateStatus(scope.row.id, 1)&quot;</span><br><span class="line">            &gt;禁用&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;el-button</span><br><span class="line">            v-if=&quot;scope.row.status == &#x27;1&#x27;&quot;</span><br><span class="line">            size=&quot;mini&quot;</span><br><span class="line">            type=&quot;primary&quot;</span><br><span class="line">            plain</span><br><span class="line">            @click=&quot;updateStatus(scope.row.id, 0)&quot;</span><br><span class="line">            &gt;启用&lt;/el-button</span><br><span class="line">          &gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-table-column&gt;</span><br><span class="line">      &lt;!-- 用户操作按钮 end --&gt;</span><br><span class="line">    &lt;/el-table&gt;</span><br><span class="line">    &lt;!-- 表格数据 end--&gt;</span><br><span class="line">    &lt;!-- 分页 start --&gt;</span><br><span class="line">    &lt;el-pagination</span><br><span class="line">      @size-change=&quot;handleSizeChange&quot;</span><br><span class="line">      @current-change=&quot;handleCurrentChange&quot;</span><br><span class="line">      :current-page.sync=&quot;paramsPage.pageNumber&quot;</span><br><span class="line">      :page-sizes=&quot;[5, 10, 15, 25]&quot;</span><br><span class="line">      :page-size=&quot;paramsPage.pageSize&quot;</span><br><span class="line">      layout=&quot;sizes, prev, pager, next&quot;</span><br><span class="line">      :total=&quot;dataPage.total&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;/el-pagination&gt;</span><br><span class="line">    &lt;!-- 分页 end --&gt;</span><br><span class="line">    &lt;!-- 添加对话框 start--&gt;</span><br><span class="line">    &lt;el-dialog title=&quot;添加用户&quot; :visible.sync=&quot;dialogFormVisible&quot;&gt;</span><br><span class="line">      &lt;el-form :model=&quot;user&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;昵称&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.username&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;真实姓名&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.realName&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户密码&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;user.password&quot;</span><br><span class="line">            autocomplete=&quot;off&quot;</span><br><span class="line">            show-password</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;电话&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.phone&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;生日&quot;&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model=&quot;user.birthday&quot;</span><br><span class="line">            type=&quot;datetime&quot;</span><br><span class="line">            placeholder=&quot;选择日期时间&quot;</span><br><span class="line">            value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;/el-date-picker&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户性别&quot;&gt;</span><br><span class="line">          &lt;el-radio v-model=&quot;user.gender&quot; :label=&quot;0&quot;&gt;男&lt;/el-radio&gt;</span><br><span class="line">          &lt;el-radio v-model=&quot;user.gender&quot; :label=&quot;1&quot;&gt;女&lt;/el-radio&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;角色&quot;&gt;</span><br><span class="line">          &lt;el-select</span><br><span class="line">            style=&quot;width: 100%&quot;</span><br><span class="line">            v-model=&quot;user.roleId&quot;</span><br><span class="line">            clearable</span><br><span class="line">            placeholder=&quot;请选择&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in roleList&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">              :label=&quot;item.name&quot;</span><br><span class="line">              :value=&quot;item.id&quot;</span><br><span class="line">            &gt;&lt;/el-option&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;头像&quot;&gt;</span><br><span class="line">          &lt;!-- &lt;el-input type=&quot;file&quot; v-model=&quot;user.image&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt; --&gt;</span><br><span class="line">          &lt;el-upload</span><br><span class="line">            class=&quot;avatar-uploader&quot;</span><br><span class="line">            action=&quot;http://localhost:8989/upload/image&quot;</span><br><span class="line">            :show-file-list=&quot;false&quot;</span><br><span class="line">            :on-success=&quot;handleAvatarSuccess&quot;</span><br><span class="line">            :before-upload=&quot;beforeAvatarUpload&quot;&gt;</span><br><span class="line">            &lt;img v-if=&quot;user.image&quot; :src=&quot;user.image&quot; class=&quot;avatar&quot; width=&quot;40px&quot; height=&quot;40px&quot; /&gt;</span><br><span class="line">            &lt;i v-else class=&quot;el-icon-plus avatar-uploader-icon&quot;&gt;&lt;/i&gt;</span><br><span class="line">          &lt;/el-upload&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;saveUser&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">    &lt;!-- 添加对话框 end --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 修改抽屉 start --&gt;</span><br><span class="line">    &lt;el-drawer title=&quot;修改用户&quot; :visible.sync=&quot;drawer&quot; :direction=&quot;direction&quot;&gt;</span><br><span class="line">      &lt;!-- 复制对话框用户表单数据即可 --&gt;</span><br><span class="line">      &lt;el-form :model=&quot;user&quot; label-width=&quot;100px&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;昵称&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;user.username&quot;</span><br><span class="line">            autocomplete=&quot;off&quot;</span><br><span class="line">            readonly</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;真实姓名&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.realName&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户密码&quot;&gt;</span><br><span class="line">          &lt;el-input</span><br><span class="line">            v-model=&quot;user.password&quot;</span><br><span class="line">            autocomplete=&quot;off&quot;</span><br><span class="line">            show-password</span><br><span class="line">          &gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;电话&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;user.phone&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;生日&quot;&gt;</span><br><span class="line">          &lt;el-date-picker</span><br><span class="line">            v-model=&quot;user.birthday&quot;</span><br><span class="line">            type=&quot;datetime&quot;</span><br><span class="line">            placeholder=&quot;选择日期时间&quot;</span><br><span class="line">            value-format=&quot;yyyy-MM-dd HH:mm:ss&quot;</span><br><span class="line">          &gt;</span><br><span class="line">          &lt;/el-date-picker&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户性别&quot;&gt;</span><br><span class="line">          &lt;el-radio v-model=&quot;user.gender&quot; :label=&quot;0&quot;&gt;男&lt;/el-radio&gt;</span><br><span class="line">          &lt;el-radio v-model=&quot;user.gender&quot; :label=&quot;1&quot;&gt;女&lt;/el-radio&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;角色&quot;&gt;</span><br><span class="line">          &lt;el-select</span><br><span class="line">            style=&quot;width: 100%&quot;</span><br><span class="line">            v-model=&quot;user.roleId&quot;</span><br><span class="line">            clearable</span><br><span class="line">            placeholder=&quot;请选择&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;el-option</span><br><span class="line">              v-for=&quot;item in roleList&quot;</span><br><span class="line">              :key=&quot;item.id&quot;</span><br><span class="line">              :label=&quot;item.name&quot;</span><br><span class="line">              :value=&quot;item.id&quot;</span><br><span class="line">            &gt;&lt;/el-option&gt;</span><br><span class="line">          &lt;/el-select&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;el-button @click=&quot;drawer = false&quot;&gt;取 消&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button type=&quot;primary&quot; @click=&quot;updateUser&quot;&gt;确 定&lt;/el-button&gt;</span><br><span class="line">    &lt;/el-drawer&gt;</span><br><span class="line">    &lt;!-- 修改抽屉 end --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 注意 user.js导出的都是单个函数</span><br><span class="line">// import &#123; save, update, deleteById, query, updateStatus &#125; from &quot;@/api/user&quot;;</span><br><span class="line">import &#123;</span><br><span class="line">  findByPage,</span><br><span class="line">  insert,</span><br><span class="line">  update,</span><br><span class="line">  deleteById,</span><br><span class="line">  deleteBatch,</span><br><span class="line">  updateStatus,</span><br><span class="line">&#125; from &quot;@/api/user.js&quot;;</span><br><span class="line">import roleApi from &quot;@/api/role.js&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      userList: [], // 用户表格数据</span><br><span class="line">      paramsPage: &#123;</span><br><span class="line">        // 分页传参数据</span><br><span class="line">        // 查询传参page对象</span><br><span class="line">        pageNumber: 1,</span><br><span class="line">        pageSize: 5,</span><br><span class="line">        params: &#123;&#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      dataPage: &#123;&#125;, // 分页返回的数据</span><br><span class="line">      dialogFormVisible: false, // 开启dialog</span><br><span class="line">      user: &#123;&#125;, // 添加或更新提交的表单项</span><br><span class="line">      roleList: &#123;&#125;, // 角色下拉列表选择框</span><br><span class="line">      drawer: false, // 是否开启抽屉</span><br><span class="line">      direction: &quot;rtl&quot;, // 抽屉打开方向</span><br><span class="line">      ids: [], // 批量删除id数组</span><br><span class="line">    </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  // watch必须放在data后面</span><br><span class="line">  // watch: &#123;</span><br><span class="line">  //   &quot;$store.getters.roleList&quot;: function (newVal, oldVal) &#123;</span><br><span class="line">  //     console.log(&#x27;new Val&#x27;);</span><br><span class="line">  //     console.log(newVal);</span><br><span class="line">  //     this.roleList = newVal;</span><br><span class="line">  //   &#125;,</span><br><span class="line">  // &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    findRole() &#123;</span><br><span class="line">      roleApi</span><br><span class="line">        .findAll()</span><br><span class="line">        .then((resp) =&gt; &#123;</span><br><span class="line">          //this.$store.commit(&#x27;setRoleList&#x27;,resp.data);</span><br><span class="line">          this.roleList = resp.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    findAll() &#123;</span><br><span class="line">      findByPage(this.paramsPage)</span><br><span class="line">        .then((res) =&gt; &#123;</span><br><span class="line">          this.dataPage = res.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleSizeChange(val) &#123;</span><br><span class="line">      this.paramsPage.pageSize = val;</span><br><span class="line">      this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    handleCurrentChange(val) &#123;</span><br><span class="line">      this.paramsPage.pageNumber = val;</span><br><span class="line">      this.findAll();</span><br><span class="line">    &#125;,</span><br><span class="line">    toSave() &#123;</span><br><span class="line">      this.dialogFormVisible = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    saveUser() &#123;</span><br><span class="line">      insert(this.user)</span><br><span class="line">        .then((res) =&gt; &#123;</span><br><span class="line">          this.$message.success(res.msg);</span><br><span class="line">          this.dialogFormVisible = false;</span><br><span class="line">          // 清空值</span><br><span class="line">          this.user = &#123;&#125;;</span><br><span class="line">          this.findAll();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    toUpdate(row) &#123;</span><br><span class="line">      this.user = row; // 回显数据</span><br><span class="line">      this.drawer = true;</span><br><span class="line">    &#125;,</span><br><span class="line">    updateUser() &#123;</span><br><span class="line">      update(this.user).then((res) =&gt; &#123;</span><br><span class="line">        this.$message.success(res.msg);</span><br><span class="line">        this.drawer = false;</span><br><span class="line">        this.user = &#123;&#125;;</span><br><span class="line">        this.findAll();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteById(id) &#123;</span><br><span class="line">      this.$confirm(&quot;此操作将永久删除该文件, 是否继续?&quot;, &quot;提示&quot;, &#123;</span><br><span class="line">        confirmButtonText: &quot;确定&quot;,</span><br><span class="line">        cancelButtonText: &quot;取消&quot;,</span><br><span class="line">        type: &quot;warning&quot;,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(() =&gt; &#123;</span><br><span class="line">          // 删除</span><br><span class="line">          deleteById(id).then((res) =&gt; &#123;</span><br><span class="line">            this.$message.success(&quot;删除成功&quot;);</span><br><span class="line">            this.findAll();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(() =&gt; &#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type: &quot;info&quot;,</span><br><span class="line">            message: &quot;已取消删除&quot;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 批量操作的值</span><br><span class="line">    handleSelectionChange(val) &#123;</span><br><span class="line">      // 默认val是批量的值的集合  此处只需要批量id 需要映射处理</span><br><span class="line">      this.ids = val.map((item) =&gt; item.id);</span><br><span class="line">      console.log(this.ids);</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteBatch() &#123;</span><br><span class="line">      this.$confirm(&quot;此操作将永久删除该文件, 是否继续?&quot;, &quot;提示&quot;, &#123;</span><br><span class="line">        confirmButtonText: &quot;确定&quot;,</span><br><span class="line">        cancelButtonText: &quot;取消&quot;,</span><br><span class="line">        type: &quot;warning&quot;,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(() =&gt; &#123;</span><br><span class="line">          // 批量删除</span><br><span class="line">          deleteBatch(this.ids).then((res) =&gt; &#123;</span><br><span class="line">            this.$message.success(&quot;删除成功&quot;);</span><br><span class="line">            this.findAll();</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(() =&gt; &#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type: &quot;info&quot;,</span><br><span class="line">            message: &quot;已取消删除&quot;,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改用户状态</span><br><span class="line">    updateStatus(id, status) &#123;</span><br><span class="line">      updateStatus(id, status)</span><br><span class="line">        .then((res) =&gt; &#123;</span><br><span class="line">          this.$message.success(res.msg);</span><br><span class="line">          this.findAll();</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.log(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    // 文件上传</span><br><span class="line">    handleAvatarSuccess(res, file) &#123;</span><br><span class="line">     // this.user.image = URL.createObjectURL(file.raw);</span><br><span class="line">     URL.createObjectURL(file.raw);</span><br><span class="line">     this.user.image = res.data;</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeAvatarUpload(file) &#123;</span><br><span class="line">      const isJPG = file.type === &quot;image/jpeg&quot;;</span><br><span class="line">      const isLt2M = file.size / 1024 / 1024 &lt; 2;</span><br><span class="line"></span><br><span class="line">      if (!isJPG) &#123;</span><br><span class="line">        this.$message.error(&quot;上传头像图片只能是 JPG 格式!&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      if (!isLt2M) &#123;</span><br><span class="line">        this.$message.error(&quot;上传头像图片大小不能超过 2MB!&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">      return isJPG &amp;&amp; isLt2M;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    this.findRole();</span><br><span class="line">    this.findAll();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="image/image-20211220163849887.png" alt="image-20211220163849887"></p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">onSubmit()&#123;</span><br><span class="line">            request.request(&#123;</span><br><span class="line">                url:<span class="string">&quot;http://localhost:8888/cms/article/save&quot;</span>,</span><br><span class="line">                method:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                headers:&#123;</span><br><span class="line">                    <span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                data:qs.stringify(<span class="keyword">this</span>.form)</span><br><span class="line">            &#125;).then(response=&gt;&#123;</span><br><span class="line">               <span class="comment">// 提示成功</span></span><br><span class="line">                <span class="keyword">this</span>.$message(&#123;</span><br><span class="line">                message: response.message,</span><br><span class="line">                type: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">//返回列表页</span></span><br><span class="line">                <span class="keyword">this</span>.back();</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">                </span><br><span class="line">    toEditArticle()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">        path:<span class="string">&#x27;/article/editor&#x27;</span>,</span><br><span class="line">        query:row</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">跳转接受参数</span><br><span class="line">  created()&#123;</span><br><span class="line">        <span class="keyword">this</span>.form=<span class="keyword">this</span>.$route.query;</span><br><span class="line">    &#125;,</span><br><span class="line">            </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>vanse_public</tag>
        <tag>out</tag>
      </tags>
  </entry>
  <entry>
    <title>briup-jsp</title>
    <url>/archives/briup/briup-jsp.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h2><blockquote>
<p>jsp全称Java Server Pages，是一种动态网页开发技术</p>
</blockquote>
<p>.html文件是静态页面<br>.jsp 文件是动态页面</p>
<p>jsp页面允许我们在html代码中嵌入java代码，这样就可以在html中使用java代码来完成的功能了。</p>
<p>所以，简单的理解：jsp就是html页面+java代码</p>
<p>例如，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;index.html&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;% String name = <span class="string">&quot;tom&quot;</span>; %&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;h1&gt;&lt;%=<span class="string">&quot;hello!&quot;</span>+name %&gt;&lt;/h1&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>





<h2 id="2-运行"><a href="#2-运行" class="headerlink" title="2 运行"></a>2 运行</h2><p>浏览器可以直接运行html页面，但是不能直接运行jsp页面。</p>
<p>jsp是需要在web容器中运行（例如tomcat中），因为web容器中有JSP的运行环境。</p>
<p>其中最核心的是有JSP的引擎（jasper.jar）,它可以将jsp页面翻译成java程序，并编译成class文件，然后在运行。</p>
<p>所以jsp是运行在服务器端的，运行完之后，把动态生成的html页面再使用io流写回给浏览器，浏览器接收并且解析后再呈现出来效果。</p>
<h2 id="3-关系"><a href="#3-关系" class="headerlink" title="3 关系"></a>3 关系</h2><p>JSP和Servlet的关系：JSP本质上也是Servlet。</p>
<p>因为JSP页面第一次被访问的时，会被tomcat服务器编译成一个java类，这个java类默认继承<code>HttpJspBase</code>类，而<code>HttpJspBase</code>类是<code>HttpServlet</code>的子类，所以JSP其实就是一个Servlet程序。</p>
<p>这也是为什么JSP程序和Servlet一样，都需要运行在Web容器中。</p>
<p>jsp页面被tomcat服务器编译成的java文件及其class文件，保存在tomcat服务器里面的work目录中，在这里的代码中，我们还可以看见它是如何使用io流把生成的html页面代码一行一行写回给浏览器的。</p>
<blockquote>
<p>注意: 项目路径不要/ 否则生成class文件位置不对</p>
</blockquote>
<p>例如，index.jsp将会翻译成下面的java代码，然后再变成class文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Generated by the Jasper component of Apache Tomcat</span></span><br><span class="line"><span class="comment"> * Version: Apache Tomcat/8.5.58</span></span><br><span class="line"><span class="comment"> * Generated at: 2020-10-07 01:50:21 UTC</span></span><br><span class="line"><span class="comment"> * Note: The last modified time of this file was set to</span></span><br><span class="line"><span class="comment"> *       the last modified time of the source file after</span></span><br><span class="line"><span class="comment"> *       generation to assist with modification tracking.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> org.apache.jsp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">index_jsp</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">HttpJspBase</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">JspSourceDependent</span>,</span></span><br><span class="line"><span class="class">                 <span class="title">org</span>.<span class="title">apache</span>.<span class="title">jasper</span>.<span class="title">runtime</span>.<span class="title">JspSourceImports</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> javax.servlet.jsp.JspFactory _jspxFactory =</span><br><span class="line">          javax.servlet.jsp.JspFactory.getDefaultFactory();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> java.util.Map&lt;java.lang.String,java.lang.Long&gt; _jspx_dependants;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.Set&lt;java.lang.String&gt; _jspx_imports_packages;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.util.Set&lt;java.lang.String&gt; _jspx_imports_classes;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    _jspx_imports_packages = <span class="keyword">new</span> java.util.HashSet&lt;&gt;();</span><br><span class="line">    _jspx_imports_packages.add(<span class="string">&quot;javax.servlet&quot;</span>);</span><br><span class="line">    _jspx_imports_packages.add(<span class="string">&quot;javax.servlet.http&quot;</span>);</span><br><span class="line">    _jspx_imports_packages.add(<span class="string">&quot;javax.servlet.jsp&quot;</span>);</span><br><span class="line">    _jspx_imports_classes = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> javax.el.ExpressionFactory _el_expressionfactory;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> org.apache.tomcat.InstanceManager _jsp_instancemanager;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.util.Map&lt;java.lang.String,java.lang.Long&gt; getDependants() &#123;</span><br><span class="line">    <span class="keyword">return</span> _jspx_dependants;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.util.Set&lt;java.lang.String&gt; getPackageImports() &#123;</span><br><span class="line">    <span class="keyword">return</span> _jspx_imports_packages;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.util.Set&lt;java.lang.String&gt; getClassImports() &#123;</span><br><span class="line">    <span class="keyword">return</span> _jspx_imports_classes;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> javax.el.<span class="function">ExpressionFactory <span class="title">_jsp_getExpressionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_el_expressionfactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_el_expressionfactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _el_expressionfactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> org.apache.tomcat.<span class="function">InstanceManager <span class="title">_jsp_getInstanceManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_jsp_instancemanager == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_jsp_instancemanager == <span class="keyword">null</span>) &#123;</span><br><span class="line">          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _jsp_instancemanager;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(<span class="keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="keyword">final</span> javax.servlet.http.HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> java.io.IOException, javax.servlet.ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> java.lang.String _jspx_method = request.getMethod();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;GET&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="string">&quot;POST&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="string">&quot;HEAD&quot;</span>.equals(_jspx_method) &amp;&amp; !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;</span><br><span class="line">      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="string">&quot;JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;</span><br><span class="line">    javax.servlet.http.HttpSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletContext application;</span><br><span class="line">    <span class="keyword">final</span> javax.servlet.ServletConfig config;</span><br><span class="line">    javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;</span><br><span class="line">    javax.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">    javax.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">      pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">      			<span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">      _jspx_page_context = pageContext;</span><br><span class="line">      application = pageContext.getServletContext();</span><br><span class="line">      config = pageContext.getServletConfig();</span><br><span class="line">      session = pageContext.getSession();</span><br><span class="line">      out = pageContext.getOut();</span><br><span class="line">      _jspx_out = out;</span><br><span class="line"></span><br><span class="line">      out.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;!DOCTYPE html&gt;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;head&gt;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;meta charset=\&quot;UTF-8\&quot;&gt;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;title&gt;index.html&lt;/title&gt;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;/head&gt;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;body&gt;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"> String name = <span class="string">&quot;tom&quot;</span>; </span><br><span class="line">      out.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;\t\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;\t&lt;h1&gt;&quot;</span>);</span><br><span class="line">      out.print(<span class="string">&quot;hello!&quot;</span>+name );</span><br><span class="line">      out.write(<span class="string">&quot;&lt;/h1&gt;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;\t\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;/body&gt;\r\n&quot;</span>);</span><br><span class="line">      out.write(<span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.lang.Throwable t) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(t <span class="keyword">instanceof</span> javax.servlet.jsp.SkipPageException))&#123;</span><br><span class="line">        out = _jspx_out;</span><br><span class="line">        <span class="keyword">if</span> (out != <span class="keyword">null</span> &amp;&amp; out.getBufferSize() != <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.isCommitted()) &#123;</span><br><span class="line">              out.flush();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              out.clearBuffer();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (_jspx_page_context != <span class="keyword">null</span>) _jspx_page_context.handlePageException(t);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _jspxFactory.releasePageContext(_jspx_page_context);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里的<code>_jspService</code>方法，就相当于servlet中的<code>service</code>方法，jsp被访问的时候会自动调用该方法</p>
</blockquote>
<h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4 代码"></a>4 代码</h2><p>jsp页面中嵌入java代码，一共有三种方式：</p>
<ul>
<li>表达式(expression)</li>
<li>脚本(scriptlet)</li>
<li>声明(declaration)</li>
</ul>
<h3 id="4-1-表达式"><a href="#4-1-表达式" class="headerlink" title="4.1 表达式"></a>4.1 表达式</h3><p>形式：</p>
<p><code>&lt;%= %&gt;</code></p>
<p>例如，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%=<span class="string">&quot;hello&quot;</span> %&gt;</span><br><span class="line">&lt;%=<span class="number">1</span>+<span class="number">1</span> %&gt;</span><br><span class="line">&lt;%=s.getName() %&gt;</span><br></pre></td></tr></table></figure>



<p>将来翻译到java文件中的位置：</p>
<p>_jspService方法中，out.print(..)代码的参数</p>
<p>例如，上面那几个例子会翻译成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.print(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">out.print(<span class="number">1</span>+<span class="number">1</span>);</span><br><span class="line">out.print(s.getName());</span><br></pre></td></tr></table></figure>

<blockquote>
<p>所以out.prntln()这个方法的参数可以写什么，那么这个jsp页面中表达式里面就可以写什么</p>
</blockquote>
<blockquote>
<p>注意，在jsp中的表达式，语句的最后不需要加;号</p>
</blockquote>
<h3 id="4-2-脚本"><a href="#4-2-脚本" class="headerlink" title="4.2 脚本"></a>4.2 脚本</h3><p>形式：</p>
<p><code>&lt;% %&gt;</code></p>
<p>例如，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"> &lt;%</span><br><span class="line">    Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">    String name = <span class="string">&quot;tom&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String username = s.getName();</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<p>将来翻译到java文件中的位置：</p>
<p>脚本中的代码将来会被直接翻译到_jspService这个方法中</p>
<blockquote>
<p>所以，在一个普通的方法中我们可以写什么样的代码，那么在脚本中就可以写什么样的代码.</p>
</blockquote>
<h3 id="4-3-声明"><a href="#4-3-声明" class="headerlink" title="4.3 声明"></a>4.3 声明</h3><p>形式：</p>
<p><code>&lt;%! %&gt;</code></p>
<p>例如，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world &quot;</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is go()&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<p>将来翻译到java文件中的位置：</p>
<p>直接将声明中的代码翻译到java文件里面所定义的类中</p>
<blockquote>
<p>所以，我们可以在一个类中写什么（属性和方法），就可以在声明中写什么</p>
</blockquote>
<h2 id="5-指令"><a href="#5-指令" class="headerlink" title="5 指令"></a>5 指令</h2><p>jsp的指令是给jsp引擎看的，让jsp引擎在翻译jsp页面成java文件的时候，知道需要注意哪些地方的设置。比如页面中的编码、页面中脚本里面所用的编程语言、翻译的java文件中需要引入哪些包下的java类等等</p>
<p>写法：</p>
<p><code>&lt;%@指令名字  属性=&quot;值&quot; ..  %&gt;</code></p>
<p>分类：</p>
<ul>
<li>page指令</li>
<li>include指令</li>
<li>taglib指令</li>
</ul>
<h3 id="5-1-page"><a href="#5-1-page" class="headerlink" title="5.1 page"></a>5.1 page</h3><p>page是常用的一个jsp指令，可以用来指定当前jsp的一些基本设置</p>
<p>例如，新建jsp页面后，文件头部会默认有以下page指令的设置</p>
<p><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;     pageEncoding=&quot;UTF-8&quot;%&gt;</code></p>
<p>其作用分别是</p>
<ul>
<li>指定当前jsp页面中嵌入的语言是java</li>
<li>指定写回给浏览器页面的时候，contentType的内容</li>
<li>指定当前页面件保存时候所用的编码</li>
</ul>
<p>例如，在jsp中引入其他的类和接口</p>
<p><code>&lt;%@ page import=&quot;java.util.List,java.util.ArrayList&quot; %&gt;</code></p>
<p>例如，指定当前jsp页面中是否支持session的使用，默认值就是true</p>
<p><code>&lt;%@ page session=&quot;true&quot; %&gt;</code></p>
<p>例如，指定当前页面出错之后，会跳转到error.jsp页面</p>
<p><code>&lt;%@ page errorPage=&quot;error.jsp&quot; %&gt;</code></p>
<p>例如，指定当前页面是专门用来显示错误的页面，在当前页面中可以使用隐藏对象exception来显示错误信息</p>
<p><code>&lt;%@ page isErrorPage=&quot;true&quot; %&gt;</code></p>
<h3 id="5-2-include"><a href="#5-2-include" class="headerlink" title="5.2 include"></a>5.2 include</h3><p>include指令，可以将另一个页面的显示内容，引入到当前页面中的指定位置</p>
<p>形式，</p>
<p><code>&lt;%@include file=&quot;&quot; %&gt;</code></p>
<p>例如，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;h1&gt;hello!jsp&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;index.html&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;h1&gt;index&lt;/h1&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;%@ include file=<span class="string">&quot;/hello.jsp&quot;</span> %&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<p>访问页面index.jsp，查看其页面源代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>index<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello!jsp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看出，在index.jsp页面中的include指令处，把hello.jsp的内容引入了过来</p>
</blockquote>
<h3 id="5-3-taglib"><a href="#5-3-taglib" class="headerlink" title="5.3 taglib"></a>5.3 taglib</h3><p>taglib指令，在jsp中可以引入标签库，然后就可以使用标签库中的标签，来完成相应的功能了</p>
<p>例如，引入JSTL标签库 (简化jsp开发)</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>



<p>例如，引入spring框架的标签库</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://www.springframework.org/tags&quot;</span> prefix=<span class="string">&quot;s&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>



<p>例如，引入struts2框架的标签</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;/struts-tags&quot;</span> prefix=<span class="string">&quot;s&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>



<p>注意1，引入标签库，需要先在项目中引入对应的jar包</p>
<p>注意2，uri属性，指的是标签库的设置的URI地址</p>
<p>注意3，prefix属性，指的是给引入的标签库起一个别名，这样使用起来较为方便</p>
<blockquote>
<p>注意，后面学习到JSTL标签库的时候，再具体来使用</p>
</blockquote>
<h2 id="6-动作"><a href="#6-动作" class="headerlink" title="6 动作"></a>6 动作</h2><p>jsp中还有内置的标签，称之为jsp的动作元素，它的本质就是把固定的java代码，封装成了标签的形式。</p>
<p>例如，</p>
<p><code>&lt;jsp:useBean id=&quot;s&quot; class=&quot;com.briup.bean.Student&quot; scope=&quot;page&quot;&gt;&lt;/jsp:useBean&gt;</code></p>
<p>相当于代码：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"> &lt;%</span><br><span class="line">    Student s = <span class="keyword">null</span>;</span><br><span class="line">    s = (Student)pageContext.getAttribute(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(s==<span class="keyword">null</span>)&#123;</span><br><span class="line">        s = <span class="keyword">new</span> Student();</span><br><span class="line">        pageContext.setAttribute(<span class="string">&quot;s&quot;</span>,s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>查看效果</p>
<p><code>&lt;%= pageContext.getAttribute(&quot;user&quot;) %&gt;</code></p>
<p>例如，</p>
<p><code>&lt;jsp:setProperty property=&quot;name&quot; value=&quot;tom&quot; name=&quot;s&quot;/&gt;</code></p>
<p>相当于代码：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    Student s = (Student)pageContext.getAttribute(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">    s.setName(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>查看效果</p>
<p><code>&lt;%= pageContext.getAttribute(&quot;user&quot;) %&gt;</code></p>
<p>例如，</p>
<p><code>&lt;jsp:getProperty property=&quot;name&quot; name=&quot;s&quot;/&gt;</code></p>
<p>相当于代码：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">	Student s = (Student)pageContext.getAttribute(<span class="string">&quot;s&quot;</span>);</span><br><span class="line">	out.write(s.getName());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>





<p>JSP的动作元素中，常被用的有俩个：</p>
<ul>
<li>forward</li>
<li>include</li>
</ul>
<p>例如，页面跳转</p>
<p><code>&lt;jsp:forward page=&quot;target.jsp&quot;&gt;&lt;/jsp:forward&gt;</code></p>
<p>例如，跳转的同时还可以传参数</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">&quot;target.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param value=<span class="string">&quot;tom&quot;</span> name=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>



<p>例如，在当前页面中包含另一个页面</p>
<p><code>&lt;jsp:include page=&quot;foot.jsp&quot;&gt;&lt;/jsp:include&gt;</code></p>
<p>例如，在包含页面的同时，还可以传参</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;foot.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param value=<span class="string">&quot;lisi&quot;</span> name=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure>

<p>foot.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">注册|登录|购物车 你好 &lt;%= request.getParameter(<span class="string">&quot;username&quot;</span>) %&gt;</span><br></pre></td></tr></table></figure>



<hr>
<p>一个页面包含/引入另外一个页面有俩种方式</p>
<ul>
<li>静态包含，<code>&lt;%@include file=&quot;&quot; %&gt;</code></li>
<li>动态包含，<code>&lt;jsp:include page=&quot;&quot;&gt;&lt;/jsp:include&gt;</code></li>
</ul>
<p>静态包含，在jsp翻译成java程序的时候，直接将另一个页面的内容原封不动的写入到代码中。</p>
<p>动态包含，在jsp翻译成java程序的时候，只会把包含的动作翻译成一个方法的调用，将来在访问的时候才会真正的去获取另一个页面的内容。</p>
<p><code>具体可查看编译后的字节码文件做对比</code></p>
<blockquote>
<p>注意，动态包含可以传参，静态包含不能穿参</p>
</blockquote>
<h2 id="7-注释"><a href="#7-注释" class="headerlink" title="7 注释"></a>7 注释</h2><p>jsp中的注释，分为三种</p>
<ul>
<li>html/xml中的注释方式</li>
<li>jsp中的注释方式</li>
<li>java中的注释方式</li>
</ul>
<h3 id="7-1-html注释"><a href="#7-1-html注释" class="headerlink" title="7.1 html注释"></a>7.1 html注释</h3><p>形式：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- html/xml中的注释方式 --&gt;</span><br></pre></td></tr></table></figure>

<p>特点:</p>
<ol>
<li>用户在浏览器中右键查看源代码 【能】 看到这个注释</li>
<li>在服务器端,这个jsp页面被翻译成的java文件中 【能】 看到这个注释.</li>
</ol>
<blockquote>
<p>注意，jsp动作元素，放在这种注释里面可能不起作用(注释不起作用,jsp动作元素正常执行)</p>
</blockquote>
<p>例如：下面的注释不起作用</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">	&lt;jsp:forward page=<span class="string">&quot;hello.jsp&quot;</span>&gt;&lt;/jsp:forward&gt;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<p>起作用</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- username: &lt;jsp:getProperty property=<span class="string">&quot;username&quot;</span> name=<span class="string">&quot;user&quot;</span>/&gt; --&gt;</span><br></pre></td></tr></table></figure>



<h3 id="7-2-jsp注释"><a href="#7-2-jsp注释" class="headerlink" title="7.2 jsp注释"></a>7.2 jsp注释</h3><p>形式：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%-- </span><br><span class="line">    jsp中的注释方式(隐藏注释)</span><br><span class="line">--%&gt;</span><br></pre></td></tr></table></figure>

<p>特点:</p>
<ol>
<li>用户在浏览器中右键查看源代码 【不能】看到这个注释。</li>
<li>在服务器端,这个jsp页面被翻译成的java文件中 [不能] 看到这个注释.</li>
</ol>
<blockquote>
<p>注意，这种注释，也被称为JSP中的隐藏注释</p>
</blockquote>
<h3 id="7-3-java注释"><a href="#7-3-java注释" class="headerlink" title="7.3 java注释"></a>7.3 java注释</h3><p>java中的注释方式，只能在jsp的脚本或者声明中使用。</p>
<p>例如，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">	<span class="comment">//String name = &quot;tom&quot;;</span></span><br><span class="line">	<span class="comment">/* </span></span><br><span class="line"><span class="comment">		int b = 40;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">  		 	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">		int a = 20;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>特点:</p>
<ol>
<li>用户在浏览器中右键查看源代码 【不能】 看到这个注释。</li>
<li>在服务器端,这个jsp页面被翻译成的java文件中 【能】 看到这个注释.</li>
</ol>
<h2 id="8-对象"><a href="#8-对象" class="headerlink" title="8 对象"></a>8 对象</h2><p>在jsp页面代码中，可以直接使用的内置的对象，只要对象名字写对即可。</p>
<p>jsp中的内置对象一共有九种：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名字</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>PageContext</td>
<td>pageContext</td>
<td>页面范围对象</td>
</tr>
<tr>
<td>HttpServletRequest</td>
<td>request</td>
<td>和servlet中的相同</td>
</tr>
<tr>
<td>HttpSession</td>
<td>session</td>
<td>和servlet中的相同</td>
</tr>
<tr>
<td>ServletContext</td>
<td>application</td>
<td>和servlet中的相同</td>
</tr>
<tr>
<td>Object</td>
<td>page</td>
<td>jsp页面本身（this）</td>
</tr>
<tr>
<td>HttpServletResponse</td>
<td>response</td>
<td>和servlet中的相同</td>
</tr>
<tr>
<td>JspWriter</td>
<td>out</td>
<td>输出流，可以给客户端写回内容</td>
</tr>
<tr>
<td>ServletConfig</td>
<td>config</td>
<td>和servlet中的相同</td>
</tr>
<tr>
<td>Throwable</td>
<td>exception</td>
<td>隐藏对象，表示jsp中的异常</td>
</tr>
</tbody></table>
<blockquote>
<p>注意，这些对象的类型和名字都是固定的，任意打开一个jsp页面翻译成的java代码，查看_jspService方法，就可以看到这些内置的对象</p>
</blockquote>
<blockquote>
<p>注意，JSP中比servlet多了一个更加小的传值范围pageContext，存进去的值，只会在一个页面中有效，比之前的request范围还要小</p>
</blockquote>
<p>默认情况下，jsp页面中是不能使用exception这个对象的，除非页面中设置了isErrorPage属性：</p>
<p><code>&lt;%@ page isErrorPage=&quot;true&quot; %&gt;</code></p>
<p>查看错误信息</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%=</span><br><span class="line">    exception.getMessage()</span><br><span class="line">%&gt; </span><br></pre></td></tr></table></figure>



<h2 id="9-路径"><a href="#9-路径" class="headerlink" title="9 路径"></a>9 路径</h2><p>一般情况下，jsp中路径问题是和我们之前在servlet中讨论的html里面的路径问题是一样的，但是在jsp中可以动态获得该项目的URL地址</p>
<p>例如，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	String path = request.getContextPath();</span><br><span class="line">	String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span> /&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;index.html&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;h1&gt;index&lt;/h1&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;a href=<span class="string">&quot;hello.jsp&quot;</span>&gt;hello&lt;/a&gt;</span><br><span class="line">	</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里把项目的基础URL地址，动态的拼接了出来，并且使用了base标签，来指定页面中相对路径的参照点</p>
</blockquote>
<h2 id="10-EL"><a href="#10-EL" class="headerlink" title="10 EL"></a>10 EL</h2><blockquote>
<p>EL（Expression Language），称为EL表达式，目的是为了使JSP写起来更加简单</p>
</blockquote>
<p>在jsp页面中，使用EL表达式，就可以不用写大量的java代码了，这样可以提高页面的可读性和维护性。</p>
<p>形式：</p>
<p><code>$&#123;&#125;</code></p>
<p>例如，接收客户端参数</p>
<p><code>http://localhost:8989/day9-jsp/el.jsp?name=lucy</code></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;param.name1 &#125;  &lt;%requet.getParmeter(<span class="string">&quot;usernm&quot;</span>%&gt;</span><br></pre></td></tr></table></figure>



<p>例如，指定范围并取值</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;pageScope.name2 &#125;</span><br><span class="line">$&#123;requestScope.name3 &#125;</span><br><span class="line">$&#123;sessionScope.name4 &#125;</span><br><span class="line">$&#123;applicationScope.name5 &#125;</span><br></pre></td></tr></table></figure>



<p>例如，可以不指定范围再去取值</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;name&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这时候会按照pageContext request session application这样一个顺序依次的去找，有没有一个叫name的值存在，一旦找到了就输出出来，最终没有找到那么就什么都不输出</p>
</blockquote>
<p>例如，取出一个对象中的属性值</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;requestScope.student.id&#125;</span><br><span class="line">$&#123;requestScope.student.name&#125;</span><br><span class="line">$&#123;requestScope.student.age&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">$&#123;student.id&#125;</span><br><span class="line">$&#123;student.name&#125;</span><br><span class="line">$&#123;student.age&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">$&#123;student[<span class="string">&quot;id&quot;</span>]&#125;</span><br><span class="line">$&#123;student[<span class="string">&#x27;id&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">$&#123;student[<span class="string">&quot;name&quot;</span>]&#125;</span><br><span class="line">$&#123;student[<span class="string">&#x27;name&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">$&#123;student[<span class="string">&quot;age&quot;</span>]&#125;</span><br><span class="line">$&#123;student[<span class="string">&#x27;age&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，${student.id}表示要调用student对象中的getId方法，至于对象中有没有id属性，对这个操作没有任何影响。所以这和id指的是对象中的property而不是attribute</p>
<p>${student[‘name’]}调用的是attribute</p>
</blockquote>
<p>例如，如果Student类中一个方法是getAddress，返回一个Address类的对象，Address类中有一个方法getCity，这个时候就可以这样写去拿到city属性的值.</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;student.address.city&#125;</span><br></pre></td></tr></table></figure>



<p>例如，输出字符串</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="string">&quot;hello&quot;</span>&#125;</span><br></pre></td></tr></table></figure>



<p>例如，输出运算结果或者boolean表达式</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;<span class="number">1</span>+<span class="number">1</span> &#125;</span><br><span class="line">$&#123;(<span class="number">1</span>+<span class="number">2</span>)*<span class="number">3</span>-<span class="number">4</span>+<span class="number">5</span>*<span class="number">3</span> &#125;</span><br><span class="line">$&#123;u.age * <span class="number">10</span> &#125;</span><br><span class="line">$&#123;<span class="number">1</span>&lt;<span class="number">3</span> &#125;</span><br><span class="line">      </span><br><span class="line">&lt;%</span><br><span class="line">		String name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		String name2 = <span class="string">&quot;lucy&quot;</span>;</span><br><span class="line">	%&gt;      </span><br><span class="line"><span class="comment">//为空的话返回true 注意取不到脚本的值 可以将name存到request中</span></span><br><span class="line">$&#123;empty <span class="string">&quot;&quot;</span> &#125;</span><br><span class="line">$&#123;empty <span class="string">&quot;hello&quot;</span> &#125;</span><br><span class="line"> 判断<span class="number">1</span> $&#123;empty <span class="string">&quot;$&#123;name&#125;&quot;</span> &#125;&lt;br&gt;  </span><br><span class="line"><span class="comment">//取否 不为空的话返回true</span></span><br><span class="line">$&#123;not empty <span class="string">&quot;hello&quot;</span> &#125;</span><br><span class="line">$&#123;! empty <span class="string">&quot;hello&quot;</span> &#125;</span><br><span class="line">$&#123;param.score &gt;<span class="number">50</span> &#125;</span><br><span class="line">    </span><br><span class="line">$&#123;param.score &gt;<span class="number">60</span>?<span class="string">&quot;good&quot;</span>:<span class="string">&quot;bad&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&lt;%</span><br><span class="line">		request.setAttribute(<span class="string">&quot;s&quot;</span>, <span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">&quot;lucy&quot;</span>));</span><br><span class="line">	%&gt;</span><br><span class="line">	$&#123;<span class="number">1</span>&lt;<span class="number">3</span> &#125; &lt;br&gt;</span><br><span class="line">	$&#123;empty <span class="number">1</span> &#125;&lt;br&gt;</span><br><span class="line">	$&#123;empty <span class="string">&quot;&quot;</span> &#125;&lt;br&gt;</span><br><span class="line">	$&#123;<span class="number">5</span>&lt;<span class="number">6</span>? <span class="number">5</span>:<span class="number">6</span> &#125;&lt;br&gt;</span><br><span class="line">	$&#123; empty requestScope.s? <span class="string">&quot;登录&quot;</span>:requestScope.s.name&#125;</span><br></pre></td></tr></table></figure>



<p>例如，输出数组、集合中的元素</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">String[] str = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;();</span><br><span class="line">map.put(<span class="string">&quot;a&quot;</span>,<span class="number">100</span>);</span><br><span class="line">map.put(<span class="string">&quot;b&quot;</span>,<span class="number">200</span>);</span><br><span class="line">map.put(<span class="string">&quot;c&quot;</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">request.setAttribute(<span class="string">&quot;str&quot;</span>,str);</span><br><span class="line">request.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">request.setAttribute(<span class="string">&quot;map&quot;</span>,map);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">$&#123;str[<span class="number">0</span>] &#125;&lt;br&gt;</span><br><span class="line">$&#123;list[<span class="number">1</span>] &#125;&lt;br&gt;</span><br><span class="line">$&#123;map[<span class="string">&quot;c&quot;</span>] &#125;&lt;br&gt;</span><br></pre></td></tr></table></figure>



<p>遍历集合</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- 遍历集合 放入表格中--&gt;</span><br><span class="line">	&lt;table border=<span class="string">&quot;1px&quot;</span> cellpadding=<span class="string">&quot;0px&quot;</span> cellspacing=<span class="string">&quot;0px&quot;</span>&gt;</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">			&lt;td&gt;name&lt;/td&gt;</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">		&lt;%	</span><br><span class="line">			List&lt;String&gt; l = (List&lt;String&gt;)request.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; l.size(); i++ )&#123;</span><br><span class="line">				String name = l.get(i);</span><br><span class="line">		%&gt;</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">			&lt;td&gt;&lt;%= name %&gt;&lt;/td&gt;</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">		&lt;%</span><br><span class="line">			&#125;</span><br><span class="line">		%&gt;</span><br><span class="line">	&lt;/table&gt;</span><br></pre></td></tr></table></figure>



<p>例如，key的值中含有特殊符号点</p>
<p>request对象中有一个key值为:javax.servlet.forward.request_uri</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">$&#123;requestScope[<span class="string">&#x27;javax.servlet.forward.request_uri&#x27;</span>] &#125;</span><br></pre></td></tr></table></figure>





<h2 id="11-JSTL"><a href="#11-JSTL" class="headerlink" title="11 JSTL"></a>11 JSTL</h2><blockquote>
<p>JSTL（JSP Standard Tag Library），jsp标准的标签库，其目的也是简化jsp中java代码的编写</p>
</blockquote>
<h3 id="11-1-引入"><a href="#11-1-引入" class="headerlink" title="11.1 引入"></a>11.1 引入</h3><p>1、先将标签库对应的jar导入项目中</p>
<p>如果是动态的web项目，直接将jstl-1.2.jar复制粘贴到lib目录中即可。</p>
<p>如果是maven项目，引入其依赖坐标即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2、然后再需要使用的JSP页面中，使用tablib指令，将标签库引入：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>



<h3 id="11-2-使用"><a href="#11-2-使用" class="headerlink" title="11.2 使用"></a>11.2 使用</h3><blockquote>
<p>注意，JSTL标签库一般会结合着EL表达式一起使用</p>
</blockquote>
<p>常用的几种标签为：</p>
<p><code>&lt;c:forEach&gt;</code>标签(遍历使用)</p>
<p>脚本遍历</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">		<span class="comment">// 准备数据</span></span><br><span class="line">		List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">		list.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;lucy&quot;</span>));</span><br><span class="line">		list.add(<span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">&quot;tom&quot;</span>));</span><br><span class="line">		list.add(<span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">&quot;jack&quot;</span>));</span><br><span class="line">	%&gt;</span><br><span class="line">	&lt;table&gt;</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">			&lt;td&gt;id&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;name&lt;/td&gt;</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">		&lt;%</span><br><span class="line">		   <span class="keyword">for</span>(User user : list)&#123;</span><br><span class="line">			 <span class="keyword">int</span> id =  user.getId(); </span><br><span class="line">			 String username = user.getUsername();</span><br><span class="line">		%&gt;</span><br><span class="line">		&lt;tr&gt;</span><br><span class="line">			&lt;td&gt;&lt;%=id%&gt;&lt;/td&gt;</span><br><span class="line">			&lt;td&gt;&lt;%=username%&gt;&lt;/td&gt;</span><br><span class="line">		&lt;/tr&gt;</span><br><span class="line">		&lt;%  </span><br><span class="line">			&#125;</span><br><span class="line">		%&gt;</span><br><span class="line">	&lt;/table&gt;</span><br></pre></td></tr></table></figure>



<p>标签遍历，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> Student(<span class="number">1</span>,<span class="string">&quot;tom1&quot;</span>,<span class="number">21</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Student(<span class="number">2</span>,<span class="string">&quot;tom2&quot;</span>,<span class="number">22</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Student(<span class="number">3</span>,<span class="string">&quot;tom3&quot;</span>,<span class="number">23</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Student(<span class="number">4</span>,<span class="string">&quot;tom4&quot;</span>,<span class="number">24</span>));</span><br><span class="line">    session.setAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;list &#125;&quot;</span> <span class="keyword">var</span> =<span class="string">&quot;stu&quot;</span> begin=<span class="string">&quot;0&quot;</span> end =<span class="string">&quot;3&quot;</span> varStatus=<span class="string">&quot;status&quot;</span> step=<span class="string">&quot;1&quot;</span>&gt;  </span><br><span class="line">    $&#123;status.index &#125; : $&#123;stu.id &#125; - $&#123;stu.name &#125; - $&#123;stu.age &#125; &lt;br&gt;  </span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>

<p>其中，</p>
<p><code>varStatus</code>表示当前循环遍历的序号</p>
<p><code>begin=&quot;&quot;</code>默认值是0  ，<code>end=&quot;&quot;</code>默认值是最后一个元素，<code>step=&quot;&quot;</code>默认值是1，一般的遍历只要写var和items来个属性即可</p>
<p>例如，遍历List集合，假设students是放进request对象中的一个List集合，集合中存放的是Student类型的对象</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;students&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;stu&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;stu.id &#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;stu.name &#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;stu.age &#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>



<p>例如，遍历Map集合，假设有一个Map类型的集合，放到了request对象中，key是id值，value是Student对象</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;map&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;entry&quot;</span>&gt;</span><br><span class="line">  		$&#123;entry.key &#125;--&gt;$&#123;entry.value.id &#125; &amp;nbsp; $&#123;entry.value.name &#125; &amp;nbsp; $&#123;entry.value.age &#125;&lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>entry是定义的一个变量，用做接收每次遍历到的集合中的一组键值对,可以通过entry.key 和 entry.value分别拿到这次遍历到的key值和value值</p>
</blockquote>
<p><code>&lt;if&gt;</code>标签</p>
<p>例如，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">    &lt;%</span><br><span class="line">        request.setAttribute(<span class="string">&quot;score&quot;</span>,<span class="number">40</span>);</span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;score&gt;85 &#125;&quot;</span>&gt;</span><br><span class="line">        &lt;font color=<span class="string">&quot;red&quot;</span>&gt;你的分数超过了<span class="number">85</span>分&lt;/font&gt;</span><br><span class="line">    &lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;!-- 注意放reuqest即可,session一直在会话级别 --&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;!empty s&#125;&quot;</span>&gt;</span><br><span class="line">		&lt;font color=<span class="string">&quot;red&quot;</span>&gt;$&#123;s.name &#125;&lt;/font&gt;</span><br><span class="line">	&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">	&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;empty s&#125;&quot;</span>&gt;</span><br><span class="line">		&lt;font color=<span class="string">&quot;green&quot;</span>&gt;登录&lt;/font&gt;</span><br><span class="line">	&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">		&lt;c:when test=<span class="string">&quot;$&#123;!empty s&#125;&quot;</span>&gt;</span><br><span class="line">			&lt;font color=<span class="string">&quot;red&quot;</span>&gt;$&#123;s.name &#125;&lt;/font&gt;</span><br><span class="line">		&lt;/c:when&gt;</span><br><span class="line">		&lt;c:otherwise&gt;</span><br><span class="line">			&lt;font color=<span class="string">&quot;green&quot;</span>&gt;登录&lt;/font&gt;</span><br><span class="line">		&lt;/c:otherwise&gt;</span><br><span class="line">	&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure>



<p><code>&lt;c:import&gt;</code>标签</p>
<p>和<code>&lt;jsp:include&gt;</code>的作用基本相同，但是<code>&lt;c:import&gt;</code>还可以选择把引入的内容先保存在一个变量中，之后通过EL表达式再拿出来显示</p>
<p>例如，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:<span class="keyword">import</span> <span class="keyword">var</span>=<span class="string">&quot;data&quot;</span> url=<span class="string">&quot;a.jsp&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 什么时候导入 就什么时候用</span></span><br><span class="line">&lt;div&gt;$&#123;data&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<p><code>&lt;c:redirect&gt;</code>标签</p>
<p>重定向标签</p>
<p>例如，</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:redirect url=<span class="string">&quot;a.jsp&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>





<h2 id="12-自定义"><a href="#12-自定义" class="headerlink" title="12 自定义"></a>12 自定义</h2><blockquote>
<p>除了使用现有的标签库之外，我们还可以自定义的自己的标签库。（作为扩展了解的内容即可）</p>
</blockquote>
<p>JSP1.1版本中增加了自定义标签库规范，但是在 JSP1.1规范中开发自定义标签库比较复杂，JSP2.0 及以上版本中简化了标签库的开发，只需如下几个步骤</p>
<ul>
<li><p>编写自定义标签处理类</p>
</li>
<li><p>建立一个 *.tld 文件，该文件放在WEB-INF下即可</p>
<p>每个 *.tld 文件对应一个标签库，每个标签库可以对应多个标签</p>
</li>
<li><p>在jsp文件中使用tablib指令引入并使用自定义标签</p>
</li>
<li><p>jsp页面中使用该标签库</p>
</li>
</ul>
<p><strong>例如1</strong>，编写一个标签，可以自动输出hello</p>
<p>第一步，继承SimpleTagSupport，重写doTag即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.getJspContext().getOut().println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>第二步，编写my-tag.tld文件(名字随意)，存放在WEB-INF下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">taglib</span></span></span><br><span class="line"><span class="meta">   <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.2//EN&quot;</span></span></span><br><span class="line"><span class="meta">   <span class="meta-string">&quot;http://java.sun.com/j2ee/dtd/web-jsptaglibrary_1_2.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">jsp-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">short-name</span>&gt;</span>my-taglib<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uri</span>&gt;</span>briup-taglib<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.briup.test.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意1，该文件的样例可以在tomcat中的实例项目中复制出来修改</p>
<p>例如，tomcat\webapps\examples\WEB-INF\jsp\example-taglib.tld文件</p>
<p>注意2，<code>&lt;body-content&gt;</code>标签中的值，表示自定义标签中body部分可以填写的内容类型，有四种：</p>
<ul>
<li>empty，空标记，即起始标记和结束标记之间没有内容</li>
<li>scriptless，可以接收文本、EL和JSP动作</li>
<li>JSP，（SimpleTagSupport类型不支持），接受所有JSP语法，如定制的或内部的tag、scripts、静态HTML、脚本元素、JSP指令和动作</li>
<li>tagdependent，标签体内容直接被写入BodyContent，由自定义标签类来进行处理，而不被JSP容器解释</li>
</ul>
<p>第三步，jsp页面中引入并使用标签库</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;briup-taglib&quot;</span> prefix=<span class="string">&quot;briup&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;hello.jsp&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;briup:hello&gt;&lt;/briup:hello&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<p><strong>例如2</strong>，编写一个标签，可以自动输出hello，并附带上标签体中的内容</p>
<p>第一步，修改HelloTag类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//准备好一个StringWriter，接收标签体内容</span></span><br><span class="line">        StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把标签体内容写到StringWriter中</span></span><br><span class="line">        <span class="keyword">super</span>.getJspBody().invoke(sw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从StringWriter中获取标签体的内容</span></span><br><span class="line">        String tagBody = sw.toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.getJspContext().getOut().println(<span class="string">&quot;hello! &quot;</span>+tagBody);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>第二步，修改my-tag.tld文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.briup.test.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，这里只是修改了<code>&lt;body-content&gt;</code>标签中的值，改为scriptless或者tagdependent都是可以的.其他地方不用修改</p>
<p>第三步，修改jsp文件，添加标签body内容即可</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;briup:hello&gt;tom&lt;/briup:hello&gt;</span><br></pre></td></tr></table></figure>





<p><strong>例如3</strong>，编写一个标签，可以自动输出hello，并附带上标签体中的内容，并且根据标签中属性的值，来确定内容将会输出多少次</p>
<p>第一步，修改HelloTag类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//准备好一个StringWriter，接收标签体内容</span></span><br><span class="line">        StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把标签体内容写到StringWriter中</span></span><br><span class="line">        <span class="keyword">super</span>.getJspBody().invoke(sw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从StringWriter中获取标签体的内容</span></span><br><span class="line">        String tagBody = sw.toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++) &#123;</span><br><span class="line">            <span class="keyword">super</span>.getJspContext().getOut().println(<span class="string">&quot;hello! &quot;</span>+tagBody+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改地方1，添加属性count，提供get/set方法，用来接收标签中属性的count属性的值<br>修改地方2，输出内容语句外面嵌套循环，循环次数由count的值来控制</p>
<p>第二步，修改my-tag.tld文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.briup.test.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改地方，添加attribute标签来指定属性的相关信息</p>
<p>第三步，修改jsp文件，添加标签的属性</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;briup:hello count=<span class="string">&quot;5&quot;</span>&gt;tom&lt;/briup:hello&gt;</span><br></pre></td></tr></table></figure>



<p><strong>例如4</strong>，编写一个标签，可以自动输出hello，并附带上标签体中的内容，并且根据标签中属性的值，来确定内容将会输出多少次，同时标签体值和属性的值都是要EL表达式来表示</p>
<p>第一步，HelloTag类，和例3保持一致，不需要改动</p>
<p>第二步，修改my-tag.tld文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.briup.test.HelloTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>count<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rtexprvalue</span>&gt;</span>true<span class="tag">&lt;/<span class="name">rtexprvalue</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改地方，添加标签<code>&lt;rtexprvalue&gt;</code>，表示支持EL</p>
<p>注意，rtexprvalue的意思是：Runtime Expression Value</p>
<p>第三步，修改jsp文件，添加标签的属性</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    request.setAttribute(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;count&quot;</span>, <span class="string">&quot;10&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;briup:hello count=<span class="string">&quot;$&#123;count &#125;&quot;</span>&gt;$&#123;name &#125;&lt;/briup:hello&gt;</span><br></pre></td></tr></table></figure>

<p>修改地方，添加了jsp脚本，配合测试，同时标签中是使用了EL表达式</p>
]]></content>
      <tags>
        <tag>briup</tag>
      </tags>
  </entry>
  <entry>
    <title>briup-springmvc</title>
    <url>/archives/briup/briup-springmvc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>briup-spring</title>
    <url>/archives/briup/briup-spring.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
  </entry>
  <entry>
    <title>briup-ajax</title>
    <url>/archives/briup/briup-ajax.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="ajax-jquery"><a href="#ajax-jquery" class="headerlink" title="ajax-jquery"></a>ajax-jquery</h1><h2 id="1-同步请求"><a href="#1-同步请求" class="headerlink" title="1 同步请求"></a>1 同步请求</h2><p>传统的应用中，浏览器发出的请求，一般都是同步请求，浏览器需要等待这个请求发出之后，服务器端的响应，浏览器接收到响应后，解析本次内容，再显示出来。</p>
<p>如果服务器响应时间过长，那么在这个期间，客户端浏览器只能等待着。</p>
<p>并且响应回来后，需要重新刷新和加载整个页面。</p>
<p>例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/test?username=tom&quot;</span>&gt;</span>同步请求测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>$&#123;msg &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>*<span class="number">10</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		req.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>+username);</span><br><span class="line">		String path = <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">		req.getRequestDispatcher(path).forward(req, resp);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>注意，tomcat中默认请求的超时时间是20秒，<code>connectionTimeout=&quot;20000&quot;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8989&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>可以看出，在响应回来之前，客户端只能等待着，那么这个过程是比较影响用户体验的</p>
</blockquote>
<blockquote>
<p>观察同步请求返回的响应内容，可以看出，该响应把整个页面的内容又发送了回来</p>
</blockquote>
<p>==同步请求存在的问题==</p>
<ul>
<li>网速慢的情况下，页面加载时间长，用户只能等待</li>
<li>表单提交后，如果一项内容不合格，需要重新填写所有表单内容</li>
<li>页面跳转，重新加载页面，造成资源浪费，增加用户等待时间</li>
</ul>
<h2 id="2-异步请求"><a href="#2-异步请求" class="headerlink" title="2 异步请求"></a>2 异步请求</h2><blockquote>
<p>异步请求，可以解决上述同步请求中，所遇到的问题</p>
</blockquote>
<p>AJAX（Asynchronous JavaScript And XML），异步的 JavaScript 和 XML。</p>
<p>它不是一门新的技术或者语言，它是把已经有的几种技术，结合在一起，出现的一种新的用法，至少在当时刚出现的时候是一种新的用法，但是现在ajax的应用已经相当成熟了。</p>
<p>同步请求是请求发送后，等待服务器响应回来，响应中带着当前要显示的新的页面内容（完整页面内容），然后浏览器接收响应，并且加载刷新整个页面，最后显示出一个新的页面。</p>
<p>ajax发出的异步请求，不需要等待服务器的响应，页面中可以继续完成其他工作，等响应回来后，会自动调用ajax中设置好的函数（回调函数），函数中接收响应中的数据（少量数据），并把数据更新到页面中（局部刷新）。</p>
<p>在整个异步请求的过程中，用户感受不到请求的发送，并且整个页面中也只有局部地方的数据有刷新，其他内容不变，用户的体验较好。</p>
<p>异步请求的特点：（八个字）</p>
<ul>
<li>异步交互</li>
<li>局部刷新</li>
</ul>
<p>例如，一个典型的场景，用户注册</p>
<p>如果是同步请求，需要用户填写完表单中的所有选项，然后点击注册，将数据发送给服务器，然后客户端等待服务器端的响应，如果这次响应回来，提示用户名已经被占用，需要换个名字重新注册，此时可以想象用户的内心感受。。。</p>
<p>如果是异步请求，当用户填写完第一项用户名的时候，就可以“偷偷”的发送异步请求，将用户名发送给服务器端验证，看是否可用，如果可用输入框后面可以提示出“该用户名可用”，如果不可用，输入框后提示“该用户名不可用”，此时就可以大大提高用户的使用体验。</p>
<p>==思考，还有哪些常见的场景中，会“偷偷”的发出异步请求？==</p>
<h2 id="3-XMLHttpRequest"><a href="#3-XMLHttpRequest" class="headerlink" title="3 XMLHttpRequest"></a>3 XMLHttpRequest</h2><p>能够完成异步请求的发送，完全依赖于一个核心的对象：<code>XMLHttpRequest</code></p>
<p>XMLHttpRequest最早在IE5中以ActiveX对象的形式实现的。现在，FireFox、Safari、Opera、Konqueror和IE都实现了XMLHttpRequest对象的行为。</p>
<p>XMLHttpRequest不是一个W3C的标准，所以可以采用多种方法来创建XMLHttpRequest的对象，IE把XMLHttpRequest实现为一个ActiveX的对象，而其它浏览器将它实现为一个本地的JavaScript对象。</p>
<p>如果浏览器支持ActiveX对象，就可以使用ActiveX来创建XMLHttpRequest对象，否则就要使用本地JavaScript对象技术来创建该对象。</p>
<p>例如，创建XMLHttpRequest对象</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	</span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> xmlHttp;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">//创建XMLHttpRequest对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//本地浏览器是否支持ActiveX对象，返回对象为true，返回null为false</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123; </span></span><br><span class="line"><span class="javascript">        xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//本地浏览器是否支持XMLHttpRequest对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//作为一个JavaScript对象来创建</span></span></span><br><span class="line"><span class="javascript">        xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">	</span></span><br><span class="line"><span class="javascript">	</span></span><br><span class="line"><span class="javascript">	alert(xmlHttp);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-使用ajax"><a href="#4-使用ajax" class="headerlink" title="4 使用ajax"></a>4 使用ajax</h2><p>JavaScript中，有了XMLHttpRequest对象后，就可以发送异步请求了。</p>
<p>例如，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">createXMLHttpRequest</span>(<span class="params">xmlHttp</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123; </span></span><br><span class="line"><span class="javascript">			xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span></span><br><span class="line"><span class="javascript">			xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="function"><span class="keyword">function</span> <span class="title">ajaxRequest</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> xmlHttp;</span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript">		<span class="comment">//1 创建核心对象</span></span></span><br><span class="line"><span class="javascript">		<span class="keyword">if</span>(<span class="built_in">window</span>.ActiveXObject)&#123; </span></span><br><span class="line"><span class="javascript">			xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span></span><br><span class="line"><span class="javascript">			xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">		&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//2 建立连接</span></span></span><br><span class="line"><span class="javascript">		<span class="comment">//参数1 请求方式</span></span></span><br><span class="line"><span class="javascript">		<span class="comment">//参数2 请求的URL</span></span></span><br><span class="line"><span class="javascript">		<span class="comment">//参数3 是否是异步请求</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 注意:参数不能为空,后台在write(username)</span></span></span><br><span class="line"><span class="javascript">		xmlHttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/ajax-test?username=mary&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//3 发送请求</span></span></span><br><span class="line"><span class="javascript">		xmlHttp.send();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//4 指定回调函数，接受并处理来自服务器的响应结果</span></span></span><br><span class="line"><span class="javascript">		xmlHttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">//判断readyState就绪状态是否为4</span></span></span><br><span class="line"><span class="javascript">			<span class="comment">//判断status响应状态码是否为200</span></span></span><br><span class="line"><span class="javascript">	        <span class="keyword">if</span> (xmlHttp.readyState==<span class="number">4</span> &amp;&amp; xmlHttp.status==<span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="javascript">	           <span class="comment">//获取服务器的响应结果</span></span></span><br><span class="line"><span class="javascript">	            <span class="keyword">var</span> responseText = xmlHttp.responseText;</span></span><br><span class="line"><span class="javascript">	            <span class="comment">//alert(responseText);</span></span></span><br><span class="line"><span class="javascript">	            <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;d2&quot;</span>);</span></span><br><span class="line"><span class="javascript">	            div.innerHTML = responseText;</span></span><br><span class="line"><span class="javascript">	        &#125;</span></span><br><span class="line"><span class="javascript">		&#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/test?username=tom&quot;</span>&gt;</span>同步请求测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;ajaxRequest()&quot;</span>&gt;</span>异步请求测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span>$&#123;msg &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 此时参数不能为空,后台在write</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajax-test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxTestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Thread.sleep(<span class="number">1000</span>*<span class="number">10</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = resp.getWriter();</span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;hello! &quot;</span>+username);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>同步为请求转发html,异步为写回局部数据</code></p>
<blockquote>
<p>观察同步请求返回的响应内容，可以看出该响应只把少量的数据返回了（hello! mary）,然后ajax的回调函数中把该内容局部刷到了页面的div里面</p>
</blockquote>
<blockquote>
<p>感受ajax发异步请求的特点：异步交互、局部刷新</p>
</blockquote>
<h2 id="5-jquery"><a href="#5-jquery" class="headerlink" title="5 jquery"></a>5 jquery</h2><blockquote>
<p>使用ajax的原生代码，完成异步交互还是比较繁琐的，通常会使用一些对JS封装的库中的函数完成</p>
</blockquote>
<h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>jquery是对js封装的一个库，也是一个js文件，使用的时候，只需要将jquery文件引入到当前页面中即可。</p>
<p>jquery的版本众多，不同版本中的函数稍有差异，这里我们使用的是1.8.3版本。</p>
<p>1、可以将jquery文件存放到项目中，然后再引入到页面中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/jquery/jquery-1.8.3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，jquery可以在jsp页面中使用，也可以在html静态页面中使用，效果是一样的</p>
</blockquote>
<p>2、可以使用网络中公开的连接地址</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>例如，使用 <a href="https://www.bootcdn.cn/">https://www.bootcdn.cn/</a> 中的jquery地址</p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/ajax/202205221608648.png" alt="image-20201008232743892"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/ajax/202205221608311.png" alt="image-20201008232806009"></p>
<p><img src="image/image-20201008232822183.png" alt="image-20201008232822183"></p>
<p><img src="https://cdn.jsdelivr.net/gh/wangsidandan/blog_images@main/ajax/202205221608972.png" alt="image-20201008232842734"></p>
<blockquote>
<p>类似的，如果将来要使用其他的js库，也可以在这里查找</p>
</blockquote>
<h3 id="5-2-加载"><a href="#5-2-加载" class="headerlink" title="5.2 加载"></a>5.2 加载</h3><blockquote>
<p>一般情况下，需要让浏览器先加载完整个页面的html元素后，在执行js或jquery代码，因为这样代码中才能操作指定的元素</p>
</blockquote>
<p>由于浏览器解析页面，是从上往下，依次解析，所以我们一般希望的是，先加载完所有的html标签元素，然后再执行js代码，这样就可以在js中获取已经加载的html标签元素了。</p>
<p>之前在js代码中，可以这样来实现该效果：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="javascript">            <span class="comment">//给window对象的onload事件绑定一个匿名函数</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// js代码，操作页面元素</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        .....</span><br><span class="line">        .....<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        .....</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>该js代码表示，当window对象加载完毕之后，再执行匿名函数中的js代码</p>
<p>window对象加载完毕就表示整个html页面元素都加载完毕了</p>
</blockquote>
<p>在引入jquery后，也有对应的解决方案，其效果和以上js代码是一样的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//jquery代码，操作页面元素</span></span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        .....</span><br><span class="line">        .....</span><br><span class="line">        .....</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，$是jQuery的一个简写形式，表示调用jquery中的函数</p>
</blockquote>
<p>这个代码可以简写为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/1.8.3/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">//$();</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//$(function()&#123;&#125;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//将上面大括号展开即可</span></span></span><br><span class="line"><span class="javascript">            </span></span><br><span class="line"><span class="javascript">            $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">               <span class="comment">//jquery代码，操作页面元素</span></span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>思考: js对象和jq对象的关系</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$(function() &#123;</span><br><span class="line">		var divEle = $(&quot;#d&quot;);</span><br><span class="line">		// console.log(divEle);</span><br><span class="line">		divEle.html(&quot;jq&quot;);</span><br><span class="line">		var divJS = divEle[0];</span><br><span class="line">		// console.log(divJS);</span><br><span class="line">		divJS.innerHTML = &quot;js&quot;;</span><br><span class="line">		var divJQ = $(divJS);</span><br><span class="line">		console.log(divJQ);</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>js-&gt;jq  <code>$(js)​</code></li>
<li>jq-&gt;js  <code>jq[0]</code></li>
</ul>
<h3 id="5-3-使用"><a href="#5-3-使用" class="headerlink" title="5.3 使用"></a>5.3 使用</h3><p>jquery极大的简化了js中对html元素的dom操作，jquery倡导的理念是：write less,do more</p>
<p>例如，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/jquery/jquery-1.8.3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//页面加载完毕后，再执行jquery代码</span></span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//给btn1按钮添加点击事件</span></span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#btn1&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">//点击触发事件后，给div添加内容，并且设置其css的样式</span></span></span><br><span class="line"><span class="javascript">			$(<span class="string">&quot;#dd&quot;</span>).html(<span class="string">&quot;hello world&quot;</span>).css(&#123;<span class="attr">width</span>:<span class="string">&quot;100px&quot;</span>,<span class="attr">height</span>:<span class="string">&quot;100px&quot;</span>,<span class="attr">border</span>:<span class="string">&quot;1px solid red&quot;</span>&#125;);</span></span><br><span class="line"><span class="javascript">		&#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//给btn2按钮添加点击事件</span></span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#btn2&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">//点击触发事件后，让div隐藏起来，并且使用动画效果</span></span></span><br><span class="line"><span class="javascript">			$(<span class="string">&quot;#dd&quot;</span>).slideUp();</span></span><br><span class="line"><span class="javascript">		&#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		<span class="comment">//给btn3按钮添加点击事件</span></span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#btn3&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			<span class="comment">//点击触发事件后，让div显示出来，并且使用动画效果</span></span></span><br><span class="line"><span class="javascript">			$(<span class="string">&quot;#dd&quot;</span>).slideDown();</span></span><br><span class="line"><span class="javascript">		&#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn3&quot;</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>更多的操作，可以查看jquery1.8的api文档</p>
<p><a href="http://t.mb5u.com/jquery/">jquery1.8在线API文档</a></p>
<p><img src="image/image-20201008235649562.png" alt="image-20201008235649562"></p>
<blockquote>
<p>API文档中，有大量详细的案例，基本查看后即可使用</p>
</blockquote>
<h3 id="5-4-ajax"><a href="#5-4-ajax" class="headerlink" title="5.4 ajax"></a>5.4 ajax</h3><blockquote>
<p>jquery同样的对ajax代码也进行封装，让我们在页面中发送ajax请求变的更加简单，这也是我们在ajax中介绍并使用jquery的原因</p>
</blockquote>
<p>例如，修改AjaxTestServlet代码，重写doPost方法，doPost方法中调用doGet方法，这样不管是get请求还是post请求，都可以使用同样的代码来处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajax-test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxTestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		</span><br><span class="line">		String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		PrintWriter out = resp.getWriter();</span><br><span class="line">		</span><br><span class="line">		out.println(<span class="string">&quot;hello! &quot;</span>+username);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		doGet(req,resp);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>官网配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="string">&quot;#b01&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      htmlobj=$.ajax(&#123;<span class="attr">url</span>:<span class="string">&quot;/jquery/test1.txt&quot;</span>,<span class="attr">async</span>:<span class="literal">false</span>&#125;);</span><br><span class="line">      $(<span class="string">&quot;#myDiv&quot;</span>).html(htmlobj.responseText);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>





<p>使用jquery中封装的ajax函数，发送GET请求：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/jquery/jquery-1.8.3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#btn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">			$.ajax(&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">url</span>: <span class="string">&quot;/ajax-test?username=mary&quot;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">dataType</span>: <span class="string">&quot;text&quot;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">&quot;#dd&quot;</span>).html(result);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//$(&quot;#dd&quot;).html(result).css(&#123;width:&quot;100px&quot;,height:&quot;100px&quot;,border:&quot;1px solid red&quot;&#125;).hide().slideDown(4000,function()&#123;alert(&quot;加载完毕&quot;)&#125;);</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;);</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">		&#125;);	</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>异步请求测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里的<code>dataType</code>属性，表示当前ajax请求，希望服务器返回的响应中的数据为text文本类型</p>
</blockquote>
<p><img src="image/image-20201009001943945.png" alt="image-20201009001943945"></p>
<p>使用jquery中封装的ajax函数，发送POST请求：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/jquery/jquery-1.8.3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#btn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">			$.ajax(&#123;</span></span><br><span class="line"><span class="javascript">				<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">url</span>: <span class="string">&quot;/ajax-test&quot;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="comment">//data: &quot;username=lucy&quot;,</span></span></span><br><span class="line"><span class="javascript">             <span class="attr">data</span>: &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;jack&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">				<span class="attr">dataType</span>: <span class="string">&quot;text&quot;</span>,</span></span><br><span class="line"><span class="javascript">				<span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">					$(<span class="string">&quot;#dd&quot;</span>).html(result);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//$(&quot;#dd&quot;).html(result).css(&#123;width:&quot;100px&quot;,height:&quot;100px&quot;,border:&quot;1px solid red&quot;&#125;).hide().slideDown(4000,function()&#123;alert(&quot;加载完毕&quot;)&#125;);</span></span></span><br><span class="line"><span class="javascript">				&#125;</span></span><br><span class="line"><span class="javascript">			&#125;);</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">		&#125;);		</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>异步请求测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，<code>data</code>属性，用来指定本次POST请求中所携带的数据，另外如果是GET请求，也可以使用该属性来指定携带的数据，它会自动将数据添加到请求的URI后面的</p>
<p>此处post和get传参没有明确区分</p>
</blockquote>
<h3 id="5-5-get"><a href="#5-5-get" class="headerlink" title="5.5 get"></a>5.5 get</h3><blockquote>
<p>jquery中，专门封装了get函数，用来简化ajax中的get请求的发送</p>
</blockquote>
<p>例如，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/jquery/jquery-1.8.3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#btn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">            <span class="comment">//第二个参数，也可以写成 &quot;username=tom&quot; 或者 &#123;username:&quot;tom&quot;&#125;</span></span></span><br><span class="line"><span class="javascript">			$.get(<span class="string">&quot;/ajax-test&quot;</span>,&#123;<span class="attr">username</span>:<span class="string">&quot;tom&quot;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#dd&quot;</span>).html(result);</span></span><br><span class="line"><span class="javascript">				</span></span><br><span class="line"><span class="javascript">			&#125;,<span class="string">&quot;text&quot;</span>);</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">		&#125;);</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>异步请求测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中，get函数的四个参数分别为：</p>
<p><img src="image/image-20201009002944254.png" alt="image-20201009002944254"></p>
<blockquote>
<p>注意，除了第一个参数url地址后，后面三个参数都是可以不写的</p>
</blockquote>
<h3 id="5-6-post"><a href="#5-6-post" class="headerlink" title="5.6 post"></a>5.6 post</h3><blockquote>
<p>jquery中，专门封装了post函数，用来简化ajax中的post请求的发送</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/jquery/jquery-1.8.3.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">		$(<span class="string">&quot;#btn&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">            <span class="comment">//第二个参数，也可以写成 &quot;username=briup&quot; 或者 &#123;username:&quot;briup&quot;&#125;</span></span></span><br><span class="line"><span class="javascript">			$.post(<span class="string">&quot;/ajax-test&quot;</span>,&#123;<span class="attr">username</span>:<span class="string">&quot;briup&quot;</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">				$(<span class="string">&quot;#dd&quot;</span>).html(result);</span></span><br><span class="line"><span class="javascript">				</span></span><br><span class="line"><span class="javascript">			&#125;,<span class="string">&quot;text&quot;</span>);</span></span><br><span class="line"><span class="javascript">			</span></span><br><span class="line"><span class="javascript">		&#125;);		</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">	&#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>异步请求测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以看出，post函数的用法和get函数是一样的，参数个数、顺序、类型都是相同的</p>
</blockquote>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><strong>CheckServlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/checkServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">		<span class="comment">//模拟数据库数据</span></span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">		list.add(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">		list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">		<span class="comment">//ajax携带用户名 校验</span></span><br><span class="line">		String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">		<span class="comment">//根据输入的用户名 比对数据</span></span><br><span class="line">		resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span>(list.contains(username)) &#123;</span><br><span class="line">			<span class="comment">//如果存在,返回提示信息</span></span><br><span class="line">			resp.getWriter().write(<span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;用户名已经存在&lt;/font&gt;&quot;</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>login.html</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">	pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/jq/jquery-1.8.3.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">	<span class="function">function <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 发送ajax请求 ,校验用户名</span></span><br><span class="line">		<span class="keyword">var</span> value = $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">		<span class="comment">//alert(value);</span></span><br><span class="line">		$.get(<span class="string">&quot;/check&quot;</span>, &#123;</span><br><span class="line">			<span class="string">&quot;username&quot;</span> : value</span><br><span class="line">		&#125;, function(result) &#123;</span><br><span class="line">			<span class="comment">//alert(result);</span></span><br><span class="line">			$(<span class="string">&quot;#tip&quot;</span>).html(result);</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;form action=<span class="string">&quot;/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">		用户名 &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> onblur=<span class="string">&quot;check();&quot;</span> id=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">		&lt;span id=<span class="string">&quot;tip&quot;</span>&gt;&lt;/span&gt;&lt;br&gt; 密码: &lt;input type=<span class="string">&quot;password&quot;</span></span><br><span class="line">			name=<span class="string">&quot;password&quot;</span>&gt;&lt;br&gt; &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;注册&quot;</span>&gt;</span><br><span class="line">	&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>







<p>json格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.8.3.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> value = $(<span class="string">&quot;#username&quot;</span>).val();</span></span><br><span class="line"><span class="javascript">        $.get(<span class="string">&quot;checkName&quot;</span>,&#123;<span class="string">&quot;username&quot;</span>:value&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#usernameTip&quot;</span>).text(data.tip).hide().css(&#123;<span class="string">&quot;color&quot;</span>:data.color&#125;).slideDown(<span class="number">2000</span>).slideUp(<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="string">&quot;json&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span> = <span class="string">&quot;username&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;checkName()&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;usernameTip&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: vanse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/10/18-10-18-13:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>：com.briup.web.servlet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>：1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/checkName&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckName</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="comment">// resp.setContentType(&quot;text/plain;charset=utf-8&quot;);</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String msg = <span class="string">&quot;  &#123;\&quot;tip\&quot;:\&quot;用户名已经存在\&quot;,\&quot;color\&quot;:\&quot;red\&quot;&#125; &quot;</span>;</span><br><span class="line">        String msg2 = <span class="string">&quot;  &#123;\&quot;tip\&quot;:\&quot;可以注册\&quot;,\&quot;color\&quot;:\&quot;green\&quot;&#125; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(list.contains(username))&#123;</span><br><span class="line">            resp.getWriter().write(msg);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            resp.getWriter().write(msg2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>briup</tag>
      </tags>
  </entry>
  <entry>
    <title>briup-mybatis</title>
    <url>/archives/briup/briup-mybatis.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第一章-基础"><a href="#第一章-基础" class="headerlink" title="第一章-基础"></a>第一章-基础</h1><h2 id="0-jdbc"><a href="#0-jdbc" class="headerlink" title="0.jdbc"></a>0.jdbc</h2><p><code>jdbc 问题分析</code></p>
<p>1、数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。 </p>
<p>2、Sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变 java 代码。 </p>
<p>3、使用 preparedStatement 向占有位符号传参数存在硬编码，因为 sql 语句的 where 条件不一定，可能 多也可能少，修改 sql 还要修改代码，系统不易维护。 </p>
<p>4、对结果集解析存在硬编码（查询列名），sql 变化导致解析代码变化，系统不易维护，如果能将数据库记 录封装成 pojo 对象解析比较方便。</p>
<p><img src="image/image-20210914092945449.png" alt="image-20210914092945449"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">结构一样,sql不一样	</span><br><span class="line"><span class="meta">Jdbc-&gt;</span><span class="bash">JdbcUtil-&gt;QueryRunner-&gt;  Mybatis</span></span><br><span class="line">				JdbcTemplate   Hibernate</span><br><span class="line">				...</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">配置文件-&gt; mybatis加载配置文件 -&gt; SqlSesson -&gt; 调用sql</span><br><span class="line"></span><br><span class="line">加载配置文件</span><br><span class="line">	InputStream in = Resources.getRresourceAsStream(&quot;&quot;);</span><br><span class="line"></span><br><span class="line">获取session</span><br><span class="line">	SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);</span><br><span class="line">	SqlSession session = factory.openSqlSession();</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">// 调用sql	</span><br><span class="line">	// session.insert(&quot;com.briup.dao.student.InsertStudent&quot;,student);</span><br><span class="line">调用Mapper接口</span><br><span class="line">	StudentMapper studentMapper= session.getMapper(StudentMapper.class);</span><br><span class="line">	studentMapper.insertStudent(student);</span><br><span class="line">	</span><br><span class="line">该方式可能不会出错</span><br><span class="line">	映射器:</span><br><span class="line">		映射接口和映射文件相关联</span><br><span class="line">		StudentMapper&#123;					 </span><br><span class="line">			insertStudent(Student);			</span><br><span class="line">		&#125;</span><br><span class="line">		StudentMapper.xml</span><br><span class="line">			 &lt;insert id=&quot;insert&quot; param=&quot;Student&quot;&gt;</span><br><span class="line">			 &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">主配置文件</span><br><span class="line">日志</span><br><span class="line">封装</span><br><span class="line">映射文件</span><br></pre></td></tr></table></figure>



<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><h3 id="1-1起源"><a href="#1-1起源" class="headerlink" title="1.1起源"></a>1.1起源</h3><p><code>MyBatis</code> 是一款优秀的持久层开源框架，它支持自定义 SQL、存储过程以及高级映射。<code>MyBatis</code>免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。<code>MyBatis</code>可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old java Objects，普通老式 Java 对象）为数据库中的记录。</p>
<p>MyBatis的前身是iBATIS，iBATIS于2002年由ClintonBegin创建。MyBatis3是iBATIS的全新设计，支持注解和Mapper。</p>
<p>MyBatis流行的主要原因在于它的简单性和易使用性。在Java应用程序中，数据持久化层涉及到的工作有：</p>
<ul>
<li>将从数据库查询到的数据生成所需要的Java对象</li>
<li>将Java对象中的数据通SQL持久化到数据库中</li>
</ul>
<p>MyBatis通过抽象底层的JDBC代码，自动化封装SQL结果集产生Java对象、Java对象的数据持久化数据库中的过程使得对SQL的使用变得容易。</p>
<h3 id="1-2-获取"><a href="#1-2-获取" class="headerlink" title="1.2 获取"></a>1.2 获取</h3><p>iBATIS一词来源于internet和abatis的组合，是一个在2002年发起的开放源代码项目。于2010年6月16号被谷歌托管，改名为MyBatis。</p>
<p>ibatis的官网 <a href="http://ibatis.apache.org/">http://ibatis.apache.org/</a> 进去官网会看到下面提示:</p>
<p>apache ibatis is retired at the apache software foundation (2010/06/16) the original project team has moved to mybatis hosted at google code. see <a href="http://www.mybatis.org/">http://www.mybatis.org/</a> for more.然而<a href="http://www.mybatis.org/%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E4%B8%80%E7%9B%B4%E5%A4%84%E4%BA%8E%E6%89%93%E4%B8%8D%E5%BC%80%E7%8A%B6%E6%80%81">http://www.mybatis.org/这个地址一直处于打不开状态</a>…</p>
<p>但是我们最终是可以在github中找到mybatis的相关下载的:</p>
<p>mybatis在github中的地址</p>
<p><a href="https://github.com/mybatis/mybatis-3">https://github.com/mybatis/mybatis-3</a></p>
<p>最新版本的mybatis的下载地址</p>
<p><a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p>
<p>doc文档</p>
<p><a href="http://www.mybatis.org/mybatis-3/">http://www.mybatis.org/mybatis-3/</a></p>
<h3 id="1-3-特点"><a href="#1-3-特点" class="headerlink" title="1.3 特点"></a>1.3 特点</h3><p>通过上面我们了解到Mybatis的主要功能是<strong>数据持久化</strong>，这个时候你可能会回想起之前的<strong>JDBC</strong>课程，既然我们已经掌握了JDBC为什么还要再去学习Mybatis呢？</p>
<p>主要原因有以下几个方面：</p>
<ol>
<li>Mybatis消除了大量的JDBC冗余代码</li>
<li>Mybatis有低的学习曲线</li>
<li>Mybatis能很好地与传统数据库协同工作</li>
<li>Mybatis可以接受SQL语句</li>
<li>Mybatis提供了与Spring框架的集成支持</li>
<li>Mybatis提供了与第三方缓存类库的集成支持</li>
<li>Mybatis引入了更好的性能</li>
</ol>
<p>1）它消除了大量的JDBC冗余代码</p>
<p>Java通过JDBC的API来操作关系型数据库，但是JDBC是一个非常底层的API，我们需要书写大量的代码来完成对数据库的操作。例如一个插入操作(参考之前学习JDBC时候的代码实例)，但是使用mybatis来完成相同的插入操作要简单方便灵活的多。</p>
<p>特别之处的是，MyBatis还提供了其他的一些特性来简化持久化逻辑的实现，它支持复杂的SQL结果集数据映射到嵌套的对象结构，它支持一对一和一对多的结果集和Java对象的映射，它支持根据输入的数据构建动态的SQL语句</p>
<p>2）它有低的学习曲线</p>
<p>MyBatis能够流行的首要原因之一在于它学习和使用起来非常简单，它取决于你Java和 SQL方面的知识。如果开发人员很熟悉Java和SQL，他们会发现MyBatis入门非常简单。</p>
<p>3）它能很好地与传统数据库协同工作</p>
<p>有时我们可能需要用不正规形式与传统数据库协同工作，使用成熟的ORM框架(例如大家熟知的Hibernate)有可能、但是很难跟传统数据库很好地协同工作，因为他们尝试将Java对象静态地映射到数据库的表上.而MyBatis是将查询的结果与Java对象映射起来，这使得MyBatis可以很好地与传统数据库协同工作。你可以根据面相对象的模型创建Java域对象，执行传统数据库的查询，然后将结果映射到对应的Java对象上。</p>
<p>4）它可以接受SQL语句</p>
<p>成熟的ORM框架鼓励使用实体对象和在其底层自动产生SQL语句。由于这种的SQL生成方式，我们有可能不能够利用到数据库的一些特有的特性。Hibernate允许执行本地SQL，但是这样会打破持久层和数据库独立的原则。MyBatis框架接受SQL语句，而不是将其对开发人员隐藏起来。由于MyBatis不会产生任何的SQL语句，所以开发人员就要准备SQL语句，这样就可以充分利用数据库特有的特性并且可以准备自定义的查询。另外，MyBatis 对存储过程也提供了支持。</p>
<p>5）它提供了与Spring框架的集成支持</p>
<p>MyBatis提供了与流行的依赖注入框架Spring的开包即用的集成支持，这将进一步简化MyBatis的使用。</p>
<p>6）它提供了与第三方缓存类库的集成支持</p>
<p>MyBatis有内建的SqlSession级别的缓存机制，用于缓存Select语句查询出来的结果。除此之外，MyBatis提供了与多种第三方缓存类库的集成支持，如EHCache，OSCache，Hazelcast等。</p>
<p>7）它引入了更好的性能</p>
<p>性能问题是关乎软件应用成功与否的关键因素之一。为了达到更好的性能，需要考虑很多事情，而对很多应用而言，数据持久化层是整个系统性能的关键。MyBatis支持数据库连接池，消除了为每一个请求创建一个数据库连接的开销,MyBatis提供了内建的缓存机制，在SqlSession级别提供了对SQL查询结果的缓存。即:如果你调用了相同的select查询，MyBatis 会将放在缓存的结果返回，而不会去再查询数据库。MyBatis框架并没有大量地使用代理机制，因此对于其他的过度地使用代理的ORM框架而言，MyBatis可以获得更好的性能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.datasource.pooled.PooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.Environment;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.transaction.TransactionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.transaction.jdbc.JdbcTransactionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.briup.mappers.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConn</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		PooledDataSource dataSource = <span class="keyword">new</span> PooledDataSource();</span><br><span class="line">		dataSource.setDriver(<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>);</span><br><span class="line">		dataSource.setUrl(<span class="string">&quot;jdbc:oracle:thin:@127.0.0.1:1521:XE&quot;</span>);</span><br><span class="line">		dataSource.setUsername(<span class="string">&quot;briup&quot;</span>);</span><br><span class="line">		dataSource.setPassword(<span class="string">&quot;briup&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		TransactionFactory transactionFactory = <span class="keyword">new</span> JdbcTransactionFactory();</span><br><span class="line">		</span><br><span class="line">		Environment environment = <span class="keyword">new</span> Environment(<span class="string">&quot;development&quot;</span>, transactionFactory, dataSource);</span><br><span class="line">		</span><br><span class="line">		Configuration configuration = <span class="keyword">new</span> Configuration(environment);</span><br><span class="line">		</span><br><span class="line">		configuration.addMapper(UserMapper.class);</span><br><span class="line">		</span><br><span class="line">		SqlSessionFactory sqlSessionFactory = </span><br><span class="line">				<span class="keyword">new</span> SqlSessionFactoryBuilder().build(configuration);</span><br><span class="line">		SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">		UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">		</span><br><span class="line">		List&lt;User&gt; userList = mapper.findAll();</span><br><span class="line">		System.out.println(userList);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="1-4-案例"><a href="#1-4-案例" class="headerlink" title="1.4 案例"></a>1.4 案例</h3><p>在实例开始之前我们先做一些准备工作。先来建表和建一个实体类。(==创建java项目即可==)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> students;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students ( </span><br><span class="line">	id number <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">	name varchar2(<span class="number">50</span>) , </span><br><span class="line">	email varchar2(<span class="number">50</span>) , </span><br><span class="line">	dob <span class="type">date</span> </span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id; </span><br><span class="line">	<span class="keyword">private</span> String name; </span><br><span class="line">	<span class="keyword">private</span> String email; </span><br><span class="line">	<span class="keyword">private</span> Date dob;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> email;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getDob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dob;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDob</span><span class="params">(Date dob)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.dob = dob;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer id, String name, String email, Date dob)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">		<span class="keyword">this</span>.dob = dob;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-1-jar包导入"><a href="#1-4-1-jar包导入" class="headerlink" title="1.4.1 jar包导入"></a>1.4.1 jar包导入</h4><blockquote>
<p>导入mybatis-jar/ojdbc.jar/junit.jar</p>
</blockquote>
<p>mybatis的核心包只有一个mybatis-3.x.x.jar,另外还有一些【可选】的依赖包(日志、代理等所需要的),在下载的压缩包中可以找到.也可以自行去下载。</p>
<p>如果是maven项目，只有引入依赖坐标即可：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="1-4-2-配置文件"><a href="#1-4-2-配置文件" class="headerlink" title="1.4.2 配置文件"></a>1.4.2 配置文件</h4><p>mybatis的配置文件一般来说名字是固定的，就叫<code>mybatis-config.xml</code>,其中包括数据库连接信息，类型别名,映射文件路径等等；直接创建在src目录下。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta">   <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.briup.pojo.Student&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt; </span></span><br><span class="line"><span class="comment">     &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/test&quot; /&gt; </span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span> /&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:oracle:thin:@127.0.0.1:1521:XE&quot;</span> /&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;briup&quot;</span> /&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;briup&quot;</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/briup/mappers/StudentMapper.xml&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h4 id="1-4-3-映射文件"><a href="#1-4-3-映射文件" class="headerlink" title="1.4.3 映射文件"></a>1.4.3 映射文件</h4><p>映射文件命名一般都是<code>XxxxMapper.xml</code>，<code>Xxxx</code>是对应的类的名字，这个xml文件中包括<code>Xxxx</code>类所对应的数据库表的各种增删改查sql语句。</p>
<p>例如:<code>StudentMapper.xml</code>文件中是<code>Student</code>类对应的表的各种<code>select</code> <code>insert</code> <code>update</code> <code>delete</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta">   <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span></span><br><span class="line">		SELECT * FROM STUDENTS</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">		SELECT ID,NAME, EMAIL</span><br><span class="line">		FROM STUDENTS WHERE ID=#&#123;Id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">		INSERT INTO STUDENTS(ID,NAME,EMAIL)</span><br><span class="line">		VALUES(#&#123;id &#125;,#&#123;name&#125;,#&#123;email&#125;)</span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h4 id="1-4-4-映射接口"><a href="#1-4-4-映射接口" class="headerlink" title="1.4.4 映射接口"></a>1.4.4 映射接口</h4><p>mybatis中的映射接口<code>XxxxMapper.java</code>(对<code>XxxxMapper.xml</code>中的sql语句进行映射)<br>mybatis中除了必须的jar包、各种xml配置文件之外,一般还需要有调用sql语句执行的接口XxxxMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123;</span><br><span class="line">	<span class="function">List&lt;Student&gt; <span class="title">findAllStudents</span><span class="params">()</span></span>; </span><br><span class="line">	<span class="function">Student <span class="title">findStudentById</span><span class="params">(Integer id)</span></span>; </span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这个名字依然可以叫StudentDao</p>
</blockquote>
<p>注意事项：</p>
<ol>
<li><p>接口中的方法的名字和XML文件定义的SQL映射语句的<code>id</code>值要相同</p>
</li>
<li><p>我们不需要去实现该接口,因为mybatis中提供了相应的方式在运行期间动态生成该接口的实现类对象.</p>
</li>
</ol>
<h4 id="1-4-5-测试"><a href="#1-4-5-测试" class="headerlink" title="1.4.5 测试"></a>1.4.5 测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.briup.dao.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.briup.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			InputStream inputStream = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">			SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">			SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">			StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">			Student s = <span class="keyword">new</span> Student(<span class="number">1</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;123@briup.com&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">			studentMapper.insertStudent(s);</span><br><span class="line">			sqlSession.commit();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-6-图解"><a href="#1-4-6-图解" class="headerlink" title="1.4.6 图解"></a>1.4.6 图解</h4><p><img src="image/image-20201019112222960.png" alt="image-20201019112222960"></p>
<blockquote>
<p>注意，该图描述了上述例子中的俩个过程，mybatis左边是配置的过程，mybatis右边是写代码的过程</p>
</blockquote>
<h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h2><h3 id="2-1-核心配置"><a href="#2-1-核心配置" class="headerlink" title="2.1 核心配置"></a>2.1 核心配置</h3><p>MyBatis最关键的组成部分是<code>SqlSessionFactory</code>，我们可以从中获取<code>SqlSession</code>， 并执行映射的SQL语句。要获取<code>SqlSessionFactory</code>对象，就必须要先读取 mybaits的核心配置文件<code>mybaits-config.xml</code></p>
<p>下面的 mybatis-config.xml展示了一个典型的MyBatis配置文件的内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;application.properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;db_user&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;verysecurepwd&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.briup.pojo.Student&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.briup.pojo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.mybatis3.typehandlers.PhoneTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.briup.typehandlers&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;production&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;MANAGED&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;JNDI&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;data_source&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java:comp/jdbc/MyBatisDemoDS&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/briup/mappers/StudentMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///D:/mybatis/mappers/StudentMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.dao.StudentMapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>mybaits-config.xml中的常见标签元素有：</p>
<ul>
<li><code>&lt;environments&gt;</code></li>
<li><code>&lt;dataSource&gt;</code></li>
<li><code>&lt;transactionManager&gt;</code></li>
<li><code>&lt;properties&gt;</code></li>
<li><code>&lt;typeAliases&gt;</code></li>
<li><code>&lt;typeHandlers&gt;</code></li>
<li><code>&lt;settings&gt;</code></li>
<li><code>&lt;mappers&gt;</code></li>
</ul>
<h4 id="2-1-1-environments"><a href="#2-1-1-environments" class="headerlink" title="2.1.1 environments"></a>2.1.1 environments</h4><p><code>environments</code>是配置mybatis当前工作的数据库环境的地方</p>
<p>MyBatis可以支持配置多个dataSource环境，可以将应用部署到不同的环境上，如DEV(开发环境)，TEST（测试环境），QA（质量评估环境）,UAT(用户验收环境),PRODUCTION（生产环境），可以通过将默认environments值设置成想要的environment的id值.</p>
<p>如果你的应用需要连接多个数据库，你需要将每个数据库配置成独立的环境，并且为每一个数据库创建一个SqlSessionFactory</p>
<p>例如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;shoppingcart&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;shoppingcart&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;MANAGED&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;JNDI&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;data_source&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java:comp/jdbc/ShoppingcartDS&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;reports&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transaction</span> <span class="attr">Managertype</span>=<span class="string">&quot;MANAGED&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;JNDI&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;data_source&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java:comp/jdbc/ReportsDS&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以为以上每个环境创建一个SqlSessionFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inputStream = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//默认的环境 default</span></span><br><span class="line">SqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"><span class="comment">//统计明细的环境 cart</span></span><br><span class="line">SqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream, <span class="string">&quot;shoppingcart&quot;</span>);</span><br><span class="line"><span class="comment">//统计报表的环境 report</span></span><br><span class="line">SqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream, <span class="string">&quot;reports&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:一个数据库环境对应一个SqlSessionFactory对象;对于environments,我们可以在其中配置多个environment子元素,同时还需要在environment中配置dataSource和transactionManager元素。</p>
</blockquote>
<h4 id="2-1-2-dataSource"><a href="#2-1-2-dataSource" class="headerlink" title="2.1.2 dataSource"></a>2.1.2 dataSource</h4><p><code>dataSource</code>表示的是数据源;至少会包括该连接数据库的四种信息.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>dataSource的类型type属性可以配置成其内置类型之一，如UNPOOLED，POOLED，JNDI。</p>
<p>如果将类型设置成UNPOOLED，MyBatis会为每一个数据库操作创建一个新的连接，使用完了并关闭它，该方式适用于只有小规模数量并发用户的简单应用程序上。</p>
<p>如果将属性设置成POOLED，MyBatis会创建一个数据库连接池，连接池中的一个连接将会被用作数据库操作(分配，管理，释放)。一旦数据库操作完成，MyBatis会将此连接返回给连接池。</p>
<p>如果将类型设置成JNDI(Java Naming and Directory Interface , Java命名和目录接口, 是SUN公司提供的一种标准的Java命名系统接口)，MyBatis从在应用服务器向配置好的JNDI数据源dataSource获取数据库连接。在生产环境中，优先考虑这种方式。</p>
<h4 id="2-1-3-transactionManager"><a href="#2-1-3-transactionManager" class="headerlink" title="2.1.3 transactionManager"></a>2.1.3 transactionManager</h4><p>MyBatis支持两种类型的<strong>事务管理器</strong>：JDBC 和 MANAGED.</p>
<p>JDBC事务管理器的使用，是在<code>JDBC程序</code>负责管理数据库连接的生命周期（提交、回退等等）的时候。如果将TransactionManager 属性设置成JDBC，MyBatis内部将使用JdbcTransactionFactory类创建TransactionManager。例如，部署到ApacheTomcat的应用程序，需要应用程序自己管理事务。</p>
<p>MANAGED 事务管理器的使用，是在<code>应用服务器</code>负责管理数据库连接生命周期的时候。如果TransactionManager属性设置成MANAGED时，MyBatis内部使用ManagedTransactionFactory 类创建事务管理器TransactionManager。例如，当一个Java EE的应用程序部署在类似JBoss，WebLogic，GlassFish等应用服务器上时，它们会使用EJB进行应用服务器的事务管理能力。在这些管理环境中，你可以使用MANAGED事务管理器。</p>
<blockquote>
<p>注：Managed 是托管的意思，即我们编写的应用程序本身不去管理事务，而是把事务管理交给应用所在的服务器进行管理。</p>
</blockquote>
<h4 id="2-1-4-properties"><a href="#2-1-4-properties" class="headerlink" title="2.1.4 properties"></a>2.1.4 properties</h4><p>属性配置元素properties可以将配置值写死到mybatis-config.xml中,也可以具体到一个属性文件中,并且使用属性文件的key名作为占位符。</p>
<p>在上述的配置中，我们将数据库连接属性配置到了application.properties文件中，并且为driver，URL等属性使用了占位符.</p>
<p>在applications.properties文件中配置数据库连接参数，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdbc.driverClassName=oracle.jdbc.driver.OracleDriver</span><br><span class="line">jdbc.url=jdbc:oracle:thin:@<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1521</span>:XE</span><br><span class="line">jdbc.username=briup</span><br><span class="line">jdbc.password=briup </span><br></pre></td></tr></table></figure>

<p>在mybatis-config.xml文件中，为属性使用application.properties文件中定义的占位符：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 读取application.properties文件中的数据key-value的形式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;application.properties&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 注意:是applications.properties文件中的值优先级高 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;briup&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbc.password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;briup&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-5-typeAliases"><a href="#2-1-5-typeAliases" class="headerlink" title="2.1.5 typeAliases"></a>2.1.5 typeAliases</h4><p>在SQLMapper配置文件中，对于resultType和parameterType属性值，我们需要使用JavaBean 的完全限定名。</p>
<p>例如:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> </span></span><br><span class="line"><span class="tag">	<span class="attr">resultType</span>=<span class="string">&quot;com.briup.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">	 SELECT  ID, NAME, EMAIL, DOB</span><br><span class="line">	 FROM STUDENTS WHERE id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.briup.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">	 UPDATE STUDENTS</span><br><span class="line">	 SET NAME=#&#123;name&#125;, EMAIL=#&#123;email&#125;, DOB=#&#123;dob&#125;</span><br><span class="line">	 WHERE id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注:parameterType表示将来调用这个sql语句的时候所传的参数的类型(参数值或者参数对象里面的属性值 用来替换sql语句中的占位符)</p>
</blockquote>
<p><code>resultType</code>表示将来调用这个sql语句的时候所返回的结果的类型(方便mybatis给我们自动封装结果集)</p>
<p>这里我们为<code>resultType</code>和<code>parameterType</code>属性值设置为Student类型的完全限定名：com.briup.com.Student</p>
<p>我们可以为完全限定名取一个别名（alias），然后就可以在需要使用完全限定名的地方使用别名，而不是到处使用完全限定名。如下所示，为完全限定名起一个别名：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.briup.pojo.Student&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.briup.pojo.Teacher&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在SQLMapper映射文件中, 如下使用Student的别名：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">	 SELECT  ID, NAME, EMAIL, DOB</span><br><span class="line">	 FROM STUDENTS</span><br><span class="line">	WHERE id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">	 UPDATE STUDENTS</span><br><span class="line">	 SET NAME=#&#123;name&#125;, EMAIL=#&#123;email&#125;, DOB=#&#123;dob&#125;</span><br><span class="line">	 WHERE id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然也可以不用为每一个JavaBean单独定义别名,你可以为配置出需要取别名的类的所在的包(package)，MyBatis会自动扫描包内定义的类，然后分别为每个类注册一个小写字母开头的简单类名形式的别名。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.briup.pojo&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果Student.java和 Teacher.java 定义在com.briup.pojo包中，则 com.briup.pojo.Student的别名会被注册为student。而com.briup.pojo.Teacher别名将会被注册为teacher</p>
<p>还有另外一种方式为JavaBeans起别名，使用注解 <code>@Alias</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;stu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: </p>
<p>@Alias注解将会覆盖配置文件中的&lt;typeAliases&gt;定义。</p>
<p>@Alias 要和<code>&lt;package name=&quot;&quot;/&gt;</code>标签配合使用,Mybatis会自动查看指定包内的类别名注解,如果没有这个注解,那么默认的别名就是类的名字。</p>
</blockquote>
<h4 id="2-1-6-typeHandlers"><a href="#2-1-6-typeHandlers" class="headerlink" title="2.1.6 typeHandlers"></a>2.1.6 typeHandlers</h4><p>当MyBatis将一个Java对象作为输入参数执行INSERT语句操作时，它会创建一个PreparedStatement对象，并且使用setXXX()方法对?号占位符设置相应的参数值 。这里，XXX可以是int，String，Date 等 Java对象属性类型的任意一个。示例如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">	 INSERT INTO STUDENTS(id,NAME,EMAIL,DOB)</span><br><span class="line">	 VALUES(#&#123;id&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;dob&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>为执行这个语句，MyBatis将采取以下一系列动作，创建一个有占位符的PreparedStatement接口，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PreparedStatement ps = connection.prepareStatement(<span class="string">&quot;INSERT INTO STUDENTS(id,NAME,EMAIL,DOB) VALUES(?,?,?,?)&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>检查Student对象的属性studId的类型，然后使用合适setXXX方法去设置参数值。这里studId是Integer类型，所以会使用setInt()方法：ps.setInt(1,student.getStudId());类似地，对于name和email属性都是String类型MyBatis使用setString()方法设置参数。</p>
<blockquote>
<p>   注意： MyBaits会将java.util.Date类型转换为java.sql.Timestamp并设值：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ps.setTimestamp(<span class="number">4</span>, <span class="keyword">new</span> Timestamp((student.getDob()).getTime()));</span><br></pre></td></tr></table></figure>

<p>MyBatis是怎么知道对于Integer类型属性使用setInt()和String类型属性使用setString()方法呢？其实MyBatis是通过使用类型处理器typeHandlers来决定这么做的。</p>
<p>MyBatis对于以下的类型使用内置的类型处理器：所有的基本数据类型、基本类型的包装类型、 byte[]、java.util.Date、java.sql.Date、java.sql.Time、java.sql.Timestamp、java枚举类型等。所以当MyBatis发现属性的类型属于上述类型，他会使用对应的类型处理器将值设置到PreparedStatement中，同样地，当SQL结果集封装成java类对象的时候，也有类似的过程。 </p>
<p>那如果有一个自定义的类型，怎么存储到数据库呢？示例如下：假设表STUDENTS 有一个 PHONE 字段，类型为 VARCHAR2(15)，而 Student类有一个自定义类型属性phone(PhoneNumber类) </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> phone varchar2(<span class="number">15</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">drop</span> <span class="keyword">column</span> phone;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String countryCode;</span><br><span class="line">	<span class="keyword">private</span> String stateCode;</span><br><span class="line">	<span class="keyword">private</span> String number;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PhoneNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PhoneNumber</span><span class="params">(String countryCode, String stateCode, String number)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.countryCode = countryCode;</span><br><span class="line">		<span class="keyword">this</span>.stateCode = stateCode;</span><br><span class="line">		<span class="keyword">this</span>.number = number;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneNumber</span><span class="params">(String str)</span></span>&#123; </span><br><span class="line">        <span class="comment">// 如果 == null</span></span><br><span class="line">        <span class="keyword">if</span>(str!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String[] args = str.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="keyword">this</span>.countryCode = 	args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">this</span>.stateCode = 	args[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">this</span>.number = 		args[<span class="number">2</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.countryCode = 	args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">this</span>.stateCode = 	args[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">this</span>.number = 		args[<span class="number">2</span>] </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getAsString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> countryCode + <span class="string">&quot;-&quot;</span> + stateCode + <span class="string">&quot;-&quot;</span> + number;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// Setters and getters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> String email; </span><br><span class="line">    <span class="keyword">private</span> Date dob;</span><br><span class="line">    <span class="keyword">private</span> PhoneNumber phoneNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>xml配置:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">   <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phoneNumber&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM STUDENTS</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        SELECT ID, NAME, EMAIL,PHONE as phoneNumber</span><br><span class="line">        FROM STUDENTS WHERE ID=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO STUDENTS(ID,NAME,EMAIL,PHONE)</span><br><span class="line">        VALUES(#&#123;id &#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;phoneNumber&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意自动映射 PHONE as phoneNumber</p>
</blockquote>
<p>这里，参数对象中的属性phone的值需要传递给#{phone}；而参数对象的属性phone是 PhoneNumber类型。但是，MyBatis 并不知道该怎样来处理这个类型的对象。</p>
<p>为了让MyBatis明白怎样处理这个自定义的Java对象类型，如PhoneNumber，我们可以创建一个自定义的类型处理器,MyBatis提供了抽象类<code>BaseTypeHandler&lt;T&gt;</code> ，我们可以继承此类创建自定义类型处理器。</p>
<p>代码如下所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.typehandler;</span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"><span class="keyword">import</span> com.briup.pojo.PhoneNumber;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">PhoneNumber</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//遇到PhoneNumber参数的时候应该如何在ps中设置值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, PhoneNumber parameter, JdbcType jdbcType)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ps.setString(i, parameter.getAsString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询中遇到PhoneNumber类型的应该如何封装(使用列名封装)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PhoneNumber <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneNumber(rs.getString(columnName));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询中遇到PhoneNumber类型的应该如何封装(使用列的下标)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PhoneNumber <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneNumber(rs.getString(columnIndex));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//CallableStatement使用中遇到了PhoneNumber类型的应该如何封装</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PhoneNumber <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PhoneNumber(cs.getString(columnIndex));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:使用ps.setString()和rs.getString()方法是 :因为在数据库的表中phone列是VARCHAR类型。</p>
</blockquote>
<p>最后一旦我们实现了自定义的类型处理器，我们需要在mybatis-config.xml中注册它：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;application.properties&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.briup.typehandlers.PhoneTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注册PhoneTypeHandler后, MyBatis就能够将Phone类型的对象值存储到VARCHAR类型的列上。</p>
</blockquote>
<h4 id="2-1-7-settings"><a href="#2-1-7-settings" class="headerlink" title="2.1.7 settings"></a>2.1.7 settings</h4><blockquote>
<p>注意:大多数情况下，【这些参数使用它们的默认值即可】</p>
</blockquote>
<p> 为满足应用特定的需求，MyBatis默认的全局参数设置可以被覆盖掉，如下所示： </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个配置使全局的映射器启用或禁用缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许JDBC支持生成的键。需要适合的驱动。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定MyBatis如何自动映射列到字段/属性。PARTIAL只会自动映射简单、没有嵌套的结果。FULL会自动映射任意复杂的结果（嵌套的或其他情况） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置默认的执行器。SIMPLE执行器没有什么特别之处。REUSE执行器重用预处理语句。BATCH执行器重用语句和批量更新 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置超时时间，它决定驱动等待一个数据库响应的时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25000&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 允许在嵌套语句中使用分页（RowBounds）默认false --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。默认false --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定对象的哪个方法触发一次延迟加载。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode ,toString&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CGLIB | JAVASSIST 默认JAVASSIST(MyBatis 3.3 or above) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;proxyFactory&quot;</span> <span class="attr">value</span>=<span class="string">&quot;JAVASSIST&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当启用时，对任意延迟属性的调用会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J &quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定 MyBatis 增加到日志名称的前缀。值可以是任意字符串 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logPrefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J &quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。 默认false--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;callSettersOnNulls&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false &quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-1-8-mappers"><a href="#2-1-8-mappers" class="headerlink" title="2.1.8 mappers"></a>2.1.8 mappers</h4><p> Mapper文件中包含了要执行的SQL语句，我们需要在mybatis-config.xml文件中配置Mapper文件的位置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/briup/mappers/StudentMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///D:/mybatisdemo/app/mappers/StudentMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.dao.StudentMapper&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.briup.mappers&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上每一个&lt;mapper&gt; 标签都可以从不同类型的资源中加载映射mapper：</p>
<ul>
<li>resource属性用来指定在classpath中的mapper文件。</li>
<li>url属性用来通过完全文件系统路径或者web URL地址来指向mapper文件 </li>
<li>class属性用来指向一个mapper接口<ul>
<li>需要注解sql</li>
<li>或者法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。</li>
</ul>
</li>
<li>package属性用来指向可以找到Mapper接口的包名 (需要注解sql)<ul>
<li>需要注解sql</li>
<li>或者法要求 mapper 接口名称和 mapper 映射文件名称相同，且放在同一个目录中。</li>
</ul>
</li>
</ul>
<h3 id="2-2-日志配置"><a href="#2-2-日志配置" class="headerlink" title="2.2 日志配置"></a>2.2 日志配置</h3><p>Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一：</p>
<ul>
<li><strong>SLF4J</strong></li>
<li><strong>Apache Commons Logging</strong></li>
<li><strong>Log4j 2</strong></li>
<li><strong>Log4j</strong></li>
<li><strong>JDK logging</strong></li>
</ul>
<p>MyBatis 内置日志工厂会基于运行时检测信息选择日志委托实现。它会（按上面罗列的顺序）使用第一个查找到的实现。当没有找到这些实现时，将会禁用日志功能。</p>
<p>如果想使用指定的日志实现，可以通过在 MyBatis 配置文件 mybatis-config.xml 里面添加一项 setting 来选择其它日志实现。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可选的值有：SLF4J、LOG4J、LOG4J2、JDK_LOGGING、COMMONS_LOGGING、STDOUT_LOGGING、NO_LOGGING，或者是实现了 <code>org.apache.ibatis.logging.Log</code> 接口，且构造方法以字符串为参数的类的完全限定名。</p>
<p>你也可以调用以下任一方法来选择日志实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.logging.LogFactory.useSlf4jLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useLog4JLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useJdkLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useCommonsLogging();</span><br><span class="line">org.apache.ibatis.logging.LogFactory.useStdOutLogging();</span><br></pre></td></tr></table></figure>

<p>你应该在调用其它 MyBatis 方法之前调用以上的某个方法。另外，仅当运行时类路径中存在该日志实现时，日志实现的切换才会生效。</p>
<p>关于 SLF4J、Apache Commons Logging、Apache Log4J 和 JDK Logging 的更多信息，可以参考以下链接：</p>
<ul>
<li><a href="http://www.slf4j.org/">SLF4J</a></li>
<li><a href="http://commons.apache.org/logging">Apache Commons Logging</a></li>
<li><a href="http://logging.apache.org/log4j/">Apache Log4j 1.x and 2.x</a></li>
<li><a href="http://java.sun.com/j2se/1.4.1/docs/guide/util/logging/">JDK Logging API</a></li>
</ul>
<h4 id="2-2-1-添加-jar-包"><a href="#2-2-1-添加-jar-包" class="headerlink" title="2.2.1 添加  jar 包"></a>2.2.1 添加  jar 包</h4><p>由于我们使用的是 Log4J，我们要确保它的 jar 包可以被应用使用。为此，需要将 jar 包添加到应用的类路径中。Log4J 的 jar 包可以在上面的链接中下载。</p>
<p>对于 web 应用可以将 <code>log4j.jar</code> 添加到 <code>WEB-INF/lib</code> 目录下</p>
<h4 id="2-2-2-配置-Log4J"><a href="#2-2-2-配置-Log4J" class="headerlink" title="2.2.2 配置 Log4J"></a>2.2.2 配置 Log4J</h4><p>在应用的类路径中（例如src）创建一个名为 <code>log4j.properties</code> 的文件，文件的具体内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout </span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout </span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d [%-5p] %c - %m%n</span></span><br><span class="line"><span class="comment">#show sql</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">INFO  </span></span><br><span class="line"><span class="meta">log4j.logger.org.apache</span>=<span class="string">INFO  </span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Connection</span>=<span class="string">DEBUG  </span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG  </span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG </span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时运行mybatis程序后，就会有对应的日志输出了</p>
</blockquote>
<h3 id="2-3-基本封装"><a href="#2-3-基本封装" class="headerlink" title="2.3 基本封装"></a>2.3 基本封装</h3><p>每次读取配置文件,产生一个工厂对象SqlSessionFactory,然后再生成出SqlSession对象,这个过程虽然并不复杂,但是也都是一些重复的代码流程,所以我们可以对其进行一个简单的封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: vanse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/9/5-09-05-6:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>：com.briup.utils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>：1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SqlSessionUtil</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SqlSessionUtil.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (sqlSessionFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    InputStream in = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">                    sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSqlSession</span><span class="params">(<span class="keyword">boolean</span> autoCommint)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSessionFactory().openSession(autoCommint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">openSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> openSqlSession(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="第二章-映射"><a href="#第二章-映射" class="headerlink" title="第二章-映射"></a>第二章-映射</h1><h2 id="1-映射"><a href="#1-映射" class="headerlink" title="1.映射"></a>1.映射</h2><p>关系型数据库和SQL是经受时间考验和验证的数据存储机制。和其他的<code>ORM</code> 框架如Hibernate不同，MyBatis鼓励开发者可以直接使用数据库，而不是将其对开发者隐藏，因为这样可以充分发挥数据库服务器所提供的SQL语句的巨大威力。</p>
<p>与此同时，MyBaits消除了书写大量冗余代码的痛苦，它让使用SQL更容易。在代码里直接嵌套SQL语句是很差的编码实践，并且维护起来困难。MyBaits使用了映射文件或注解来配置SQL语句。</p>
<h3 id="1-1-调用"><a href="#1-1-调用" class="headerlink" title="1.1 调用"></a>1.1 调用</h3><p>我们已经看见了一些在映射器配置文件中配置基本的映射语句，以及怎样使用SqlSession对象调用它们的例子。现在让我们看一下在com.briup.mappers包中的StudentMapper.xml 配置文件内，是如何配置id为<code>findStudentById</code>的SQL语句的，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace+id 代表唯一sql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">       select id,name,email,phone as phoneNumber</span><br><span class="line">       from students where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，Student类中的属性名字和数据库中表中字段的名字是可以不一样的，例如类中可以是studId，而表中的字段名字为id</p>
</blockquote>
<p>我们可以通过下列代码调用findStudentById映射的SQL语句:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Student <span class="title">findStudentById</span><span class="params">(Integer studId)</span> </span>&#123;</span><br><span class="line">		SqlSession sqlSession=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line">			Student student = sqlSession.selectOne(<span class="string">&quot;www.baidu.com.findStudentById&quot;</span>, studId);</span><br><span class="line">			<span class="keyword">return</span> student;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			sqlSession.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以通过字符串形式来调用映射的SQL语句，形式为 namespace + sql语句id值，但是这种方式容易出错。你需要检查映射器配置文件中的定义，以保证你的输入参数类型和结果返回类型是有效的。</p>
<blockquote>
<p>注意，使用这种字符串的形式来调用sql语句，即使接口中没有对应的方法，也不会影响sql语句的执行。</p>
</blockquote>
<p>MyBatis通过使用映射器Mapper接口，提供了更好的调用映射sql语句的方式。</p>
<p>要求xml映射文件中的namespace属性值和映射接口的全限定名保持一致，同时：</p>
<ul>
<li>方法名和配置文件中sql语句的id值一致</li>
<li>方法参数类型和parameterType属性值一致</li>
<li>方法返回值类型和returnType属性值一致</li>
</ul>
<p>上述的StudentMapper.xml文件,我们可以创建一个映射器接口StudentMapper.java如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123;</span><br><span class="line">	<span class="function">Student <span class="title">findStudentById</span><span class="params">(Integer id)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在Student Mapper.xml映射器配置文件中，其名空间namespace应该跟StudentMapper接口的全限定名保持一致。另外，StudentMapper.xml中语句id, parameterType，returnType 应该分别和StudentMapper接口中的方法名，参数类型，返回值相对应。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        select id as studId, name, email, dob</span><br><span class="line">        from students</span><br><span class="line">        where id=#&#123;studId&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-映射sql"><a href="#1-2-映射sql" class="headerlink" title="1.2 映射sql"></a>1.2 映射sql</h3><p>MyBatis提供了多种元素来配置不同类型的语句，如SELECT，INSERT，UPDATE，DELETE。让我们看看如何具体配置映射语句</p>
<h4 id="1-2-1-INSERT"><a href="#1-2-1-INSERT" class="headerlink" title="1.2.1 INSERT"></a>1.2.1 INSERT</h4><p>一个INSERT语句可以在<code>&lt;insert&gt;</code>标签元素在映射器XML配置文件中配置，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO</span><br><span class="line">    STUDENTS(ID,NAME,EMAIL,PHONE)</span><br><span class="line">    VALUES(#&#123;id&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;phone&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>理解</strong></p>
<ul>
<li>parameterType<ul>
<li>代表参数的类型，因为我们要传入的是一个类的对象，所以类型就写类的全名称(或者别名)。</li>
</ul>
</li>
<li><code>#&#123;&#125;</code><ul>
<li>它代表占位符，相当于原来 jdbc 部分所学的?，都是用于执行语句时替换实际的数据。 具体的数据是由#{}里面的内容决定的。</li>
</ul>
</li>
<li>ognl表达式<ul>
<li>Object Graphic Navigation Language 对象图导航语言 </li>
<li>它是按照一定的语法格式来获取数据的。</li>
<li>语法格式就是使用 #{对象.对象}的方式</li>
</ul>
</li>
</ul>
<p>我们可以如下调用这个语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> count = sqlSession.insert(<span class="string">&quot;com.briup.dao.StudentMapper.insertStudent&quot;</span>, student);</span><br><span class="line"><span class="comment">//sqlSession.insert() 返回执行 INSERT 语句后所影响的行数。</span></span><br></pre></td></tr></table></figure>



<p>或者使用映射接口Mapper来调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123;</span><br><span class="line">	<span class="function">Student <span class="title">findStudentById</span><span class="params">(Integer id)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line"><span class="keyword">int</span> count = mapper.insertStudent(student); </span><br></pre></td></tr></table></figure>



<p><strong>特别注意</strong>，有些版本的mybatis中，如果插入的对象中某一个属性为<strong>null</strong>，那么这时候运行会报错：（无效的列类型），原因是null在mybaits的JdbcType中没有对应的类型</p>
<ul>
<li><p>解决方式1，可以在insert语句中指定参数的类型，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#&#123;phone&#125; </span><br><span class="line">修改为 </span><br><span class="line">#&#123;phone,jdbcType=VARCHAR&#125; </span><br></pre></td></tr></table></figure></li>
<li><p>解决方式2，可以在setting文件中进行统一的全局设置，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;NULL&quot; /&gt;</span><br><span class="line">或者</span><br><span class="line">&lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;VARCHAR&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>​            </p>
</li>
</ul>
<p>自动生成主键:</p>
<p>在上述的INSERT语句中，我们为可以自动生成（auto-generated）主键的列 ID 插入值。我们可以使用useGeneratedKeys和keyProperty属性让数据库生成auto_increment列的值，并将生成的值设置到其中一个输入对象属性内，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;studId&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO STUDENTS(NAME, EMAIL, PHONE)</span><br><span class="line">    VALUES(#&#123;name&#125;,#&#123;email&#125;,#&#123;phone&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>或者使用mysql的内置方法</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置保存时获取插入的 id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">	select last_insert_id();</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>这里ID列值将会被数据库自动生成(如mysql)，并且生成的值会被设置到student对象的studId属性上。</p>
<p>但是有些数据库如Oracle并不支持AUTO_INCREMENT列，其使用序列（SEQUENCE）来生成主键值。    </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> sequence my_seq;</span><br><span class="line"><span class="keyword">create</span> sequence my_seq;</span><br></pre></td></tr></table></figure>



<p>这里我们使用了<code>&lt;selectKey&gt;</code>子元素来生成主键值，并将值保存到Student对象的studId 属性上。属性order=”before”表示MyBatis将取得序列的下一个值作为主键值，并且在执行INSERT语句之前将值设置到studId属性上。(程序中的student对象的studId属性)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;studId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">        SELECT my_seq.nextval FROM DUAL</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    INSERT INTO STUDENTS(ID,NAME,EMAIL, PHONE)</span><br><span class="line">    VALUES(#&#123;studId&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;phone&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，SelectKey需要注意order属性，像MySQL、SQLServer等一类支持自动增长类型的数据库中，order需要设置为after才会取到正确的值，而Oracle这样取序列的情况，需要设置为before</p>
</blockquote>
<h4 id="1-2-2-UPDATE"><a href="#1-2-2-UPDATE" class="headerlink" title="1.2.2 UPDATE"></a>1.2.2 UPDATE</h4><p>一个UPDATE SQL语句可以在<code>&lt;update&gt;</code>元素在映射器XML配置文件中配置，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    UPDATE STUDENTS SET</span><br><span class="line">    NAME=#&#123;name&#125;, EMAIL=#&#123;email&#125;, PHONE=#&#123;phone&#125;</span><br><span class="line">    WHERE ID=#&#123;studId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以如下调用这个sql语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> updateCount = sqlSession.update(<span class="string">&quot;com.briup.dao.StudentMapper.updateStudent&quot;</span>, student);</span><br><span class="line"><span class="comment">//sqlSession.update();返回执行UPDATE语句之后影响的行数。</span></span><br></pre></td></tr></table></figure>



<p>或者使用映射接口Mapper来调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">updateStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line"><span class="keyword">int</span> updateCount = mapper.updateStudent(student);</span><br></pre></td></tr></table></figure>



<h4 id="1-2-3-DELETE"><a href="#1-2-3-DELETE" class="headerlink" title="1.2.3 DELETE"></a>1.2.3 DELETE</h4><p>一个DELETE语句可以在<code>&lt;delete&gt;</code>标签元素中进行配置，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM STUDENTS</span><br><span class="line">    WHERE ID=#&#123;studId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以如下调用这个sql语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">int</span> studId = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> deleteCount = sqlSession.delete(<span class="string">&quot;com.briup.dao.StudentMapper.deleteStudent&quot;</span>, studId);</span><br><span class="line"><span class="comment">//sqlSession.delete()返回 delete 语句执行后影响的行数。</span></span><br></pre></td></tr></table></figure>



<p>或者使用映射接口Mapper来调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> studId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line"><span class="keyword">int</span> deleteCount = mapper.deleteStudent(studId);</span><br></pre></td></tr></table></figure>



<h4 id="1-2-4-SELECT"><a href="#1-2-4-SELECT" class="headerlink" title="1.2.4 SELECT"></a>1.2.4 SELECT</h4><blockquote>
<p>MyBatis真正强大的功能，在于映射SELECT查询结果到java的各种类型</p>
</blockquote>
<p>一个简单的select查询配置，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    SELECT ID, NAME, EMAIL, PHONE</span><br><span class="line">    FROM STUDENTS</span><br><span class="line">    WHERE ID=#&#123;studId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以如下调用这个sql语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = sqlSession.selectOne(<span class="string">&quot;com.briup.dao.StudentMapper.findStudentById&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<p>或者使用映射接口Mapper来调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123;</span><br><span class="line">	<span class="function">Student <span class="title">findStudentById</span><span class="params">(Integer studId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); </span><br><span class="line">Student student = mapper.findStudentById(studId); </span><br></pre></td></tr></table></figure>

<p>这时候Student对象的studId属性值为空，但是其他属性的值都有，因为数据库表中的字段为id,类中属性名为studId，所以没有自动把值封装进来。</p>
<p>这时给stud_id列起一个别名为studId，和类中属性名保持一致即可。如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">		SELECT ID AS studId, NAME,EMAIL, PHONE FROM STUDENTS</span><br><span class="line">		WHERE ID=#&#123;studId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>MyBatis执行返回多条结果的SELECT语句查询，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">		SELECT ID AS studId, NAME,EMAIL, PHONE</span><br><span class="line">		FROM STUDENTS</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以如下调用这个sql语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; students =  </span><br><span class="line">		sqlSession.selectList(<span class="string">&quot;com.briup.dao.StudentMapper.findAllStudents&quot;</span>); </span><br></pre></td></tr></table></figure>



<p>或者使用映射接口Mapper来调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123;</span><br><span class="line">	<span class="function">List&lt;Student&gt; <span class="title">findAllStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">List&lt;Student&gt; students = mapper.findAllStudents();</span><br></pre></td></tr></table></figure>



<p>除了List集合类型，也可以使用其他类型的 集合，如Set,Map等。</p>
<p>MyBatis会根据集合的类型，采用适当的集合实现，如下所示：</p>
<ul>
<li><p>对于List，Collection，Iterable类型，MyBatis将返回java.util.ArrayList</p>
</li>
<li><p>对于Map类型，MyBatis 将返回java.util.HashMap</p>
</li>
<li><p>对于Set类型，MyBatis 将返回java.util.HashSet</p>
</li>
<li><p>对于SortedSet类型，MyBatis将返回java.util.TreeSet</p>
</li>
</ul>
<p>例如1，查询【一条】数据填充到Map中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	SELECT * FROM STUDENTS WHERE ID=#&#123;studId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这种情况下，结果集的列名将会作为Map中的key值，而列值将作为Map的value值。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;String,Object&gt; studentMap = sqlSession.selectOne(<span class="string">&quot;com.briup.dao.StudentMapper.findStudentById&quot;</span>, studId);</span><br><span class="line">System.out.println(<span class="string">&quot;studId :&quot;</span> + studentMap.get(<span class="string">&quot;ID&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;name :&quot;</span> + studentMap.get(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;email :&quot;</span> + studentMap.get(<span class="string">&quot;EMAIL&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;phone :&quot;</span> + studentMap.get(<span class="string">&quot;PHONE&quot;</span>));</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里使用的selectOne方法，并且表中的字段名默认是大写</p>
</blockquote>
<blockquote>
<p>注意，这里也可以像之前一样，使用映射接口的方式来调用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Map&lt;String,Object&gt; <span class="title">findStudentById</span><span class="params">(Integer studId)</span></span>; </span><br></pre></td></tr></table></figure>





<p>例如2， 查询【多条】数据填充到Map中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">	SELECT ID, NAME, EMAIL, PHONE FROM STUDENTS</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这种情况下，最终返回的数据类型是List&lt;Map&lt;String,Object&gt;&gt;，如下所所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; studentMapList = sqlSession.selectList(<span class="string">&quot;com.briup.dao.StudentMapper.findAllStudents&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(Map&lt;String, Object&gt; studentMap : studentMapList) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;studId :&quot;</span> + studentMap.get(<span class="string">&quot;ID&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;name :&quot;</span> + studentMap.get(<span class="string">&quot;NAME&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;email :&quot;</span> + studentMap.get(<span class="string">&quot;EMAIL&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;phone :&quot;</span> + studentMap.get(<span class="string">&quot;PHONE&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里使用的selectList方法，并且表中的字段名默认是大写</p>
</blockquote>
<blockquote>
<p>注意，这里也可以像之前一样，使用映射接口的方式来调用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String,Object&gt;&gt; findAllStudents(); </span><br></pre></td></tr></table></figure>





<p>例如3，查询到所有名字都放到List集合中并返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;findAllName_list&quot; resultType=&quot;String&quot;&gt;</span><br><span class="line">	SELECT NAME FROM STUDENTS</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>对应的映射接口中的方法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findAllName_list</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>



<p>例如4，查询表中的数据的条数</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findCount_int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    SELECT count(*) FROM STUDENTS</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应的映射接口中的方法为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findCount_int</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-ResultMap"><a href="#1-3-ResultMap" class="headerlink" title="1.3 ResultMap"></a>1.3 ResultMap</h3><p>ResultMap被用来将SELECT语句的结果集映射到java对象属性中。</p>
<p>在映射文件中，可以先定义出结果集映射resultMap，然后在一些SELECT语句上引用这个resultMap。</p>
<p>所以，ResultMap就是提前定义好的一个映射规则，select语句可以使用ResultMap的映射规则来处理查询结果。</p>
<p>MyBatis的结果集映射resultMap非常强大，可以使用它指定sql查询出的结果集，会被怎么处理并封装成对象，也可以使用它完成复杂查询的映射，例如一对一、一对多关系的SELECT语句。</p>
<h4 id="1-3-1-简单ResultMap"><a href="#1-3-1-简单ResultMap" class="headerlink" title="1.3.1 简单ResultMap"></a>1.3.1 简单ResultMap</h4><p>定义一个resultMap，它的id值是唯一的，并且type属性是全限定类名或者是类型的别名。代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.briup.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dob&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dob&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phoneNumber&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;resultMap&gt;</code>有俩个子元素：</p>
<ul>
<li><code>&lt;result&gt;</code>，用来将查询的数据中一个指定类列的值映射到对象指定的属性中</li>
<li><code>&lt;id&gt;</code>，和<code>&lt;result&gt;</code>标签功能相同，但是<code>&lt;id&gt;</code>用来映射的是表中的主键</li>
</ul>
<p>在select语句中，引用这个resultMap：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span></span><br><span class="line">		SELECT * FROM STUDENTS WHERE STUD_ID=#&#123;studId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span></span><br><span class="line">		SELECT * FROM STUDENTS</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ol>
<li><p>在<code>&lt;select&gt;</code>语句中，这里使用的是resultMap属性，而不是resultType属性</p>
</li>
<li><p>resultType属性中一般是写一个类型的全限定名或者别名，表示字段和属性名完全一致，进行自动封装即可</p>
</li>
<li><p>当<code>&lt;select&gt;</code>语句中配置了resutlMap属性，MyBatis会使用表中的列名与对象属性 【映射关系】 来填充对象中的属性值。</p>
</li>
<li><p>resultType和resultMap二者只能用其一，不能同时使用</p>
</li>
</ol>
<h4 id="1-3-2-继承ResultMap"><a href="#1-3-2-继承ResultMap" class="headerlink" title="1.3.2 继承ResultMap"></a>1.3.2 继承ResultMap</h4><blockquote>
<p>一个ResultMap可以继承另一个ResultMap，但是此功能是可选的，这里进行了解即可</p>
</blockquote>
<p>(注:这个可以在下面的一对一映射中进行测试,因为这里需要建立一对一关系的表结构)</p>
<p>第一个resultMap：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;stud_id&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>第二个resultMap：继承第一个ResultMap</p>
<p>假设新增了一个实体类Address，该类中有多个属性，分别和数据库中ADDRESSES表对应。<br>在Student类中又新增加了一个属性Address</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentWithAddressResult&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.addrId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.street&quot;</span> <span class="attr">column</span>=<span class="string">&quot;street&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.city&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;state&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.zip&quot;</span> <span class="attr">column</span>=<span class="string">&quot;zip&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.country&quot;</span> <span class="attr">column</span>=<span class="string">&quot;country&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p><code>如果不继承</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;stud_id&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.addrId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.street&quot;</span> <span class="attr">column</span>=<span class="string">&quot;street&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.city&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;state&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.zip&quot;</span> <span class="attr">column</span>=<span class="string">&quot;zip&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.country&quot;</span> <span class="attr">column</span>=<span class="string">&quot;country&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>如果只想映射Student数据，你可以使用id为StudentResult的resultMap,如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">resultMap</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM STUDENTS WHERE STUD_ID=#&#123;stud Id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>



<p>如果你想将映射Student数据和Address数据，你可以使用id为StudentWithAddressResult的 resultMap：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentWithAddress&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> </span></span><br><span class="line"><span class="tag">		<span class="attr">resultMap</span>=<span class="string">&quot;StudentWithAddressResult&quot;</span>&gt;</span></span><br><span class="line">    SELECT ID, NAME, EMAIL, PHONE, A.ADDR_ID, STREET, CITY, STATE, ZIP,</span><br><span class="line">    COUNTRY</span><br><span class="line">    FROM STUDENTS S LEFT OUTER JOIN ADDRESSES A ON S.ADDR_ID=A.ADDR_ID</span><br><span class="line">    WHERE STUD_ID=#&#123;studId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，该sql语句使用了连接查询中的外连接,也可以使用等值连接</p>
</blockquote>
<h4 id="1-3-3-sql标签"><a href="#1-3-3-sql标签" class="headerlink" title="1.3.3 sql标签"></a>1.3.3 sql标签</h4><p>mybatis中sql标签，主要是为了避免在项目开发的过程中，重复编写大量相同的sql语句。</p>
<p>例如，通过使用sql标签，可以将所有需要查询的字段封装在一个sql语句中 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将需要多次反复查的东西提取出来 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;querycolumns&quot;</span>&gt;</span></span><br><span class="line">	id,name,email,phone</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;Student&quot;</span>&gt;</span>         </span><br><span class="line">	select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;querycolumns&quot;</span>/&gt;</span> from students where id = #&#123;studId&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-4-一对一映射"><a href="#1-4-一对一映射" class="headerlink" title="1==.4 一对一映射=="></a>1==.4 一对一映射==</h3><blockquote>
<p>Student和Address是【一对一】关系</p>
</blockquote>
<p>建表以及数据插入:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> students;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> addresses;</span><br><span class="line"><span class="comment">--如果需要可以使用 cascade constraints;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> addresses(</span><br><span class="line">    addr_id number <span class="keyword">primary</span> key,</span><br><span class="line">    street varchar2(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    city varchar2(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    state varchar2(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    zip varchar2(<span class="number">10</span>),</span><br><span class="line">    country varchar2(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> students(</span><br><span class="line">    id number <span class="keyword">primary</span> key,</span><br><span class="line">    name varchar2(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email varchar2(<span class="number">50</span>),</span><br><span class="line">    dob <span class="type">date</span> ,</span><br><span class="line">    phone varchar2(<span class="number">15</span>),  </span><br><span class="line">    addr_id number <span class="keyword">references</span> addresses(addr_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> addresses(addr_id,street,city,state,zip,country) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;redSt&#x27;</span>,<span class="string">&#x27;kunshan&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;12345&#x27;</span>,<span class="string">&#x27;china&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> addresses(addr_id,street,city,state,zip,country) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;blueST&#x27;</span>,<span class="string">&#x27;kunshan&#x27;</span>,<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;12345&#x27;</span>,<span class="string">&#x27;china&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students(id,name,email,phone,addr_id) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;John&#x27;</span>,<span class="string">&#x27;john@gmail.com&#x27;</span>,<span class="string">&#x27;123-456-7890&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> students(id,name,email,phone,addr_id) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;Paul&#x27;</span>,<span class="string">&#x27;paul@gmail.com&#x27;</span>,<span class="string">&#x27;111-222-3333&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，此时Students表中的主键列是id，addresses表中的主键列是addr_id</p>
</blockquote>
<blockquote>
<p>注意，一定要记得把事务提交commit，否则程序查询不到</p>
</blockquote>
<p>实体类：</p>
<blockquote>
<p>注意: 此处的PhoneNumber 需要使用类型转换器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String countryCode;</span><br><span class="line">	<span class="keyword">private</span> String stateCode;</span><br><span class="line">	<span class="keyword">private</span> String number;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;PhoneNumber&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;countryCode=&#x27;&quot;</span> + countryCode + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, stateCode=&#x27;&quot;</span> + stateCode + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, number=&#x27;&quot;</span> + number + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PhoneNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// alt+insert</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PhoneNumber</span><span class="params">(String countryCode, String stateCode, String number)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//  111</span></span><br><span class="line">		<span class="keyword">this</span>.countryCode = countryCode;</span><br><span class="line">		<span class="keyword">this</span>.stateCode = stateCode;</span><br><span class="line">		<span class="keyword">this</span>.number = number;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建方法将对象转成字符串 new Phone(&quot;000&quot;,&quot;111&quot;,&quot;222&quot;)</span></span><br><span class="line">	<span class="comment">// &quot;000-111-222&quot;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">asStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.countryCode + <span class="string">&quot;-&quot;</span> + <span class="keyword">this</span>.stateCode + <span class="string">&quot;-&quot;</span> + <span class="keyword">this</span>.number;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建方法将字符串换成成对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PhoneNumber</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// &quot;000-111-222&quot;</span></span><br><span class="line">		PhoneNumber phoneNumber = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (str != <span class="keyword">null</span>) &#123;</span><br><span class="line">			String[] arr = str.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">			<span class="comment">// phoneNumber = new PhoneNumber(arr[0], arr[1], arr[2]);</span></span><br><span class="line">			<span class="keyword">this</span>.countryCode = arr[<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">this</span>.stateCode = arr[<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">this</span>.number = arr[<span class="number">2</span>];</span><br><span class="line">			<span class="comment">// this.countryCode=...</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//return phoneNumber;</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCountryCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> countryCode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountryCode</span><span class="params">(String countryCode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.countryCode = countryCode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getStateCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> stateCode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStateCode</span><span class="params">(String stateCode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.stateCode = stateCode;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> number;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumber</span><span class="params">(String number)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.number = number;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.pojo.onetoone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer addrId;</span><br><span class="line">	<span class="keyword">private</span> String street;</span><br><span class="line">	<span class="keyword">private</span> String city;</span><br><span class="line">	<span class="keyword">private</span> String state;</span><br><span class="line">	<span class="keyword">private</span> String zip;</span><br><span class="line">	<span class="keyword">private</span> String country;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAddrId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> addrId;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddrId</span><span class="params">(Integer addrId)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.addrId = addrId;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getStreet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> street;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStreet</span><span class="params">(String street)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.street = street;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> city;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.city = city;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> state;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.state = state;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getZip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> zip;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setZip</span><span class="params">(String zip)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.zip = zip;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCountry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> country;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountry</span><span class="params">(String country)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.country = country;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Address</span><span class="params">(Integer addrId, String street, String city, String state, String zip, String country)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.addrId = addrId;</span><br><span class="line">		<span class="keyword">this</span>.street = street;</span><br><span class="line">		<span class="keyword">this</span>.city = city;</span><br><span class="line">		<span class="keyword">this</span>.state = state;</span><br><span class="line">		<span class="keyword">this</span>.zip = zip;</span><br><span class="line">		<span class="keyword">this</span>.country = country;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;addrId=&quot;</span> + addrId +</span><br><span class="line">				<span class="string">&quot;, street=&#x27;&quot;</span> + street + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, state=&#x27;&quot;</span> + state + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, zip=&#x27;&quot;</span> + zip + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, country=&#x27;&quot;</span> + country + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.pojo.onetoone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer studId;</span><br><span class="line">	<span class="keyword">private</span> String name; </span><br><span class="line">	<span class="keyword">private</span> String email; </span><br><span class="line">	<span class="keyword">private</span> Date dob;</span><br><span class="line">	<span class="keyword">private</span> PhoneNumber phone;</span><br><span class="line">	<span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getStudId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> studId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudId</span><span class="params">(Integer studId)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.studId = studId;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> email;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getDob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> dob;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDob</span><span class="params">(Date dob)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.dob = dob;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> PhoneNumber <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> phone;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(PhoneNumber phone)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.phone = phone;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> address;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(Integer studId, String name, String email, Date dob)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.studId = studId;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">		<span class="keyword">this</span>.dob = dob;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">				<span class="string">&quot;studId=&quot;</span> + studId +</span><br><span class="line">				<span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">				<span class="string">&quot;, dob=&quot;</span> + dob +</span><br><span class="line">				<span class="string">&quot;, phone=&quot;</span> + phone +</span><br><span class="line">				<span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">				<span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>此时两张表的表结构以及样例数据如下所示</p>
<p>1.<code>addresses</code>表</p>
<table>
<thead>
<tr>
<th>addr_id</th>
<th>street</th>
<th>city</th>
<th>state</th>
<th>zip</th>
<th>country</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>redSt</td>
<td>kunshan</td>
<td>W</td>
<td>12345</td>
<td>china</td>
</tr>
<tr>
<td>2</td>
<td>blueST</td>
<td>kunshan</td>
<td>W</td>
<td>12345</td>
<td>china</td>
</tr>
</tbody></table>
<p>2.<code>students</code>表</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>email</th>
<th>phone</th>
<th>addr_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>John</td>
<td><a href="mailto:&#106;&#111;&#x68;&#110;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#106;&#111;&#x68;&#110;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></td>
<td>123-456-7890</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>Paul</td>
<td><a href="mailto:&#112;&#97;&#x75;&#108;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;">&#112;&#97;&#x75;&#108;&#64;&#x67;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a></td>
<td>111-222-3333</td>
<td>2</td>
</tr>
</tbody></table>
<p>StudentMapper.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentWithAddressResult&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.addrId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.street&quot;</span> <span class="attr">column</span>=<span class="string">&quot;street&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.city&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;state&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.zip&quot;</span> <span class="attr">column</span>=<span class="string">&quot;zip&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address.country&quot;</span> <span class="attr">column</span>=<span class="string">&quot;country&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentWithAddress&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentWithAddressResult&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">        s.id , s.name, s.email,s.dob,s.phone,</span><br><span class="line">        a.addr_id, a.street, a.city, a.state, a.zip, a.country</span><br><span class="line">    from</span><br><span class="line">    	students s</span><br><span class="line">    	left outer join addresses a on s.addr_id = a.addr_id</span><br><span class="line">    where</span><br><span class="line">    	id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：可以使用 对象.属性名 的方式为内嵌的对象内的属性赋值。例如 <code>address.city</code></p>
</blockquote>
<p>StudentMapper.java文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Student</span> <span class="title">Mapper</span></span>&#123; </span><br><span class="line">    <span class="function">Student <span class="title">selectStudentWithAddress</span><span class="params">(<span class="keyword">int</span> studId)</span></span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> studId = <span class="number">1</span>; </span><br><span class="line">StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class); </span><br><span class="line">Student student = studentMapper.selectStudentWithAddress(studId); </span><br><span class="line">System.out.println(<span class="string">&quot;Student :&quot;</span> + student); </span><br><span class="line">System.out.println(<span class="string">&quot;Address :&quot;</span> + student.getAddress()); </span><br></pre></td></tr></table></figure>



<p>在使用这种方式映射的时候，如果address结果需要在其他的SELECT映射语句中单独封装成Address对象，那么就需要把同样的配置在重新写一遍，因为当前是在封装Student对象的时候嵌入了Address对象的封装，这段对Address映射的配置不能在其他地方重复的单独使用</p>
<p>针对于这种情况，MyBatis提供了更好地实现一对一关联映射的俩种方法：</p>
<ul>
<li>【嵌套结果】ResultMap</li>
<li>【嵌套查询】Select</li>
</ul>
<h4 id="1-4-1-嵌套结果"><a href="#1-4-1-嵌套结果" class="headerlink" title="1.4.1 嵌套结果"></a>1.4.1 嵌套结果</h4><p>使用【嵌套结果】ResultMap，实现一对一关系映射。</p>
<p>代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 独立的Address封装映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;AddressResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;addrId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;street&quot;</span> <span class="attr">column</span>=<span class="string">&quot;street&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;city&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;state&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;zip&quot;</span> <span class="attr">column</span>=<span class="string">&quot;zip&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;country&quot;</span> <span class="attr">column</span>=<span class="string">&quot;country&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line">		</span><br><span class="line"><span class="comment">&lt;!-- Student封装映射，里面关联上Address的封装映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentWithAddressResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;stud_id&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dob&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dob&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AddressResult&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentWithAddress&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentWithAddressResult&quot;</span>&gt;</span> </span><br><span class="line">    select </span><br><span class="line">        s.stud_id, s.name, s.email,s.dob,s.phone, </span><br><span class="line">        a.addr_id, a.street, a.city, a.state, a.zip, a.country</span><br><span class="line">    from </span><br><span class="line">    	students s </span><br><span class="line">    	left outer join addresses a on s.addr_id = a.addr_id</span><br><span class="line">    where </span><br><span class="line">    	stud_id = #&#123;id&#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，<code>&lt;association&gt;</code>是关联的意思,常被用来表示(has-one)类型的关联。就是对象1里面关联另一个对象2</p>
</blockquote>
<p>同时我们也可以使用<code>&lt;association&gt; </code>定义【内联】的resultMap，代码如下所示：（了解即可，不常用）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 相当于把Student映射和Address映射又合并在一起写了，还是使用&lt;association&gt;标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentWithAddressResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;stud_id&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Address&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;addrId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;street&quot;</span> <span class="attr">column</span>=<span class="string">&quot;street&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;city&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;state&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;zip&quot;</span> <span class="attr">column</span>=<span class="string">&quot;zip&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;country&quot;</span> <span class="attr">column</span>=<span class="string">&quot;country&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-嵌套查询"><a href="#1-4-2-嵌套查询" class="headerlink" title="1.4.2 嵌套查询"></a>1.4.2 嵌套查询</h4><p>使用【嵌套查询】select，实现一对一关系映射。</p>
<p>代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 独立的Address封装映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;AddressResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;addrId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;street&quot;</span> <span class="attr">column</span>=<span class="string">&quot;street&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;city&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;state&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;zip&quot;</span> <span class="attr">column</span>=<span class="string">&quot;zip&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;country&quot;</span> <span class="attr">column</span>=<span class="string">&quot;country&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="comment">&lt;!-- 独立的select查询，专门查询Address --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAddressById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AddressResult&quot;</span>&gt;</span> </span><br><span class="line">    select * from addresses </span><br><span class="line">    where addr_id=#&#123;id&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br><span class="line">		</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Student封装映射，里面关联了查询address使用的select语句，并指定数据库表中的这个关联的外键列的名字，这里是addr_id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentWithAddressResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;dob&quot;</span> <span class="attr">column</span>=<span class="string">&quot;dob&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;findAddressById&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询Student的select语句，这里不用写多表查询，因为对于address的关联查询，已经在上边定义好了，并且在结果映射中关联进来了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentWithAddress&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentWithAddressResult&quot;</span>&gt;</span> </span><br><span class="line">    	select </span><br><span class="line">	    	id,name,email,dob,phone,addr_id</span><br><span class="line">	    from </span><br><span class="line">	    	students </span><br><span class="line">	    where </span><br><span class="line">	    	id = #&#123;id&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>在此方式中，<code>&lt;association</code>&gt;元素的select属性被设置成了id为findAddressById的语句。</p>
<p>两个分开的SQL语句将会在数据库中分别执行，第一个通过id查询student信息，而第二个调用findAddressById来加载address信息。</p>
<p>addr_id列的值将会被作为输入参数传递给selectAddressById语句作为参数进行条件查询。</p>
<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StudentMapper mapper = sqlSession.getMapper(StudentMapper.class); </span><br><span class="line">Student student = mapper.selectStudentWithAddress(<span class="number">1</span>); </span><br><span class="line">System.out.println(student); </span><br><span class="line">System.out.println(student.getAddress());</span><br></pre></td></tr></table></figure>



<p>嵌套查询，操作过程分析：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>通过用户传的id值，查询出指定的学生</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>注意，这个时候只是查询学生，没有查询地址</span><br><span class="line"><span class="keyword">select</span> id,name,email,dob,phone,addr_id <span class="keyword">from</span> students </span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> #&#123;studId&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>加上id为<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> id,name,email,dob,phone,addr_id <span class="keyword">from</span> students </span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询结果为</span><br><span class="line">        ID NAME    EMAIL           DOB    PHONE      ADDR_ID</span><br><span class="line"><span class="comment">---------- ------- --------------- ------ -------- ----------</span></span><br><span class="line">         <span class="number">1</span> John    john<span class="variable">@gmail</span>.com        <span class="number">123</span><span class="number">-456</span><span class="number">-7890</span>   <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>这时候，只能飞封装学生对象的普通属性，address属性是封装不了</span><br><span class="line">public class Student &#123;</span><br><span class="line">	<span class="operator">/</span><span class="operator">/</span>...其他普通属性</span><br><span class="line">	private Address address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>需要专门的去查询和这个学生对应的address，然后进行封装</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>使用这个<span class="keyword">sql</span>语句</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> addresses </span><br><span class="line"><span class="keyword">where</span> addr_id <span class="operator">=</span> #&#123;id&#125; </span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>需要传入一个参数，表示和这个学生对应的地址id</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>其实这个参数,就是上面第一条<span class="keyword">sql</span>语句查询结果中的addr_id字段的值,也就是<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> addresses </span><br><span class="line"><span class="keyword">where</span> addr_id <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>这一步操作对应的配置为：</span><br><span class="line"><span class="operator">&lt;</span>association property<span class="operator">=</span>&quot;address&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;addr_id&quot; <span class="keyword">select</span><span class="operator">=</span>&quot;findAddressById&quot; <span class="operator">/</span><span class="operator">&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>查询结果为</span><br><span class="line">   ADDR_ID STREET     CITY       STATE ZIP        COUNTRY</span><br><span class="line"><span class="comment">---------- ---------- ---------- ----- ---------- ----------</span></span><br><span class="line">         <span class="number">1</span> redSt      kunshan    W     <span class="number">12345</span>      china</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>然后对这个数据进行封装，得到address对象</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>最后把address对存到student对象中即可</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>总结对比：</p>
<ul>
<li><p>嵌套结果</p>
<p>一条sql语句，查询出所有表中的数据，然后交给一个ResultMap去映射，这个ResultMap只负责映射封装一部分数据，另一部分数据交给第二个ResultMap来映射，这个俩个ResultMap之间，使用标签<code>&lt;association&gt;</code>进行关联</p>
<p>例如，<code>&lt;association property=&quot;address&quot; resultMap=&quot;AddressResult&quot; /&gt; </code></p>
</li>
<li><p>嵌套查询</p>
<p>把之前一条sql语句，拆分成多条sql语句，每条sql语句只查询一张表并封装一部分数据，然后使用标签<code>&lt;association&gt;</code>将多条sql语句关联起来，最后把结果合并起来就是完整的查询结果</p>
<p>例如，<code>&lt;association property=&quot;address&quot; column=&quot;addr_id&quot; select=&quot;findAddressById&quot; /&gt; </code></p>
</li>
</ul>
<h3 id="1-5-一对多映射"><a href="#1-5-一对多映射" class="headerlink" title="1.5 ==一对多映射=="></a>1.5 ==一对多映射==</h3><blockquote>
<p>在一对多关系中，数据库建表的时候外键，一定是在多的那一方建立</p>
</blockquote>
<p>例如，一个讲师tutors可以教授一个或者多个课程course。这意味着讲师和课程之间存在一对多的映射关系。</p>
<p>建表以及数据插入语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> courses;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> tutors;</span><br><span class="line"><span class="comment">--如果需要可以使用 cascade constraints;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tutors(</span><br><span class="line">    tutor_id number <span class="keyword">primary</span> key,</span><br><span class="line">    name varchar2(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    email varchar2(<span class="number">50</span>) ,</span><br><span class="line">    phone varchar2(<span class="number">15</span>) ,  </span><br><span class="line">    addr_id number(<span class="number">11</span>) <span class="keyword">references</span> addresses (addr_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> courses(</span><br><span class="line">    course_id number <span class="keyword">primary</span> key,</span><br><span class="line">    name varchar2(<span class="number">100</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    description varchar2(<span class="number">512</span>),</span><br><span class="line">    start_date <span class="type">date</span> ,</span><br><span class="line">    end_date <span class="type">date</span> ,</span><br><span class="line">    tutor_id number <span class="keyword">references</span> tutors (tutor_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tutors(tutor_id,name,email,phone,addr_id) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="string">&#x27;zs@briup.com&#x27;</span>,<span class="string">&#x27;123-456-7890&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tutors(tutor_id,name,email,phone,addr_id) <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;ls&#x27;</span>,<span class="string">&#x27;ls@briup.com&#x27;</span>,<span class="string">&#x27;111-222-3333&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses(course_id,name,description,start_date,end_date,tutor_id) <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;JavaSE&#x27;</span>,<span class="string">&#x27;JavaSE&#x27;</span>,to_date(<span class="string">&#x27;2022-01-10&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>),to_date(<span class="string">&#x27;2022-02-10&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses(course_id,name,description,start_date,end_date,tutor_id)	<span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;JavaEE&#x27;</span>,<span class="string">&#x27;JavaEE&#x27;</span>,to_date(<span class="string">&#x27;2022-01-10&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>),to_date(<span class="string">&#x27;2022-03-10&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>),<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> courses(course_id,name,description,start_date,end_date,tutor_id)	<span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;MyBatis&#x27;</span>,<span class="string">&#x27;MyBatis&#x27;</span>,to_date(<span class="string">&#x27;2022-01-10&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>),to_date(<span class="string">&#x27;2022-02-20&#x27;</span>,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，记得提交数据</p>
</blockquote>
<p>此时两张表中的示例数据如下</p>
<p>1.<code>tutors</code>表</p>
<table>
<thead>
<tr>
<th>tutor_id</th>
<th>name</th>
<th>email</th>
<th>phone</th>
<th>addr_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>zs</td>
<td><a href="mailto:&#x7a;&#115;&#x40;&#x62;&#x72;&#105;&#x75;&#x70;&#46;&#99;&#111;&#x6d;">&#x7a;&#115;&#x40;&#x62;&#x72;&#105;&#x75;&#x70;&#46;&#99;&#111;&#x6d;</a></td>
<td>123-456-7890</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>ls</td>
<td><a href="mailto:&#108;&#115;&#64;&#x62;&#x72;&#105;&#x75;&#112;&#x2e;&#99;&#111;&#x6d;">&#108;&#115;&#64;&#x62;&#x72;&#105;&#x75;&#112;&#x2e;&#99;&#111;&#x6d;</a></td>
<td>111-222-3333</td>
<td>2</td>
</tr>
</tbody></table>
<p>2.<code>courses</code>表</p>
<table>
<thead>
<tr>
<th>course_id</th>
<th>name</th>
<th>description</th>
<th>start_date</th>
<th>end_date</th>
<th>tutor_id</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>JavaSE</td>
<td>JavaSE</td>
<td>2022-01-10</td>
<td>2022-02-10</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>JavaEE</td>
<td>JavaEE</td>
<td>2022-01-10</td>
<td>2022-03-10</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>MyBatis</td>
<td>MyBatis</td>
<td>2022-01-10</td>
<td>2022-02-20</td>
<td>1</td>
</tr>
</tbody></table>
<p>在上述的表数据中，zs 讲师教授一个课程，而 ls 讲师教授两个课程。</p>
<p>实体类设计如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer courseId; </span><br><span class="line">	<span class="keyword">private</span> String name; </span><br><span class="line">	<span class="keyword">private</span> String description; </span><br><span class="line">	<span class="keyword">private</span> Date startDate; </span><br><span class="line">	<span class="keyword">private</span> Date endDate;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getCourseId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> courseId;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourseId</span><span class="params">(Integer courseId)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.courseId = courseId;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> description;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.description = description;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getStartDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> startDate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStartDate</span><span class="params">(Date startDate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.startDate = startDate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getEndDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> endDate;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEndDate</span><span class="params">(Date endDate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.endDate = endDate;</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tutor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer tutorId; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="keyword">private</span> String email; </span><br><span class="line">    <span class="keyword">private</span> PhoneNumber phone;</span><br><span class="line">    <span class="keyword">private</span> Address address; </span><br><span class="line">    <span class="keyword">private</span> List&lt;Course&gt; courses;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getTutorId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tutorId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTutorId</span><span class="params">(Integer tutorId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tutorId = tutorId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PhoneNumber <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(PhoneNumber phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Course&gt; <span class="title">getCourses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> courses;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>&lt;collection&gt;</code>标签可以用来将多行课程结果映射成一个课程Course对象的集合。</p>
<p>和之前的一对一映射一样，可以使用【嵌套结果】ResultMap和【嵌套查询】Select语句两种方式，映射一对多关系。</p>
<h4 id="1-5-1-嵌套结果"><a href="#1-5-1-嵌套结果" class="headerlink" title="1.5.1 嵌套结果"></a>1.5.1 嵌套结果</h4><p>使用【嵌套结果】ResultMap 实现一对多映射，获得讲师及其课程信息，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 独立的Address封装映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;AddressResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;addrId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;street&quot;</span> <span class="attr">column</span>=<span class="string">&quot;street&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;city&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;state&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;zip&quot;</span> <span class="attr">column</span>=<span class="string">&quot;zip&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;country&quot;</span> <span class="attr">column</span>=<span class="string">&quot;country&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">&lt;!-- 独立的Course封装映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Course&quot;</span> <span class="attr">id</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;course_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;courseId&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;description&quot;</span> <span class="attr">property</span>=<span class="string">&quot;description&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;start_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;startDate&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;end_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;endDate&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- Tutor封装映射，里面是有嵌套结果的方式关联一个Addres和多个Course，分别使用association标签和collection标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Tutor&quot;</span> <span class="attr">id</span>=<span class="string">&quot;TutorResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;tutor_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tutorId&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AddressResult&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;courses&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CourseResult&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line">	</span><br><span class="line"><span class="comment">&lt;!-- 查询Tutor的select语句，多表连接查询，把查询的结果给个上面的映射结果统一进行封装 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTutorById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TutorResult&quot;</span>&gt;</span> </span><br><span class="line">		select </span><br><span class="line">			t.tutor_id, t.name, t.email,t.phone, </span><br><span class="line">			c.course_id, c.name, c.description, c.start_date, c.end_date,</span><br><span class="line">			a.addr_id,a.street,a.city,a.state,a.zip,a.country </span><br><span class="line">		from </span><br><span class="line">			tutors t </span><br><span class="line">			left outer join addresses a on t.addr_id  = a.addr_id </span><br><span class="line">			left outer join courses   c on t.tutor_id = c.tutor_id </span><br><span class="line">		where </span><br><span class="line">			t.tutor_id=#&#123;id&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里查询了三张表，如果表中有字段和其他表中的字段名字一样，那么一定要起别名进行区别，否则封装映射结果的时候会出问题。</p>
</blockquote>
<h4 id="1-5-2-嵌套查询"><a href="#1-5-2-嵌套查询" class="headerlink" title="1.5.2 嵌套查询"></a>1.5.2 嵌套查询</h4><p>使用【嵌套查询】Select，实现一对多映射，式获得讲师及其课程信息，代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 独立的Address封装映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;AddressResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;addrId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;street&quot;</span> <span class="attr">column</span>=<span class="string">&quot;street&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;city&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;state&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;zip&quot;</span> <span class="attr">column</span>=<span class="string">&quot;zip&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;country&quot;</span> <span class="attr">column</span>=<span class="string">&quot;country&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 独立的Course封装映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Course&quot;</span> <span class="attr">id</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;course_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;courseId&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;description&quot;</span> <span class="attr">property</span>=<span class="string">&quot;description&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;start_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;startDate&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;end_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;endDate&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">&lt;!-- Tutor封装映射，里分别使用association和collection标签来进行关联查询，直接把对应的select查询语句管理进行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Tutor&quot;</span> <span class="attr">id</span>=<span class="string">&quot;TutorResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;tutor_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tutorId&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 把addr_id列的值当做参数传给findAddressById进行查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;findAddressById&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 把tutor_id列的值当做参数传给findCoursesByTutor进行查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;courses&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tutor_id&quot;</span> <span class="attr">select</span>=<span class="string">&quot;findCoursesByTutor&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line">	</span><br><span class="line"><span class="comment">&lt;!-- 单独的Tutor查询语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findTutorById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TutorResult&quot;</span>&gt;</span> </span><br><span class="line">    select tutor_id,name,email,phone,addr_id</span><br><span class="line">    from tutors</span><br><span class="line">    where tutor_id = #&#123;tutor_id&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单独的Address查询语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAddressById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AddressResult&quot;</span>&gt;</span></span><br><span class="line">    select addr_id,street,city,state,zip,country</span><br><span class="line">    from addresses</span><br><span class="line">    where addr_id = #&#123;addr_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单独的Course查询语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findCoursesByTutor&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span></span><br><span class="line">    select course_id,name,description,start_date,end_date </span><br><span class="line">    from courses </span><br><span class="line">    where tutor_id = #&#123;tutor_id&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p>mapper接口代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TutorMapper</span></span>&#123; </span><br><span class="line">    <span class="function">Tutor <span class="title">findTutorById</span><span class="params">(<span class="keyword">int</span> tutorId)</span></span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>


<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TutorMapper mapper = sqlSession.getMapper(TutorMapper.class); </span><br><span class="line">Tutor tutor = mapper.findTutorById(tutor Id); </span><br><span class="line">System.out.println(tutor); </span><br><span class="line">List&lt;Course&gt; courses = tutor.getCourses();</span><br><span class="line">courses.foreach(System.out::println);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意，嵌套查询Select语句查询会导致性能问题。首先，主查询将会执行，对于主查询返回的每一行数据，另外一个查询将会被执行。对于大量数据而言，这会导致整体效率降低。</p>
</blockquote>
<p>==思考，这时候如果需要编写一个Course的插入功能，该如何操作？注意外键列在Course对应的表中==</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tutor(id,name,cName,tutor_id)</span><br><span class="line">	<span class="keyword">values</span>(#&#123;id&#125;,#&#123;name&#125;,#&#123;tutor.id&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="1-6-多对多映射"><a href="#1-6-多对多映射" class="headerlink" title="1.6 ==多对多映射=="></a>1.6 ==多对多映射==</h3><p>对于在mybatis中的多对多的处理，可以参照一对多来解决，以课程和学生为例</p>
<p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student_course;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> course;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br><span class="line"><span class="comment">--如果需要可以使用 cascade constraints;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course (</span><br><span class="line">    id number <span class="keyword">primary</span> key,</span><br><span class="line">    course_code varchar2(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    course_name varchar2(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span> </span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">    id number <span class="keyword">primary</span> key,</span><br><span class="line">    name varchar2(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    gender varchar2(<span class="number">10</span>) ,</span><br><span class="line">    major varchar2(<span class="number">10</span>) ,</span><br><span class="line">    grade varchar2(<span class="number">10</span>) </span><br><span class="line">);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_course (</span><br><span class="line">    id number <span class="keyword">primary</span> key,</span><br><span class="line">    student_id number <span class="keyword">references</span> student(id),</span><br><span class="line">    course_id number <span class="keyword">references</span> course(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<p>java实体类： 新建包 <code>com.briup.many2many</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.many2many;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String courseCode; <span class="comment">// 课程编号</span></span><br><span class="line">	<span class="keyword">private</span> String courseName;<span class="comment">// 课程名称</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;Student&gt; students;<span class="comment">// 选课学生</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCourseCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> courseCode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourseCode</span><span class="params">(String courseCode)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.courseCode = courseCode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getCourseName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> courseName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourseName</span><span class="params">(String courseName)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.courseName = courseName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> students;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.students = students;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.many2many;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name; <span class="comment">// 姓名</span></span><br><span class="line">	<span class="keyword">private</span> String gender; <span class="comment">// 性别</span></span><br><span class="line">	<span class="keyword">private</span> String major; <span class="comment">// 专业</span></span><br><span class="line">	<span class="keyword">private</span> String grade; <span class="comment">// 年级</span></span><br><span class="line">	<span class="keyword">private</span> List&lt;Course&gt; courses;<span class="comment">// 所选的课程</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> gender;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(String gender)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.gender = gender;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMajor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> major;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMajor</span><span class="params">(String major)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.major = major;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> grade;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(String grade)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.grade = grade;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List&lt;Course&gt; <span class="title">getCourses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> courses;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(List&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.courses = courses;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>映射接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Many2ManyMapper</span> </span>&#123;</span><br><span class="line">	<span class="comment">//插入student数据</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">	<span class="comment">//插入course数据</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCourse</span><span class="params">(Course course)</span></span>;</span><br><span class="line">	<span class="comment">//通过id查询学生</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Student <span class="title">getStudentById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">	<span class="comment">//通过id查询课程</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Course <span class="title">getCourseById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">  	<span class="comment">//学生x选课y</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">studentSelectCourse</span><span class="params">(Student student, Course course)</span></span>;</span><br><span class="line">    <span class="comment">//查询比指定id值小的学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudentByIdOnCondition</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="comment">//查询student级联查询出所选的course并且组装成完整的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">getStudentByIdWithCourses</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>映射文件：为了避免和之前类型的别名冲突，这里全都使用的是类型的全限定名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.mappers.Many2ManyMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.briup.many2many.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> </span></span><br><span class="line"><span class="tag">                   <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">            select my_seq.nextval from dual</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into</span><br><span class="line">        student(id,name,gender,major,grade)</span><br><span class="line">        values</span><br><span class="line">        (#&#123;id&#125;,#&#123;name&#125;,#&#123;gender&#125;,#&#123;major&#125;,#&#123;grade&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertCourse&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.briup.many2many.Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">            select my_seq.nextval from dual</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into</span><br><span class="line">        course(id,course_code,course_name)</span><br><span class="line">        values</span><br><span class="line">        (#&#123;id&#125;,#&#123;courseCode&#125;,#&#123;courseName&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultType</span>=<span class="string">&quot;com.briup.many2many.Student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,gender,major,grade</span><br><span class="line">        from student</span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getCourseById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultType</span>=<span class="string">&quot;com.briup.many2many.Course&quot;</span>&gt;</span></span><br><span class="line">        select id,course_code as courseCode,course_name as courseName</span><br><span class="line">        from course</span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- param1代表方法中第一个参数 以此类推 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;studentSelectCourse&quot;</span>&gt;</span></span><br><span class="line">        insert into</span><br><span class="line">        student_course(id,student_id,course_id)</span><br><span class="line">        values</span><br><span class="line">        (my_seq.nextval,#&#123;param1.id&#125;,#&#123;param2.id&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 如果有特殊符号的话 需要用 &lt;![CDATA[ 特殊符号 ]]&gt; 例如 &lt; &amp; 等等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByIdOnCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultType</span>=<span class="string">&quot;com.briup.many2many.Student&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from student</span><br><span class="line">        where id &lt;![CDATA[ &lt; ]]&gt;</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里使用了嵌套结果ResultMap的方式进行级联查询 当然也可以使用嵌套查询select --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射一个基本的Student查询结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.briup.many2many.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;major&quot;</span> <span class="attr">column</span>=<span class="string">&quot;major&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;grade&quot;</span> <span class="attr">column</span>=<span class="string">&quot;grade&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 继承上面那个基本的映射,再扩展出级联查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentResultWithCourses&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.briup.many2many.Student&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">extends</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;courses&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 这里特别注意的是column=&quot;cid&quot; 这是和select语句中的 c.id as cid对应的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;CourseResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.briup.many2many.Course&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;courseCode&quot;</span> <span class="attr">column</span>=<span class="string">&quot;course_code&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;courseName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;course_name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注意:查询语句的中的c.id as cid这个地方,避免名字相同出现查询结果不正确的情况 同时在id=&quot;CourseResult&quot;的resultMap中也有与这里对应的设置要特别特别注意 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意，学生的id起的别名为sid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByIdWithCourses&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">resultMap</span>=<span class="string">&quot;StudentResultWithCourses&quot;</span>&gt;</span></span><br><span class="line">        select </span><br><span class="line">			s.id  as sid,s.name,s.gender,s.major,s.grade,</span><br><span class="line">			c.id  as cid,c.course_code,c.course_name,</span><br><span class="line">			sc.id as scid,sc.student_id,sc.course_id</span><br><span class="line">		from </span><br><span class="line">			student s,</span><br><span class="line">			course c,</span><br><span class="line">			student_course sc</span><br><span class="line">		where</span><br><span class="line">			s.id= #&#123;id&#125;</span><br><span class="line">			and</span><br><span class="line">			s.id = sc.student_id</span><br><span class="line">			and</span><br><span class="line">			c.id = sc.course_id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">			</span><br></pre></td></tr></table></figure>


<p>测试：Many2ManyMapperTest.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_insertStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        Many2ManyMapper mapper = session.getMapper(Many2ManyMapper.class);</span><br><span class="line"></span><br><span class="line">        mapper.insertStudent(<span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;计算机&quot;</span>,<span class="string">&quot;大四&quot;</span>));</span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        session.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(session!=<span class="keyword">null</span>)session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_insertCourse</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        Many2ManyMapper mapper = session.getMapper(Many2ManyMapper.class);</span><br><span class="line"></span><br><span class="line">        mapper.insertCourse(<span class="keyword">new</span> Course(<span class="string">&quot;001&quot;</span>,<span class="string">&quot;corejava&quot;</span>));</span><br><span class="line">        mapper.insertCourse(<span class="keyword">new</span> Course(<span class="string">&quot;002&quot;</span>,<span class="string">&quot;oracle&quot;</span>));</span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        session.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(session!=<span class="keyword">null</span>)session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_studentSelectCourse</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        Many2ManyMapper mapper = session.getMapper(Many2ManyMapper.class);</span><br><span class="line"></span><br><span class="line">        Student student = mapper.getStudentById(<span class="number">58</span>);</span><br><span class="line">        Course course = mapper.getCourseById(<span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">        mapper.studentSelectCourse(student, course);</span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        session.rollback();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(session!=<span class="keyword">null</span>)session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_getStudentByIdOnCondition</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        Many2ManyMapper mapper = session.getMapper(Many2ManyMapper.class);</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list = mapper.getStudentByIdOnCondition(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Student s:list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(session!=<span class="keyword">null</span>)session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_getStudentByIdWithCourses</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        Many2ManyMapper mapper = session.getMapper(Many2ManyMapper.class);</span><br><span class="line"></span><br><span class="line">        Student student = mapper.getStudentByIdWithCourses(<span class="number">58</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(session!=<span class="keyword">null</span>)session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这是从student这边出发所做的一些操作 ,从course一边开始操作是一样的，因为俩者的关系是多对多(对称的)。</p>
</blockquote>
<h1 id="第三章-其他"><a href="#第三章-其他" class="headerlink" title="第三章-其他"></a>第三章-其他</h1><h2 id="1-动态"><a href="#1-动态" class="headerlink" title="1.==动态=="></a>1.==动态==</h2><blockquote>
<p>动态SQL 是 MyBatis 的强大特性之一</p>
</blockquote>
<p>很多时候，静态sql并不能完全满足程序的要求，我们需要根据用户输入的条件来动态的改变和构造一个sql语句。</p>
<p>mybaits通过以下标签对动态sql提供支持：</p>
<ol>
<li><p><code>&lt;if&gt;</code></p>
</li>
<li><p><code>&lt;choose&gt;</code> </p>
</li>
<li><p><code>&lt;where&gt;</code></p>
</li>
<li><p><code>&lt;foreach&gt;</code></p>
</li>
<li><p><code>&lt;trim&gt;</code> </p>
</li>
<li><p><code>&lt;set&gt;</code></p>
</li>
</ol>
<h3 id="1-1-if"><a href="#1-1-if" class="headerlink" title="1.1 if"></a>1.1 if</h3><p><code>&lt;if&gt;</code>标签被用来通过条件嵌入SQL片段，如果条件为true，则相应地SQL片段将会被添加到SQL语句中。</p>
<p>假定有一个课程搜索界面，设置了讲师（Tutor）下拉列表框，课程名称（CourseName）文本输入框，开始时间（StartDate）输入框，结束时间（EndDate）输入框，作为搜索条件，其中讲师下拉列表是必须选的，其他的都是可选的。</p>
<p>当用户点击搜索按钮时，需要显示符合条件的列表数据。</p>
<p>对应的sql映射文件，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 独立的Course封装映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Course&quot;</span> <span class="attr">id</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;course_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;courseId&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;description&quot;</span> <span class="attr">property</span>=<span class="string">&quot;description&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;start_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;startDate&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;end_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;endDate&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询Course的select语句，里面加入了if条件判断 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchCourses&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM COURSES </span><br><span class="line">    WHERE TUTOR_ID= #&#123;tutorId&#125; </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;courseName != null&quot;</span>&gt;</span> </span><br><span class="line">        AND NAME LIKE #&#123;courseName&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;startDate != null&quot;</span>&gt;</span> </span><br><span class="line">        AND START_DATE &gt;= #&#123;startDate&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;endDate != null&quot;</span>&gt;</span> </span><br><span class="line">        AND END_DATE &lt;![CDATA[ &lt;= ]]&gt; #&#123;endDate&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里可以把多个参数存放到Map集合中，这样方法mybaits在sql语句中动态取值</p>
</blockquote>
<p>映射接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DynamicSqlMapper</span></span>&#123; </span><br><span class="line">    <span class="function">List&lt;Course&gt; <span class="title">searchCourses</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_searchCourses1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        DynamicSqlMapper mapper = sqlSession.getMapper(DynamicSqlMapper.class);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;(); </span><br><span class="line">        map.put(<span class="string">&quot;tutorId&quot;</span>, <span class="number">1</span>); </span><br><span class="line">        map.put(<span class="string">&quot;courseName&quot;</span>, <span class="string">&quot;%Java%&quot;</span>); </span><br><span class="line"></span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        map.put(<span class="string">&quot;startDate&quot;</span>, date);</span><br><span class="line"></span><br><span class="line">        List&lt;Course&gt; courses = mapper.searchCourses(map);</span><br><span class="line"></span><br><span class="line">        courses.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>此处将生成查询语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> COURSES <span class="keyword">WHERE</span> TUTOR_ID<span class="operator">=</span> ? <span class="keyword">AND</span> NAME <span class="keyword">like</span> ? <span class="keyword">AND</span> START_DATE <span class="operator">&gt;=</span> ?</span><br></pre></td></tr></table></figure>



<h3 id="1-2-choose"><a href="#1-2-choose" class="headerlink" title="1.2 choose"></a>1.2 choose</h3><p>有时候，查询功能是以查询 类别 为基础的。</p>
<p>例如，页面中有一个下拉列表，可以选择查询的类别，可以选择根据讲师查询、或者根据课程名查询、或者根据时间查询等等，选择了列表之后，再输入关键字进行查询。</p>
<p>MyBatis提供了<code>&lt;choose&gt;</code>标签可以支持此类型的查询处理。</p>
<p>对应的sql映射文件，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Course&quot;</span> <span class="attr">id</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;course_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;courseId&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;description&quot;</span> <span class="attr">property</span>=<span class="string">&quot;description&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;start_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;startDate&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;end_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;endDate&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchCourses&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">    SELECT * FROM COURSES </span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;searchBy == &#x27;Tutor&#x27;&quot;</span>&gt;</span> </span><br><span class="line">            WHERE TUTOR_ID = #&#123;tutorId&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;searchBy == &#x27;CourseName&#x27;&quot;</span>&gt;</span> </span><br><span class="line">            WHERE name like #&#123;courseName&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span> </span><br><span class="line">            WHERE start_date &gt;= sysdate </span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_searchCourses2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        DynamicSqlMapper mapper = sqlSession.getMapper(DynamicSqlMapper.class);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;(); </span><br><span class="line">        <span class="comment">//			map.put(&quot;searchBy&quot;, &quot;Tutor&quot;); </span></span><br><span class="line">        <span class="comment">//			map.put(&quot;tutorId&quot;, 1); </span></span><br><span class="line">        map.put(<span class="string">&quot;searchBy&quot;</span>, <span class="string">&quot;CourseName&quot;</span>); </span><br><span class="line">        map.put(<span class="string">&quot;courseName&quot;</span>, <span class="string">&quot;%MyBatis%&quot;</span>); </span><br><span class="line"></span><br><span class="line">        List&lt;Course&gt; courses = mapper.searchCourses(map);</span><br><span class="line"></span><br><span class="line">        courses.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-where"><a href="#1-3-where" class="headerlink" title="1.3 where"></a>1.3 where</h3><p>有时候，所有的查询条件应该是可选的。</p>
<p>在需要使用至少一种查询条件的情况下，可以直接使用WHERE子句，如果有多个条件，需要在条件中添加AND或OR。</p>
<p>MyBatis提供了<code>&lt;where&gt;</code>元素支持这种类型的动态SQL语句。 </p>
<p>例如，在查询课程界面，假设所有的查询条件是可选的</p>
<p>对应的sql映射文件，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Course&quot;</span> <span class="attr">id</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;course_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;courseId&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;description&quot;</span> <span class="attr">property</span>=<span class="string">&quot;description&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;start_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;startDate&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;end_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;endDate&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchCourses&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">    SELECT * FROM COURSES </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;tutorId != null &quot;</span>&gt;</span> </span><br><span class="line">            TUTOR_ID= #&#123;tutorId&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;courseName != null&quot;</span>&gt;</span> </span><br><span class="line">            AND name like #&#123;courseName&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;startDate != null&quot;</span>&gt;</span> </span><br><span class="line">            AND start_date &gt;= #&#123;startDate&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，<code>&lt;where&gt;</code>元素只有在其内部标签有返回内容时才会在动态语句上插入WHERE条件语句。<br>并且，如果WHERE子句以AND或者OR打头，则打头的AND或OR将会被移除。</p>
</blockquote>
<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_searchCourses3</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        DynamicSqlMapper mapper = sqlSession.getMapper(DynamicSqlMapper.class);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;(); </span><br><span class="line">        <span class="comment">//map.put(&quot;tutorId&quot;, 1); </span></span><br><span class="line">        <span class="comment">//map.put(&quot;courseName&quot;, &quot;JavaSE&quot;); </span></span><br><span class="line">        <span class="comment">//map.put(&quot;startDate&quot;, LocalDate.of(2022, 1, 10)); </span></span><br><span class="line"></span><br><span class="line">        List&lt;Course&gt; courses = mapper.searchCourses(map);</span><br><span class="line"></span><br><span class="line">        courses.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-4-trim"><a href="#1-4-trim" class="headerlink" title="1.4 trim"></a>1.4 trim</h3><p><code>&lt;trim&gt;</code>元素和<code>&lt;where&gt;</code>元素类似，同时<code>&lt;trim&gt;</code>提供了添加 前缀/后缀 或者 移除 前缀/后缀 的功能。</p>
<p>例如，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchCourses&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">    SELECT * FROM COURSES </span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot; tutorId != null &quot;</span>&gt;</span></span><br><span class="line">            TUTOR_ID = #&#123;tutorId&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;courseName != null&quot;</span>&gt;</span> </span><br><span class="line">            name like #&#123;courseName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>prefix表示有一个if成立则插入where语句</li>
<li>suffix表示后缀,和prefix相反</li>
<li>suffixOverrides=”and”表示如果最后生成的sql语句多一个and,则自动去掉.</li>
<li>prefixOverrides的意思是处理前缀,和suffixOverrides相反</li>
</ul>
<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_searchCourses4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        DynamicSqlMapper mapper = sqlSession.getMapper(DynamicSqlMapper.class);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;(); </span><br><span class="line">        <span class="comment">//			map.put(&quot;tutorId&quot;, 1); </span></span><br><span class="line">        <span class="comment">//			map.put(&quot;courseName&quot;, &quot;JavaSE&quot;); </span></span><br><span class="line"></span><br><span class="line">        List&lt;Course&gt; courses = mapper.searchCourses(map);</span><br><span class="line"></span><br><span class="line">        courses.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-5-foreach"><a href="#1-5-foreach" class="headerlink" title="1.5 foreach"></a>1.5 foreach</h3><p>另外一个强大的动态SQL语句构造标签是<code>&lt;foreach&gt;</code></p>
<p>它可以迭代遍历一个数组或者集合，构造AND/OR条件或一个IN子句。</p>
<p>假设查询tutor_id为 1，3，6的讲师所教授的课程，我们可以传递一个tutor_id组成的列表给映射语句，然后通过<code>&lt;foreach&gt;</code>遍历此列表构造动态SQL。</p>
<p>例如，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchCourses&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">    SELECT * FROM COURSES </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;tutorIds != null&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;tutorId&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;tutorIds&quot;</span>&gt;</span> </span><br><span class="line">                OR tutor_id = #&#123;tutorId&#125; </span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>



<p>映射接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DynamicSqlMapper</span></span>&#123; </span><br><span class="line">	<span class="function">List&lt;Course&gt; <span class="title">searchCourses</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_searchCourses5</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        DynamicSqlMapper mapper = sqlSession.getMapper(DynamicSqlMapper.class);</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;(); </span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; tutorIds = <span class="keyword">new</span> ArrayList&lt;Integer&gt;(); </span><br><span class="line">        tutorIds.add(<span class="number">1</span>); </span><br><span class="line">        tutorIds.add(<span class="number">3</span>); </span><br><span class="line">        tutorIds.add(<span class="number">6</span>); </span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;tutorIds&quot;</span>, tutorIds); </span><br><span class="line"></span><br><span class="line">        List&lt;Course&gt; courses = mapper.searchCourses(map);</span><br><span class="line"></span><br><span class="line">        courses.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>和上面同样的功能，使用<code>&lt;foreach&gt;</code>生成IN子句：（常用）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;searchCourses&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">    SELECT * FROM COURSES </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;tutorIds != null&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span> </span><br><span class="line">            tutor_id IN </span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;tempValue&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;tutorIds&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span> </span><br><span class="line">                #&#123;tempValue&#125; </span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>动态插入</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveOrderLine&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;collection&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	insert into</span><br><span class="line">	es_orderline(num,cost,book_id,orderForm_id)</span><br><span class="line">	values</span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;collection&quot;</span> <span class="attr">item</span>=<span class="string">&quot;orderLine&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">           (</span><br><span class="line">               #&#123;orderLine.num&#125;,</span><br><span class="line">               #&#123;orderLine.cost&#125;,</span><br><span class="line">               #&#123;orderLine.book.id&#125;,</span><br><span class="line">               #&#123;orderLine.orderForm.id&#125;</span><br><span class="line">           )</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-6-set"><a href="#1-6-set" class="headerlink" title="1.6 set"></a>1.6 set</h3><p><code>&lt;set&gt;</code>元素和<code>&lt;where&gt;</code>元素类似，但是set元素只是针对update更新语句使用的。</p>
<p>例如，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span> </span><br><span class="line">    update students  </span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span>name=#&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null&quot;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone != null&quot;</span>&gt;</span>phone=#&#123;phone&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span> </span><br><span class="line">    where id=#&#123;studId&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，如果<code>&lt;if&gt;</code>条件返回了任何文本内容，<code>&lt;set&gt;</code>将会插入set关键字和其文本内容，并且会剔除将末尾的逗号。</p>
</blockquote>
<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_updateStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        DynamicSqlMapper mapper = sqlSession.getMapper(DynamicSqlMapper.class);</span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setStudId(<span class="number">45</span>);</span><br><span class="line">        student.setEmail(<span class="string">&quot;xx@briup.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mapper.updateStudent(student);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2-特殊"><a href="#2-特殊" class="headerlink" title="2.特殊"></a>2.特殊</h2><p>除了简化数据库编程外，MyBatis还提供了各种<strong>特殊功能</strong>，这些对实现一些常用任务非常有用，比如分页查询，存取CLOB/BLOB类型的数据，处理枚举类型值等等。</p>
<p>可以新建包<strong>special</strong>，相关实体类存放到这里面。<br>另外，在mybaits-config文件中配置别名和新增映射文件。</p>
<h3 id="2-1-枚举类型"><a href="#2-1-枚举类型" class="headerlink" title="2.1 枚举类型"></a>2.1 枚举类型</h3><p>MyBatis支持持久化enum类型属性。</p>
<p>假设t_user表中有一列gender（性别）类型为 varchar2(10)，存储 MALE 或者 FEMALE 两种值。</p>
<p>并且，User对象有一个enum类型的gender 属性，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Gender</span> </span>&#123; </span><br><span class="line">    MALE,FEMALE; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>默认情况下MyBatis使用<code>EnumTypeHandler</code>来处理enum类型的Java属性，并且将其存储为enum值的名称。</p>
<p>我们不需要为此做任何额外的配置。可以像使用基本数据类型属性一样使用enum类型属性。</p>
<p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> t_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line">  id number <span class="keyword">primary</span> key,</span><br><span class="line">  name varchar2(<span class="number">50</span>),</span><br><span class="line">  gender varchar2(<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.special;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123; </span><br><span class="line">	<span class="keyword">private</span> Integer id; </span><br><span class="line">	<span class="keyword">private</span> String name; </span><br><span class="line">	<span class="keyword">private</span> Gender gender;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Gender <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> gender;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Gender gender)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.gender = gender;</span><br><span class="line">	&#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">        select my_seq.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into t_user(id,name,gender) </span><br><span class="line">    values(#&#123;id&#125;,#&#123;name&#125;,#&#123;gender&#125;) </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_insertUser</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        SpecialMapper mapper = sqlSession.getMapper(SpecialMapper.class);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;tom&quot;</span>,Gender.MALE);</span><br><span class="line"></span><br><span class="line">        mapper.insertUser(user);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，当执行insertStudent语句的时候，MyBatis会取Gender枚举对象（FEMALE/MALE）的名称，存储到GENDER列中。</p>
</blockquote>
<p>如果我们想存储FEMALE为0，MALE为1到gender列中，需要在mybatis-config.xml文件中配置专门的<strong>类型处理器</strong>，并指定它处理的枚举类型是哪个。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.briup.special.Gender&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure>

<p>需要注意的是，枚举类型的【顺序值】是根据enum中的声明顺序赋值的。如果改变了Gender里面对象的声明顺序，则数据库存储的数据和此顺序值就不匹配了。</p>
<h3 id="2-2-CLOB-BLOB"><a href="#2-2-CLOB-BLOB" class="headerlink" title="2.2 CLOB/BLOB"></a>2.2 CLOB/BLOB</h3><p>BLOB和CLOB都是大字段类型。</p>
<p>BLOB是按二进制来存储的，而CLOB是可以直接存储文字的。</p>
<p>通常像图片、文件、音乐等信息就用BLOB字段来存储，先将文件转为二进制再存储进去。</p>
<p>文章或者是较长的文字，就用CLOB存储.</p>
<p>BLOB和CLOB在不同的数据库中对应的类型也不一样：</p>
<ul>
<li>在MySQL中，clob对应text/longtext，blob对应blob </li>
<li>在Oracle中，clob对应clob，blob对应blob  </li>
</ul>
<p>对此，MyBatis提供了内建的对CLOB/BLOB类型列的映射处理支持，无需我们额外配置和操作。</p>
<p>例如，</p>
<p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> user_pics;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> user_pics( </span><br><span class="line">    id number <span class="keyword">primary</span> key, </span><br><span class="line">    name varchar2(<span class="number">50</span>) , </span><br><span class="line">    pic <span class="type">blob</span>, </span><br><span class="line">    bio <span class="type">clob</span></span><br><span class="line">); </span><br></pre></td></tr></table></figure>

<p>照片（pic）可以是PNG,JPG或其他格式的。简介信息（bio）可以是比较长的文字描述。</p>
<p>默认情况下，MyBatis将CLOB类型的列映射到<code>java.lang.String</code>类型上、而把BLOB列映射到<code>byte[]</code>类型上。</p>
<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.special;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPic</span></span>&#123; </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">	<span class="keyword">private</span> String name; </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">byte</span>[] pic; <span class="comment">//blob</span></span><br><span class="line">	<span class="keyword">private</span> String bio; <span class="comment">//clob</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">byte</span>[] getPic() &#123;</span><br><span class="line">		<span class="keyword">return</span> pic;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPic</span><span class="params">(<span class="keyword">byte</span>[] pic)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.pic = pic;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getBio</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bio;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBio</span><span class="params">(String bio)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.bio = bio;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p>映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUserPic&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;UserPic&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">        select my_seq.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into user_pics(id,name, pic,bio) </span><br><span class="line">    values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pic&#125;,#&#123;bio&#125;) </span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserPicById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;UserPic&quot;</span>&gt;</span> </span><br><span class="line">    select * from user_pics where id=#&#123;id&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>



<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_insertUserPic</span><span class="params">()</span></span>&#123; </span><br><span class="line">    String name = <span class="string">&quot;tom&quot;</span>; </span><br><span class="line">    String bio = <span class="string">&quot;可以是很长的字符串&quot;</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] pic = <span class="keyword">null</span>; </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//读取用户头像图片</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;src/com/briup/special/1.gif&quot;</span>); </span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(file); </span><br><span class="line">        pic = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()]; </span><br><span class="line">        is.read(pic); </span><br><span class="line">        is.close(); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123; </span><br><span class="line">        e.printStackTrace(); </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备好要插入到数据库中的数据并封装成对象</span></span><br><span class="line">    UserPic userPic = <span class="keyword">new</span> UserPic(name, pic , bio); </span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>; </span><br><span class="line">    <span class="keyword">try</span>&#123; </span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        SpecialMapper mapper = sqlSession.getMapper(SpecialMapper.class);</span><br><span class="line"></span><br><span class="line">        mapper.insertUserPic(userPic);</span><br><span class="line"></span><br><span class="line">        sqlSession.commit(); </span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_getUserPicById</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line">        SpecialMapper mapper = sqlSession.getMapper(SpecialMapper.class);</span><br><span class="line">        UserPic userPic = mapper.getUserPicById(<span class="number">59</span>);</span><br><span class="line">        System.out.println(userPic.getId());</span><br><span class="line">        System.out.println(userPic.getName());</span><br><span class="line">        System.out.println(userPic.getBio());</span><br><span class="line">        System.out.println(userPic.getPic().length);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-多个参数"><a href="#2-3-多个参数" class="headerlink" title="2.3 多个参数"></a>2.3 多个参数</h3><p>MyBatis中的映射语句有一个parameterType属性来制定输入参数的类型。</p>
<p>如果我们想给映射语句传入多个参数的话，我们可以将所有的输入参数放到HashMap中，将HashMap传递给映射语句。</p>
<p>其实就是把多个参数存到Map中，把Map当做一个参数再传给sql语句，mybaits收到后再解析Map集合拿到每一个参数。</p>
<p>同时MyBatis还提供了另外一种传递多个输入参数给映射语句的方法。</p>
<p>例如，我们想通过给定的name和email信息查找学生信息，定义查询接口如下</p>
<p>映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserPicNameById1&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update user_pics set name = #&#123;name&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUserPicNameById2&quot;</span>&gt;</span></span><br><span class="line">    update user_pics set name = #&#123;param2&#125; where id = #&#123;param1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>对于映射器中的方法，MyBatis默认从左到右给方法的参数命名为param1、param2…，依次类推。</p>
</blockquote>
<p>映射接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateUserPicNameById1</span><span class="params">(Map&lt;String,String&gt; map)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateUserPicNameById2</span><span class="params">(Integer id,String name)</span></span>;</span><br></pre></td></tr></table></figure>



<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_updateUserPicNameById1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line">        SpecialMapper mapper = sqlSession.getMapper(SpecialMapper.class);</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;64&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;zs&quot;</span>);</span><br><span class="line">        mapper.updateUserPicNameById1(map);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_updateUserPicNameById2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line">        SpecialMapper mapper = sqlSession.getMapper(SpecialMapper.class);</span><br><span class="line">        mapper.updateUserPicNameById2(<span class="number">64</span>,<span class="string">&quot;ww&quot;</span>);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-映射Map"><a href="#2-4-映射Map" class="headerlink" title="2.4 映射Map"></a>2.4 映射Map</h3><p>可以使用之前用过的方式，接口中方法返回值定义为Map类型，sql语句的resultType属性设置为map即可。这种情况默认把列名作为key,列中的值作为value。</p>
<p>如果有一些特殊的情况，比如需要使用id值作为key，把一行数据封装成的对象作为value放到map中的话，需要使用下面的方式。</p>
<p>例如，</p>
<p>映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span> </span><br><span class="line">	select id,name,gender from t_user </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>



<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_findAllUsers_map</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line">		Map&lt;Integer, User&gt; map = sqlSession.selectMap(<span class="string">&quot;com.briup.mappers.SpecialMapper.findAllUsers&quot;</span>,<span class="string">&quot;id&quot;</span>);</span><br><span class="line">		map.forEach((k,v)-&gt;System.out.println(k+<span class="string">&quot; : &quot;</span>+v));</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ul>
<li>这时候只能使用字符串来调用sql语句，不能使用映射接口的方式（不支持）</li>
<li>t_user表中gender列的值都是数字还是都是字符串，需要保持一致，否则查询报错</li>
<li>这里map将id作为key值，而每行数据封装成的User对象作为value值</li>
<li>map中的key我们可以指定，但是value只能是当前这条数据封装成的对象</li>
</ul>
<h3 id="2-5-分页查询"><a href="#2-5-分页查询" class="headerlink" title="2.5 分页查询"></a>2.5 分页查询</h3><p>MyBatis可以使用RowBounds逐页加载表数据。RowBounds对象可以使用offset和limit参数来构建。参数offset表示开始位置，而limit表示要取的记录的数目。</p>
<p>例如，</p>
<p>映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span> </span><br><span class="line">    select id,name,gender from t_user </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> </span><br></pre></td></tr></table></figure>



<p>映射接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUsers</span><span class="params">(RowBounds rowBounds)</span></span>;</span><br></pre></td></tr></table></figure>



<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_findAllUsers_page</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line">        SpecialMapper mapper = sqlSession.getMapper(SpecialMapper.class);</span><br><span class="line">        <span class="comment">//表示从第几条数据开始</span></span><br><span class="line">        <span class="keyword">int</span> offset = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//连续取出几条数据</span></span><br><span class="line">        <span class="keyword">int</span> limit = <span class="number">5</span>; </span><br><span class="line">        RowBounds rowBounds = <span class="keyword">new</span> RowBounds(offset, limit); </span><br><span class="line">        List&lt;User&gt; list = mapper.findAllUsers(rowBounds);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，若规定每页5条数据，要展示第二页，使用offset=5,limit=5</p>
</blockquote>
<p>其实Mybatis的这种分页是基于内存的分页（查出所有记录再按偏移量offset和limit取结果），在大数据量的情况下这样的分页效率会很低，后面我们会使用mybaits的分页辅助/插件工具来完成分页。</p>
<p>之前，在学习oracle的时候，也学习了使用rownum进行分页：</p>
<p>例如，查询出行号在5~10之间的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> rownum <span class="keyword">as</span> rowno, t.<span class="operator">*</span></span><br><span class="line">    <span class="keyword">from</span> t_user t</span><br><span class="line">    <span class="keyword">where</span> rownum <span class="operator">&lt;=</span> <span class="number">10</span></span><br><span class="line">) temp</span><br><span class="line"><span class="keyword">where</span> temp.rowno <span class="operator">&gt;=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>rownum 可以等于1</li>
<li>rownum 可以大于0</li>
<li>rownum 可以小于任何数  </li>
</ul>
<p>但是可以给rownum起一个别名，并把sql语句查询结果当做一张表再查询，这样就可以对这个行号进行任意操作了。</p>
<h3 id="2-6-处理结果集"><a href="#2-6-处理结果集" class="headerlink" title="2.6 处理结果集"></a>2.6 处理结果集</h3><p>MyBatis提供了<code>ResultHandler</code>接口,可以让我们以任何自己喜欢的方式处理结果集ResultSet。</p>
<p><code>sqlSession.select()</code>方法，可以传递给它一个<code>ResultHandler</code>接口的实现，它会处理<code>ResultSet</code>中查询到的的每一条数据，这时候我们可以按照自己的需要进行封装。</p>
<p>例如，把t_user表中所有数据的id和name查询出来,并且把id值作为key,把name值作为value封装到Map集合中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_ResultHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;(); </span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisSqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        sqlSession.select(<span class="string">&quot;com.briup.mappers.SpecialMapper.findAllUsers&quot;</span>, <span class="keyword">new</span> ResultHandler&lt;User&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(ResultContext&lt;? extends User&gt; resultContext)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//获取当这条数据封装好的User对象</span></span><br><span class="line">                User user = resultContext.getResultObject(); </span><br><span class="line">                <span class="comment">//按照自己的要求的方式进行封装</span></span><br><span class="line">                map.put(user.getId(), user.getName()); </span><br><span class="line">            &#125;</span><br><span class="line">                       </span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//也可以使用之前labmda表达式来完成</span></span><br><span class="line">        sqlSession.select(<span class="string">&quot;com.briup.dao.SpecialMapper.findAllUsers&quot;</span>,</span><br><span class="line">			(resultContext) -&gt; &#123;</span><br><span class="line">				User user = (User) resultContext.getResultObject();</span><br><span class="line">				map.put(user.getId(), user.getName());</span><br><span class="line">			&#125;</span><br><span class="line">		);</span><br><span class="line"></span><br><span class="line">        map.forEach((k,v)-&gt;System.out.println(k+<span class="string">&quot; : &quot;</span>+v));</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 方法名字叫select</p>
</blockquote>
<h3 id="2-7-缓存-redis"><a href="#2-7-缓存-redis" class="headerlink" title="2.7 缓存(redis)"></a>2.7 缓存(redis)</h3><p>默认情况下，mybatis会启用一级缓存。</p>
<p>如果使用同一个session对象调用了相同的SELECT语句，则直接会从缓存中返回结果，而不是再查询一次数据库。</p>
<blockquote>
<p>注意，session调用commit或close方法后,这个session中的一级缓存就会被清空 </p>
</blockquote>
<p>例如，根据日志输出可以看出,下面代码只会发出一条sql查询语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_cache1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        session = MyBatisSqlSessionFactory.openSession();</span><br><span class="line">        SpecialMapper mapper = session.getMapper(SpecialMapper.class);</span><br><span class="line">        User user1 = mapper.findUserById(<span class="number">56</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        User user2 = mapper.findUserById(<span class="number">56</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，根据日志输出可以看出,下面代码只会发出一条sql查询语句</p>
</blockquote>
<blockquote>
<p>注意，session调用commit或close方法后,这个session中的一级缓存就会被清空 </p>
</blockquote>
<p>二级缓存，在不同的session对象之间可以共享缓存的数据</p>
<ol>
<li><code>mybatis-config.xml</code>文件中保证<code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code>设置中是缓存功能是开启的，默认就是开启的true</li>
<li>在需要二级缓存的xml映射文件中,手动开启缓存功能,在根元素中加入一个标签即可:<code>&lt;cache/&gt;</code></li>
<li>一个session查询完数据之后,需要调用commit或者close方法后,这个数据才会进入到二级缓存中,然后其他session就可以共享到这个缓存数据了</li>
<li>默认情况下,被二级缓存保存的对象需要实现序列化接口</li>
</ol>
<p>例如，</p>
<p>配置文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>映射文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.mappers.SpecialMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span> ..<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span> ..<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span>&gt;</span> ..<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SqlSession session = SqlSessionUtil.openSqlSession();</span><br><span class="line">    SpecialMapper mapper = session.getMapper(SpecialMapper.class);</span><br><span class="line">    List&lt;User&gt; userList1 = mapper.findAllUsers();</span><br><span class="line">    session.close();</span><br><span class="line"></span><br><span class="line">    SqlSession session2 = SqlSessionUtil.openSqlSession();</span><br><span class="line">    SpecialMapper mapper2 = session2.getMapper(SpecialMapper.class);</span><br><span class="line">    List&lt;User&gt; userList2 = mapper2.findAllUsers();</span><br><span class="line">    session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>二级缓存补充说明：</p>
<p>  　　1. 映射语句文件中的所有select语句将会被缓存<br>  　　2. 映射语句文件中的所有insert，update和delete语句会刷新缓存<br>  　　3. 缓存会使用Least Recently Used（LRU，最近最少使用的）算法来收回。<br>  　　4. 缓存会根据指定的时间间隔来刷新。<br>  　　5. 缓存会存储1024个对象</p>
<p>cache标签常用属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span> <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span> <span class="attr">size</span>=<span class="string">&quot;512&quot;</span> <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> </span><br></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>eviction=”FIFO” ，回收策略为先进先出</li>
<li>flushInterval=”60000” ，自动刷新时间60s</li>
<li>size=”512” ，最多缓存512个引用对象</li>
<li>readOnly=”true”，true表示对象不可以被序列化,false表示可以被序列化,默认值是false</li>
</ul>
<blockquote>
<p>注意，将来更多的时候我们会使用redis来进行对数据的缓存，而不是使用mybaits提供的缓存功能</p>
</blockquote>
<h2 id="3-注解"><a href="#3-注解" class="headerlink" title="3.注解"></a>3.注解</h2><blockquote>
<p>注解相关的内容作为了解即可，大多数情况下会还是会使用xml方式进行配置</p>
</blockquote>
<p>之前我们都是在映射器MapperXML配置文件中配置映射语句的。除此之外MyBatis也支持使用注解来配置映射语句。</p>
<p>当我们使用基于注解的映射器接口时，我们不再需要在XML配置文件中配置了。也可以同时使用基于XML和基于注解的映射语句。</p>
<p>例如，准备测试环境</p>
<p>建表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> person;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> person(</span><br><span class="line">    id number <span class="keyword">primary</span> key,</span><br><span class="line">    name varchar2(<span class="number">15</span>),</span><br><span class="line">    age number</span><br><span class="line">);	</span><br></pre></td></tr></table></figure>



<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.special;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Integer age;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> age;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-1-接口"><a href="#3-1-接口" class="headerlink" title="3.1 接口"></a>3.1 接口</h3><p>Mybatis中的注解，是直接写在映射接口中的。</p>
<p>MyBatis对于大部分的基于XML的映射配置（包括<code>&lt;select&gt;</code>,<code>&lt;update&gt;</code>等）提供了对应的基于注解的配置。然而在某些情况下，有些xml的配置功能，使用注解的方式是实现不了的。</p>
<h3 id="3-2-使用"><a href="#3-2-使用" class="headerlink" title="3.2 使用"></a>3.2 使用</h3><p>MyBatis提供了多种注解来支持不同类型的语句如:SELECT,INSERT,UPDATE,DELETE。</p>
<h4 id="3-2-1-Insert"><a href="#3-2-1-Insert" class="headerlink" title="3.2.1 @Insert"></a>3.2.1 @Insert</h4><p>我们可以使用 <code>@Insert</code>注解来定义一个INSERT映射语句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.briup.mappers; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Insert(&quot;insert into students(stud_id,name,email,addr_id, phone) values(#&#123;studId&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;address.addrId&#125;,#&#123;phone&#125;)&quot;)</span> </span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>注意，在mybatis-config.xml中，需要配置，通知mybaits，哪一个接口有注解的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.briup.dao.SpecialMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>自动生成主键</p>
<p>可以使用 <code>@Options</code>注解的userGeneratedKeys和keyProperty属性让数据库产生 auto_increment（自增长）列的值，然后将生成的值设置到输入参数对象的属性中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into students(name,email,addr_id, phone) </span></span><br><span class="line"><span class="meta">		values(#&#123;name&#125;,#&#123;email&#125;,#&#123;address.addr Id&#125;,#&#123;phone&#125;)&quot;)</span> </span><br><span class="line"><span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;studId&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里ID列值将会通过MySQL数据库自动生成。并且生成的值将会被设置到student对象的studId属性中。</p>
</blockquote>
<p>有一些数据库如Oracle，并不支持AUTO_INCREMENT列属性，它使用序列（SEQUENCE）来产生主键的值。</p>
<p>我们可以使用 <code>@SelectKey</code>注解来为任意SQL语句来指定主键值，作为主键列的值。假设我们有一个名为STUD_ID_SEQ的序列来生成STUD_ID主键值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into students(stud_id,name,email,addr_id,phone) values(#&#123;studId&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;address.addrId&#125;,#&#123;phone&#125;)&quot;)</span> </span><br><span class="line"><span class="meta">@SelectKey(statement=&quot;select my_seq.nextval from dual&quot;,  </span></span><br><span class="line"><span class="meta">           keyProperty=&quot;studId&quot;, resultType=int.class, before=true)</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里使用了<code>@SelectKey</code>来生成主键值，并且存储到了student对象的studId属性上。由于我们设置了<code>before=true</code>,该语句将会在执行INSERT语句之前执行</p>
<h4 id="3-2-2-Update"><a href="#3-2-2-Update" class="headerlink" title="3.2.2 @Update"></a>3.2.2 @Update</h4><p>我们可以使用 <code>@Update</code>注解来定义一个UPDATE映射语句，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;update students set name=#&#123;name&#125;, email=#&#123;email&#125;,phone=#&#123;phone&#125; where stud_id=#&#123;studId&#125;&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateStudent</span><span class="params">(Student student)</span></span>; </span><br></pre></td></tr></table></figure>

<h4 id="3-2-3-Delete"><a href="#3-2-3-Delete" class="headerlink" title="3.2.3 @Delete"></a>3.2.3 @Delete</h4><p>我们可以使用 <code>@Delete</code>注解来定义一个DELETE映射语句，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from students where stud_id=#&#123;studId&#125;&quot;)</span> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteStudent</span><span class="params">(<span class="keyword">int</span> studId)</span></span>;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-4-Select"><a href="#3-2-4-Select" class="headerlink" title="3.2.4 @Select"></a>3.2.4 @Select</h4><p>我们可以使用 <code>@Select</code>注解来定义一个SELECT映射语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select id as studid, name, email, phone from students where stud_id=#&#123;studId&#125;&quot;)</span> </span><br><span class="line"><span class="function">Student <span class="title">findStudentById</span><span class="params">(Integer studId)</span></span>; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里为了将列名和对象中属性名匹配，为ID起了一个studId的别名。如果此查询返回了多行结果，将抛出TooManyResultsException异常</p>
</blockquote>
<h3 id="3-3-结果映射"><a href="#3-3-结果映射" class="headerlink" title="3.3 结果映射"></a>3.3 结果映射</h3><p>可以将查询结果通过别名或者是<code>@Results</code>注解与实体类的属性映射起来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from students&quot;)</span> </span><br><span class="line"><span class="meta">@Results(&#123; </span></span><br><span class="line"><span class="meta">        @Result(id = true, column = &quot;id&quot;, property = &quot;studId&quot;), </span></span><br><span class="line"><span class="meta">        @Result(column = &quot;name&quot;, property = &quot;name&quot;), </span></span><br><span class="line"><span class="meta">        @Result(column = &quot;email&quot;, property = &quot;email&quot;), </span></span><br><span class="line"><span class="meta">        @Result(column = &quot;addr_id&quot;, property = &quot;address.addrId&quot;) </span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findAllStudents</span><span class="params">()</span></span>; </span><br><span class="line">	</span><br></pre></td></tr></table></figure>



<p>也可以在xml中定义结果集，然后在注解中引用。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from students where stud_id=#&#123;studId&#125;&quot;)</span> </span><br><span class="line"><span class="meta">@Results(&#123; </span></span><br><span class="line"><span class="meta">		@Result(id = true, column = &quot;id&quot;, property = &quot;studId&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;name&quot;, property = &quot;name&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;email&quot;, property = &quot;email&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;addr_id&quot;, property = &quot;address.addrId&quot;) </span></span><br><span class="line"><span class="meta">&#125;)</span> </span><br><span class="line"><span class="function">Student <span class="title">findStudentById</span><span class="params">(<span class="keyword">int</span> studId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from students&quot;)</span> </span><br><span class="line"><span class="meta">@Results(&#123; </span></span><br><span class="line"><span class="meta">		@Result(id = true, column = &quot;id&quot;, property = &quot;studId&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;name&quot;, property = &quot;name&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;email&quot;, property = &quot;email&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;addr_id&quot;, property = &quot;address.addrId&quot;) </span></span><br><span class="line"><span class="meta">&#125;)</span> </span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">findAllStudents</span><span class="params">()</span></span>; </span><br></pre></td></tr></table></figure>

<p>这里两个语句的 <code>@Results</code>配置完全相同，可以创建一个映射文件，文件中配置<code>&lt;resultMap&gt;</code>元素，然后使用 <code>@ResultMap</code>注解引用此<code>&lt;resultMap&gt;</code></p>
<p>在StudentMapper.xml中定义一个ID为StudentResult的<code>&lt;resultMap&gt;</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.mappers.StudentMapper&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentResult&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在StudentMapper.java中,使用 <code>@ResultMap</code>引用名为StudentResult的resultMap:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123; </span><br><span class="line">    <span class="meta">@Select(&quot;select * from students where stud_id=#&#123;studId&#125;&quot;)</span> </span><br><span class="line">    <span class="meta">@ResultMap(&quot;com.briup.mappers.StudentMapper.StudentResult&quot;)</span> </span><br><span class="line">    <span class="function">Student <span class="title">findStudentById</span><span class="params">(<span class="keyword">int</span> studId)</span></span>; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from students&quot;)</span> </span><br><span class="line">    <span class="meta">@ResultMap(&quot;com.briup.mappers.StudentMapper.StudentResult&quot;)</span> </span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">findAllStudents</span><span class="params">()</span></span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="3-4-一对一"><a href="#3-4-一对一" class="headerlink" title="3.4 一对一"></a>3.4 一对一</h3><p>MyBatis提供了 <code>@One</code>注解来使用嵌套select语句加载一对一关联查询数据。</p>
<p>例如，使用<code>@One</code>注解获取学生及其地址信息 <code>@Result</code>注解中，有one这个属性，也有many这个属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123; </span><br><span class="line">    <span class="meta">@Select(&quot;select addr_id as addrId, street, city, state, zip, country from addresses where addr_id=#&#123;id&#125;&quot;)</span> </span><br><span class="line">    <span class="function">Address <span class="title">findAddressById</span><span class="params">(<span class="keyword">int</span> id)</span></span>; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from students where stud_id=#&#123;studId&#125; &quot;)</span> </span><br><span class="line">    <span class="meta">@Results(&#123; </span></span><br><span class="line"><span class="meta">            @Result(id = true, column = &quot;id&quot;, property = &quot;studId&quot;), </span></span><br><span class="line"><span class="meta">            @Result(column = &quot;name&quot;, property = &quot;name&quot;), </span></span><br><span class="line"><span class="meta">            @Result(column = &quot;email&quot;, property = &quot;email&quot;), </span></span><br><span class="line"><span class="meta">            @Result(property = &quot;address&quot;, column = &quot;addr_id&quot;, </span></span><br><span class="line"><span class="meta">                    one = @One(select = &quot;com.briup.mappers.Student Mapper.findAddressById&quot;)) </span></span><br><span class="line"><span class="meta">    &#125;)</span> </span><br><span class="line">    <span class="function">Student <span class="title">selectStudentWithAddress</span><span class="params">(<span class="keyword">int</span> studId)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<p>这里使用了<code>@One</code>注解的select属性来指定一个方法，该方法会返回一个Address对象。</p>
<p>使用column=”addr_id”,则STUEDNTS表中列addr_id的值将会作为输入参数传递给findAddressById()方法。</p>
<p>如果 <code>@One</code> SELECT查询返回了多行结果，则会抛出TooManyResultsException异常。</p>
<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> studId = <span class="number">1</span>; </span><br><span class="line">StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class); </span><br><span class="line">Student student = studentMapper.selectStudentWithAddress(studId); </span><br><span class="line">System.out.println(<span class="string">&quot;Student :&quot;</span>+student); </span><br><span class="line">System.out.println(<span class="string">&quot;Address :&quot;</span>+student.getAddress()); </span><br></pre></td></tr></table></figure>





<p>之前可以通过基于XML的映射配置，使用嵌套结果ResultMap来加载一对一关联的查询。而MyBatis当前版本中，并没有对应的注解支持。</p>
<p>但是可以在映射文件中把1对1的嵌套结果形式的映射信息配置好，然后在@ResultMap注解中去引用它。</p>
<p>在StudentMapper.xml中配置<code>&lt;resultMap&gt;</code>，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.mappers.StudentMapper&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;AddressResult&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;addrId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;street&quot;</span> <span class="attr">column</span>=<span class="string">&quot;street&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;city&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;state&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;zip&quot;</span> <span class="attr">column</span>=<span class="string">&quot;zip&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;country&quot;</span> <span class="attr">column</span>=<span class="string">&quot;country&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentWithAddressResult&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;studId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AddressResult&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span> </span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123; </span><br><span class="line">		<span class="meta">@Select(&quot;select stud_id, name, email, a.addr_id, street, city, state, zip, country&quot; + &quot; FROM students s left outer join addresses a on s.addr_id=a.addr_id&quot; + &quot; where stud_id=#&#123;studId&#125; &quot;)</span> </span><br><span class="line">		<span class="meta">@ResultMap(&quot;com.briup.mappers.StudentMapper.StudentWithAddressResult&quot;)</span> </span><br><span class="line">		<span class="function">Student <span class="title">selectStudentWithAddress</span><span class="params">(<span class="keyword">int</span> id)</span></span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<h3 id="3-5-一对多"><a href="#3-5-一对多" class="headerlink" title="3.5 一对多"></a>3.5 一对多</h3><p>MyBatis提供了<code>@Many</code>注解，用来使用嵌套Select语句加载一对多关联查询。</p>
<p>例如，使用<code>@Many</code>注解获取一个讲师及其教授课程列表信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TutorMapper</span></span>&#123; </span><br><span class="line">	<span class="meta">@Select(&quot;select addr_id as addrId, street, city, state, zip, </span></span><br><span class="line"><span class="meta">			country from addresses where addr_id=#&#123;id&#125;&quot;)</span> </span><br><span class="line">	<span class="function">Address <span class="title">findAddressById</span><span class="params">(<span class="keyword">int</span> id)</span></span>; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Select(&quot;select * from courses where tutor_id=#&#123;tutorId&#125;&quot;)</span> </span><br><span class="line">	<span class="meta">@Results( </span></span><br><span class="line"><span class="meta">	&#123; </span></span><br><span class="line"><span class="meta">		@Result(id = true, column = &quot;course_id&quot;, property = &quot;courseId&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;name&quot;, property = &quot;name&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;description&quot;, property = &quot;description&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;start_date&quot; property = &quot;startDate&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;end_date&quot; property = &quot;endDate&quot;) </span></span><br><span class="line"><span class="meta">	&#125;)</span> </span><br><span class="line">	<span class="function">List&lt;Course&gt; <span class="title">findCoursesByTutorId</span><span class="params">(<span class="keyword">int</span> tutorId)</span></span>; </span><br><span class="line"></span><br><span class="line">	<span class="meta">@Select(&quot;SELECT tutor_id, name as tutor_name, email, addr_id </span></span><br><span class="line"><span class="meta">			FROM tutors where tutor_id=#&#123;tutorId&#125;&quot;)</span> </span><br><span class="line">	<span class="meta">@Results( </span></span><br><span class="line"><span class="meta">	&#123; </span></span><br><span class="line"><span class="meta">		@Result(id = true, column = &quot;tutor_id&quot;, property = &quot;tutorId&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;tutor_name&quot;, property = &quot;name&quot;), </span></span><br><span class="line"><span class="meta">		@Result(column = &quot;email&quot;, property = &quot;email&quot;), </span></span><br><span class="line"><span class="meta">		@Result(property = &quot;address&quot;, column = &quot;addr_id&quot;, </span></span><br><span class="line"><span class="meta">		one = @One(select = &quot;com.briup.mappers.TutorMapper.findAddressById&quot;)), </span></span><br><span class="line"><span class="meta">		@Result(property = &quot;courses&quot;, column = &quot;tutor_id&quot;, </span></span><br><span class="line"><span class="meta">		many = @Many(select = &quot;com.briup.mappers.TutorMapper.findCoursesByTutorId&quot;)) </span></span><br><span class="line"><span class="meta">	&#125;)</span> </span><br><span class="line">	<span class="function">Tutor <span class="title">findTutorById</span><span class="params">(<span class="keyword">int</span> tutorId)</span></span>; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p> 这里使用了<code>@Many</code>注解的select属性来指向一个方法，该方法将返回一个<code>List&lt;Course&gt;</code>对象。</p>
<p>使用column=”tutor_id”，TUTORS表中的tutor_id列值将会作为输入参数传递给findCoursesByTutorId()方法。 </p>
<p>之前可以通过基于XML的映射配置，使用嵌套结果ResultMap来加载一对N关联的查询。而MyBatis当前版本，并没有对应的注解支持。</p>
<p>但是可以在映射文件中把1对N的嵌套结果形式的映射信息配置好，然后在<code>@ResultMap</code>注解中去引用它。</p>
<p>例如，在TutorMapper.xml中配置<code>&lt;resultMap&gt;</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.briup.mappers.Tutor Mapper&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Address&quot;</span> <span class="attr">id</span>=<span class="string">&quot;AddressResult&quot;</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;addrId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;addr_id&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;street&quot;</span> <span class="attr">column</span>=<span class="string">&quot;street&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;city&quot;</span> <span class="attr">column</span>=<span class="string">&quot;city&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;state&quot;</span> <span class="attr">column</span>=<span class="string">&quot;state&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;zip&quot;</span> <span class="attr">column</span>=<span class="string">&quot;zip&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;country&quot;</span> <span class="attr">column</span>=<span class="string">&quot;country&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Course&quot;</span> <span class="attr">id</span>=<span class="string">&quot;CourseResult&quot;</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;course_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;course Id&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;description&quot;</span> <span class="attr">property</span>=<span class="string">&quot;description&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;start_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;startDate&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;end_date&quot;</span> <span class="attr">property</span>=<span class="string">&quot;endDate&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;Tutor&quot;</span> <span class="attr">id</span>=<span class="string">&quot;TutorResult&quot;</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;tutor_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tutorId&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tutor_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">result</span> <span class="attr">Map</span>=<span class="string">&quot;AddressResult&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;courses&quot;</span> <span class="attr">result</span> <span class="attr">Map</span>=<span class="string">&quot;CourseResult&quot;</span> /&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TutorMapper</span></span>&#123; </span><br><span class="line">	<span class="meta">@Select(&quot;select t.tutor_id, t.name as tutor_name,email,a.addr_id, street, city, state, zip, country, course_id, c.name,description, start_date, end_date  from tutors t left outer join addresses a on t.addr_id=a.addr_id left outer join courses c on t.tutor_id=c.tutor_id where t.tutor_id=#&#123;tutorId&#125;&quot;)</span> </span><br><span class="line">	<span class="meta">@ResultMap(&quot;com.briup.mappers.TutorMapper.TutorResult&quot;)</span> </span><br><span class="line">	<span class="function">Tutor <span class="title">selectTutorById</span><span class="params">(<span class="keyword">int</span> tutorId)</span></span>; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

















]]></content>
      <tags>
        <tag>briup</tag>
      </tags>
  </entry>
</search>
